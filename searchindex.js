Search.setIndex({"alltitles": {"API of Conditional Average Treatment Effect Package": [[83, "api-of-conditional-average-treatment-effect-package"]], "Bootstrap Inference": [[100, "bootstrap-inference"]], "CATE Estimators": [[82, "cate-estimators"]], "CATE Interpreters": [[82, "cate-interpreters"]], "CATE Scorers": [[82, "cate-scorers"]], "CATE Validation": [[82, "cate-validation"]], "Causal Analysis": [[82, "causal-analysis"]], "CausalForest (aka Forest Double Machine Learning)": [[91, "causalforest-aka-forest-double-machine-learning"]], "Class Hierarchy Structure": [[88, "class-hierarchy-structure"], [89, "class-hierarchy-structure"], [90, "class-hierarchy-structure"], [91, "class-hierarchy-structure"], [92, "class-hierarchy-structure"], [93, "class-hierarchy-structure"]], "Community": [[85, null]], "Confidence Intervals and Inference": [[107, "confidence-intervals-and-inference"]], "Customer Segmentation": [[103, "customer-segmentation"]], "DRTester": [[107, "drtester"]], "Debiased Lasso Inference": [[100, "debiased-lasso-inference"]], "Detailed estimator comparison": [[86, null]], "DoWhy Refutation Tests": [[107, "dowhy-refutation-tests"]], "Domain Adaptation Learner": [[92, "domain-adaptation-learner"]], "Double Machine Learning (DML)": [[82, "double-machine-learning-dml"]], "Double Machine Learning (DML) IV": [[82, "double-machine-learning-dml-iv"]], "Doubly Robust (DR)": [[82, "doubly-robust-dr"]], "Doubly Robust (DR) IV": [[82, "doubly-robust-dr-iv"]], "Doubly Robust Learner": [[92, "doubly-robust-learner"]], "Doubly Robust Learning": [[89, null]], "Dynamic Double Machine Learning": [[82, "dynamic-double-machine-learning"], [90, null]], "EconML User Guide": [[106, null]], "Estimation Methods for Dynamic Treatment Regimes": [[95, null]], "Estimation Methods under Unconfoundedness": [[87, null]], "Estimation Methods with Instruments": [[96, null]], "Estimators for Panel Data": [[82, "estimators-for-panel-data"]], "Example Usage": [[98, "example-usage"]], "Example Use of API": [[83, "example-use-of-api"]], "Federated Estimation": [[82, "federated-estimation"]], "Federated Learning in EconML": [[98, null]], "Federated Learning with EconML": [[98, "federated-learning-with-econml"]], "Forest Based Estimators": [[91, null]], "Forest Doubly Robust Learner": [[91, "forest-doubly-robust-learner"]], "Frequently Asked Questions (FAQ)": [[97, null]], "Generalized Random Forests": [[82, "generalized-random-forests"]], "How can I test whether I\u2019m identifying the causal effect?": [[97, "how-can-i-test-whether-i-m-identifying-the-causal-effect"]], "How do I give feedback?": [[97, "how-do-i-give-feedback"]], "How do I know if the results make sense?": [[97, "how-do-i-know-if-the-results-make-sense"]], "Indices and tables": [[81, "indices-and-tables"]], "Inference": [[82, "inference"], [100, null]], "Inference Methods": [[82, "inference-methods"]], "Inference Results": [[82, "inference-results"]], "Instrumental Variable CATE Estimators": [[82, "instrumental-variable-cate-estimators"]], "Integration with DoWhy": [[82, "integration-with-dowhy"]], "Interpretability": [[101, null]], "Introducing the FederatedEstimator": [[98, "introducing-the-federatedestimator"]], "Introduction to Causal Inference": [[84, null]], "I\u2019m getting causal estimates that don\u2019t make sense. What next?": [[97, "i-m-getting-causal-estimates-that-don-t-make-sense-what-next"]], "Library Flow Chart": [[99, null]], "Linear Model Extensions": [[82, "linear-model-extensions"]], "Linear in Treatment CATE Estimators": [[83, "linear-in-treatment-cate-estimators"]], "Machine Learning Based Estimation of Heterogeneous Treatment Effects": [[103, null]], "Meta-Learners": [[82, "meta-learners"], [92, null]], "Model Selection": [[102, null]], "Model Selection Extensions": [[82, "model-selection-extensions"]], "Motivating Examples": [[103, "motivating-examples"]], "Motivation for Incorporating Federated Learning into the EconML Library": [[98, "motivation-for-incorporating-federated-learning-into-the-econml-library"]], "Multi-investment Attribution": [[103, "multi-investment-attribution"]], "Non-Parametric Double Machine Learning": [[92, "non-parametric-double-machine-learning"]], "OLS Inference": [[100, "ols-inference"]], "OrthoForest Bootstrap of Little Bags Inference": [[100, "orthoforest-bootstrap-of-little-bags-inference"]], "Orthogonal Random Forest (ORF)": [[82, "orthogonal-random-forest-orf"]], "Orthogonal Random Forests": [[91, "orthogonal-random-forests"]], "Orthogonal instrumental variables": [[93, null]], "Orthogonal/Double Machine Learning": [[88, null]], "Overview": [[98, "overview"], [104, null]], "Overview of Formal Methodology": [[88, "overview-of-formal-methodology"], [89, "overview-of-formal-methodology"], [91, "overview-of-formal-methodology"], [92, "overview-of-formal-methodology"]], "Policy Interpreter": [[101, "policy-interpreter"]], "Policy Learning": [[82, "policy-learning"]], "Private Module Reference": [[82, "private-module-reference"]], "Problem Setup and API Design": [[83, null]], "Public Module Reference": [[82, null]], "Recommendation A/B testing": [[103, "recommendation-a-b-testing"]], "References": [[105, null]], "S-Learner": [[92, "s-learner"]], "SHAP": [[101, "shap"]], "Scikit-Learn Extensions": [[82, "scikit-learn-extensions"]], "Scoring": [[107, "scoring"]], "Sensitivity Analysis": [[107, "sensitivity-analysis"]], "Sieve 2SLS Instrumental Variable Estimation": [[94, null]], "Sieve Methods": [[82, "sieve-methods"]], "Solutions": [[82, "solutions"]], "Subsampled Honest Forest Inference": [[100, "subsampled-honest-forest-inference"]], "T-Learner": [[92, "t-learner"]], "Theory": [[98, "theory"]], "Todo": [[92, "id3"], [100, "id3"], [106, "id1"]], "Tree Interpreter": [[101, "tree-interpreter"]], "Usage Examples": [[88, "usage-examples"], [89, "usage-examples"], [91, "usage-examples"], [92, "usage-examples"], [93, "usage-examples"]], "Usage FAQs": [[88, "usage-faqs"], [89, "usage-faqs"], [90, "usage-faqs"]], "Utilities": [[82, "utilities"]], "Validation": [[107, null]], "Welcome to econml\u2019s documentation!": [[81, null]], "What are the advantages of EconML?": [[97, "what-are-the-advantages-of-econml"]], "What are the relevant estimator classes?": [[88, "what-are-the-relevant-estimator-classes"], [89, "what-are-the-relevant-estimator-classes"], [90, "what-are-the-relevant-estimator-classes"], [91, "what-are-the-relevant-estimator-classes"], [92, "what-are-the-relevant-estimator-classes"], [93, "what-are-the-relevant-estimator-classes"]], "What if I don\u2019t have a good instrument, can\u2019t run an experiment, and don\u2019t observe all confounders?": [[97, "what-if-i-don-t-have-a-good-instrument-can-t-run-an-experiment-and-don-t-observe-all-confounders"]], "What is it?": [[88, "what-is-it"], [89, "what-is-it"], [90, "what-is-it"], [91, "what-is-it"], [92, "what-is-it"], [93, "what-is-it"]], "When should I use EconML?": [[97, "when-should-i-use-econml"]], "When should you use it?": [[88, "when-should-you-use-it"], [89, "when-should-you-use-it"], [90, "when-should-you-use-it"], [91, "when-should-you-use-it"], [92, "when-should-you-use-it"], [93, "when-should-you-use-it"]], "X-Learner": [[92, "x-learner"]], "econml._cate_estimator": [[0, null]], "econml._ortho_learner": [[1, null]], "econml.cate_interpreter.SingleTreeCateInterpreter": [[2, null]], "econml.cate_interpreter.SingleTreePolicyInterpreter": [[3, null]], "econml.dml.CausalForestDML": [[4, null]], "econml.dml.DML": [[5, null]], "econml.dml.KernelDML": [[6, null]], "econml.dml.LinearDML": [[7, null]], "econml.dml.NonParamDML": [[8, null]], "econml.dml.SparseLinearDML": [[9, null]], "econml.dml._rlearner": [[10, null]], "econml.dowhy.DoWhyWrapper": [[11, null]], "econml.dr.DRLearner": [[12, null]], "econml.dr.ForestDRLearner": [[13, null]], "econml.dr.LinearDRLearner": [[14, null]], "econml.dr.SparseLinearDRLearner": [[15, null]], "econml.federated_learning.FederatedEstimator": [[16, null]], "econml.grf.CausalForest": [[17, null]], "econml.grf.CausalIVForest": [[18, null]], "econml.grf.LinearMomentGRFCriterion": [[19, null]], "econml.grf.LinearMomentGRFCriterionMSE": [[20, null]], "econml.grf.MultiOutputGRF": [[21, null]], "econml.grf.RegressionForest": [[22, null]], "econml.grf._base_grf.BaseGRF": [[23, null]], "econml.grf._base_grftree.GRFTree": [[24, null]], "econml.inference.BootstrapInference": [[25, null]], "econml.inference.EmpiricalInferenceResults": [[26, null]], "econml.inference.GenericModelFinalInference": [[27, null]], "econml.inference.GenericModelFinalInferenceDiscrete": [[28, null]], "econml.inference.GenericSingleTreatmentModelFinalInference": [[29, null]], "econml.inference.LinearModelFinalInference": [[30, null]], "econml.inference.LinearModelFinalInferenceDiscrete": [[31, null]], "econml.inference.NormalInferenceResults": [[32, null]], "econml.inference.PopulationSummaryResults": [[33, null]], "econml.inference.StatsModelsInference": [[34, null]], "econml.inference.StatsModelsInferenceDiscrete": [[35, null]], "econml.inference._bootstrap": [[36, null]], "econml.iv.dml.DMLIV": [[37, null]], "econml.iv.dml.NonParamDMLIV": [[38, null]], "econml.iv.dml.OrthoIV": [[39, null]], "econml.iv.dr.DRIV": [[40, null]], "econml.iv.dr.ForestDRIV": [[41, null]], "econml.iv.dr.IntentToTreatDRIV": [[42, null]], "econml.iv.dr.LinearDRIV": [[43, null]], "econml.iv.dr.LinearIntentToTreatDRIV": [[44, null]], "econml.iv.dr.SparseLinearDRIV": [[45, null]], "econml.iv.sieve.DPolynomialFeatures": [[46, null]], "econml.iv.sieve.HermiteFeatures": [[47, null]], "econml.iv.sieve.SieveTSLS": [[48, null]], "econml.metalearners.DomainAdaptationLearner": [[49, null]], "econml.metalearners.SLearner": [[50, null]], "econml.metalearners.TLearner": [[51, null]], "econml.metalearners.XLearner": [[52, null]], "econml.orf.DMLOrthoForest": [[53, null]], "econml.orf.DROrthoForest": [[54, null]], "econml.panel.dml.DynamicDML": [[55, null]], "econml.policy.DRPolicyForest": [[56, null]], "econml.policy.DRPolicyTree": [[57, null]], "econml.policy.PolicyForest": [[58, null]], "econml.policy.PolicyTree": [[59, null]], "econml.score.EnsembleCateEstimator": [[60, null]], "econml.score.RScorer": [[61, null]], "econml.sklearn_extensions.linear_model.DebiasedLasso": [[62, null]], "econml.sklearn_extensions.linear_model.MultiOutputDebiasedLasso": [[63, null]], "econml.sklearn_extensions.linear_model.SelectiveRegularization": [[64, null]], "econml.sklearn_extensions.linear_model.StatsModelsLinearRegression": [[65, null]], "econml.sklearn_extensions.linear_model.StatsModelsRLM": [[66, null]], "econml.sklearn_extensions.linear_model.WeightedLasso": [[67, null]], "econml.sklearn_extensions.linear_model.WeightedLassoCV": [[68, null]], "econml.sklearn_extensions.linear_model.WeightedLassoCVWrapper": [[69, null]], "econml.sklearn_extensions.linear_model.WeightedMultiTaskLassoCV": [[70, null]], "econml.sklearn_extensions.model_selection.GridSearchCVList": [[71, null]], "econml.sklearn_extensions.model_selection.WeightedKFold": [[72, null]], "econml.sklearn_extensions.model_selection.WeightedStratifiedKFold": [[73, null]], "econml.solutions.causal_analysis.CausalAnalysis": [[74, null]], "econml.utilities": [[75, null]], "econml.validate.BLPEvaluationResults": [[76, null]], "econml.validate.CalibrationEvaluationResults": [[77, null]], "econml.validate.DRTester": [[78, null]], "econml.validate.EvaluationResults": [[79, null]], "econml.validate.UpliftEvaluationResults": [[80, null]]}, "docnames": ["_autosummary/econml._cate_estimator", "_autosummary/econml._ortho_learner", "_autosummary/econml.cate_interpreter.SingleTreeCateInterpreter", "_autosummary/econml.cate_interpreter.SingleTreePolicyInterpreter", "_autosummary/econml.dml.CausalForestDML", "_autosummary/econml.dml.DML", "_autosummary/econml.dml.KernelDML", "_autosummary/econml.dml.LinearDML", "_autosummary/econml.dml.NonParamDML", "_autosummary/econml.dml.SparseLinearDML", "_autosummary/econml.dml._rlearner", "_autosummary/econml.dowhy.DoWhyWrapper", "_autosummary/econml.dr.DRLearner", "_autosummary/econml.dr.ForestDRLearner", "_autosummary/econml.dr.LinearDRLearner", "_autosummary/econml.dr.SparseLinearDRLearner", "_autosummary/econml.federated_learning.FederatedEstimator", "_autosummary/econml.grf.CausalForest", "_autosummary/econml.grf.CausalIVForest", "_autosummary/econml.grf.LinearMomentGRFCriterion", "_autosummary/econml.grf.LinearMomentGRFCriterionMSE", "_autosummary/econml.grf.MultiOutputGRF", "_autosummary/econml.grf.RegressionForest", "_autosummary/econml.grf._base_grf.BaseGRF", "_autosummary/econml.grf._base_grftree.GRFTree", "_autosummary/econml.inference.BootstrapInference", "_autosummary/econml.inference.EmpiricalInferenceResults", "_autosummary/econml.inference.GenericModelFinalInference", "_autosummary/econml.inference.GenericModelFinalInferenceDiscrete", "_autosummary/econml.inference.GenericSingleTreatmentModelFinalInference", "_autosummary/econml.inference.LinearModelFinalInference", "_autosummary/econml.inference.LinearModelFinalInferenceDiscrete", "_autosummary/econml.inference.NormalInferenceResults", "_autosummary/econml.inference.PopulationSummaryResults", "_autosummary/econml.inference.StatsModelsInference", "_autosummary/econml.inference.StatsModelsInferenceDiscrete", "_autosummary/econml.inference._bootstrap", "_autosummary/econml.iv.dml.DMLIV", "_autosummary/econml.iv.dml.NonParamDMLIV", "_autosummary/econml.iv.dml.OrthoIV", "_autosummary/econml.iv.dr.DRIV", "_autosummary/econml.iv.dr.ForestDRIV", "_autosummary/econml.iv.dr.IntentToTreatDRIV", "_autosummary/econml.iv.dr.LinearDRIV", "_autosummary/econml.iv.dr.LinearIntentToTreatDRIV", "_autosummary/econml.iv.dr.SparseLinearDRIV", "_autosummary/econml.iv.sieve.DPolynomialFeatures", "_autosummary/econml.iv.sieve.HermiteFeatures", "_autosummary/econml.iv.sieve.SieveTSLS", "_autosummary/econml.metalearners.DomainAdaptationLearner", "_autosummary/econml.metalearners.SLearner", "_autosummary/econml.metalearners.TLearner", "_autosummary/econml.metalearners.XLearner", "_autosummary/econml.orf.DMLOrthoForest", "_autosummary/econml.orf.DROrthoForest", "_autosummary/econml.panel.dml.DynamicDML", "_autosummary/econml.policy.DRPolicyForest", "_autosummary/econml.policy.DRPolicyTree", "_autosummary/econml.policy.PolicyForest", "_autosummary/econml.policy.PolicyTree", "_autosummary/econml.score.EnsembleCateEstimator", "_autosummary/econml.score.RScorer", "_autosummary/econml.sklearn_extensions.linear_model.DebiasedLasso", "_autosummary/econml.sklearn_extensions.linear_model.MultiOutputDebiasedLasso", "_autosummary/econml.sklearn_extensions.linear_model.SelectiveRegularization", "_autosummary/econml.sklearn_extensions.linear_model.StatsModelsLinearRegression", "_autosummary/econml.sklearn_extensions.linear_model.StatsModelsRLM", "_autosummary/econml.sklearn_extensions.linear_model.WeightedLasso", "_autosummary/econml.sklearn_extensions.linear_model.WeightedLassoCV", "_autosummary/econml.sklearn_extensions.linear_model.WeightedLassoCVWrapper", "_autosummary/econml.sklearn_extensions.linear_model.WeightedMultiTaskLassoCV", "_autosummary/econml.sklearn_extensions.model_selection.GridSearchCVList", "_autosummary/econml.sklearn_extensions.model_selection.WeightedKFold", "_autosummary/econml.sklearn_extensions.model_selection.WeightedStratifiedKFold", "_autosummary/econml.solutions.causal_analysis.CausalAnalysis", "_autosummary/econml.utilities", "_autosummary/econml.validate.BLPEvaluationResults", "_autosummary/econml.validate.CalibrationEvaluationResults", "_autosummary/econml.validate.DRTester", "_autosummary/econml.validate.EvaluationResults", "_autosummary/econml.validate.UpliftEvaluationResults", "index", "reference", "spec/api", "spec/causal_intro", "spec/community", "spec/comparison", "spec/estimation", "spec/estimation/dml", "spec/estimation/dr", "spec/estimation/dynamic_dml", "spec/estimation/forest", "spec/estimation/metalearners", "spec/estimation/orthoiv", "spec/estimation/two_sls", "spec/estimation_dynamic", "spec/estimation_iv", "spec/faq", "spec/federated_learning", "spec/flowchart", "spec/inference", "spec/interpretability", "spec/model_selection", "spec/motivation", "spec/overview", "spec/references", "spec/spec", "spec/validation"], "envversion": {"sphinx": 62, "sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.todo": 2, "sphinx.ext.viewcode": 1}, "filenames": ["_autosummary/econml._cate_estimator.rst", "_autosummary/econml._ortho_learner.rst", "_autosummary/econml.cate_interpreter.SingleTreeCateInterpreter.rst", "_autosummary/econml.cate_interpreter.SingleTreePolicyInterpreter.rst", "_autosummary/econml.dml.CausalForestDML.rst", "_autosummary/econml.dml.DML.rst", "_autosummary/econml.dml.KernelDML.rst", "_autosummary/econml.dml.LinearDML.rst", "_autosummary/econml.dml.NonParamDML.rst", "_autosummary/econml.dml.SparseLinearDML.rst", "_autosummary/econml.dml._rlearner.rst", "_autosummary/econml.dowhy.DoWhyWrapper.rst", "_autosummary/econml.dr.DRLearner.rst", "_autosummary/econml.dr.ForestDRLearner.rst", "_autosummary/econml.dr.LinearDRLearner.rst", "_autosummary/econml.dr.SparseLinearDRLearner.rst", "_autosummary/econml.federated_learning.FederatedEstimator.rst", "_autosummary/econml.grf.CausalForest.rst", "_autosummary/econml.grf.CausalIVForest.rst", "_autosummary/econml.grf.LinearMomentGRFCriterion.rst", "_autosummary/econml.grf.LinearMomentGRFCriterionMSE.rst", "_autosummary/econml.grf.MultiOutputGRF.rst", "_autosummary/econml.grf.RegressionForest.rst", "_autosummary/econml.grf._base_grf.BaseGRF.rst", "_autosummary/econml.grf._base_grftree.GRFTree.rst", "_autosummary/econml.inference.BootstrapInference.rst", "_autosummary/econml.inference.EmpiricalInferenceResults.rst", "_autosummary/econml.inference.GenericModelFinalInference.rst", "_autosummary/econml.inference.GenericModelFinalInferenceDiscrete.rst", "_autosummary/econml.inference.GenericSingleTreatmentModelFinalInference.rst", "_autosummary/econml.inference.LinearModelFinalInference.rst", "_autosummary/econml.inference.LinearModelFinalInferenceDiscrete.rst", "_autosummary/econml.inference.NormalInferenceResults.rst", "_autosummary/econml.inference.PopulationSummaryResults.rst", "_autosummary/econml.inference.StatsModelsInference.rst", "_autosummary/econml.inference.StatsModelsInferenceDiscrete.rst", "_autosummary/econml.inference._bootstrap.rst", "_autosummary/econml.iv.dml.DMLIV.rst", "_autosummary/econml.iv.dml.NonParamDMLIV.rst", "_autosummary/econml.iv.dml.OrthoIV.rst", "_autosummary/econml.iv.dr.DRIV.rst", "_autosummary/econml.iv.dr.ForestDRIV.rst", "_autosummary/econml.iv.dr.IntentToTreatDRIV.rst", "_autosummary/econml.iv.dr.LinearDRIV.rst", "_autosummary/econml.iv.dr.LinearIntentToTreatDRIV.rst", "_autosummary/econml.iv.dr.SparseLinearDRIV.rst", "_autosummary/econml.iv.sieve.DPolynomialFeatures.rst", "_autosummary/econml.iv.sieve.HermiteFeatures.rst", "_autosummary/econml.iv.sieve.SieveTSLS.rst", "_autosummary/econml.metalearners.DomainAdaptationLearner.rst", "_autosummary/econml.metalearners.SLearner.rst", "_autosummary/econml.metalearners.TLearner.rst", "_autosummary/econml.metalearners.XLearner.rst", "_autosummary/econml.orf.DMLOrthoForest.rst", "_autosummary/econml.orf.DROrthoForest.rst", "_autosummary/econml.panel.dml.DynamicDML.rst", "_autosummary/econml.policy.DRPolicyForest.rst", "_autosummary/econml.policy.DRPolicyTree.rst", "_autosummary/econml.policy.PolicyForest.rst", "_autosummary/econml.policy.PolicyTree.rst", "_autosummary/econml.score.EnsembleCateEstimator.rst", "_autosummary/econml.score.RScorer.rst", "_autosummary/econml.sklearn_extensions.linear_model.DebiasedLasso.rst", "_autosummary/econml.sklearn_extensions.linear_model.MultiOutputDebiasedLasso.rst", "_autosummary/econml.sklearn_extensions.linear_model.SelectiveRegularization.rst", "_autosummary/econml.sklearn_extensions.linear_model.StatsModelsLinearRegression.rst", "_autosummary/econml.sklearn_extensions.linear_model.StatsModelsRLM.rst", "_autosummary/econml.sklearn_extensions.linear_model.WeightedLasso.rst", "_autosummary/econml.sklearn_extensions.linear_model.WeightedLassoCV.rst", "_autosummary/econml.sklearn_extensions.linear_model.WeightedLassoCVWrapper.rst", "_autosummary/econml.sklearn_extensions.linear_model.WeightedMultiTaskLassoCV.rst", "_autosummary/econml.sklearn_extensions.model_selection.GridSearchCVList.rst", "_autosummary/econml.sklearn_extensions.model_selection.WeightedKFold.rst", "_autosummary/econml.sklearn_extensions.model_selection.WeightedStratifiedKFold.rst", "_autosummary/econml.solutions.causal_analysis.CausalAnalysis.rst", "_autosummary/econml.utilities.rst", "_autosummary/econml.validate.BLPEvaluationResults.rst", "_autosummary/econml.validate.CalibrationEvaluationResults.rst", "_autosummary/econml.validate.DRTester.rst", "_autosummary/econml.validate.EvaluationResults.rst", "_autosummary/econml.validate.UpliftEvaluationResults.rst", "index.rst", "reference.rst", "spec/api.rst", "spec/causal_intro.rst", "spec/community.rst", "spec/comparison.rst", "spec/estimation.rst", "spec/estimation/dml.rst", "spec/estimation/dr.rst", "spec/estimation/dynamic_dml.rst", "spec/estimation/forest.rst", "spec/estimation/metalearners.rst", "spec/estimation/orthoiv.rst", "spec/estimation/two_sls.rst", "spec/estimation_dynamic.rst", "spec/estimation_iv.rst", "spec/faq.rst", "spec/federated_learning.rst", "spec/flowchart.rst", "spec/inference.rst", "spec/interpretability.rst", "spec/model_selection.rst", "spec/motivation.rst", "spec/overview.rst", "spec/references.rst", "spec/spec.rst", "spec/validation.rst"], "indexentries": {"__init__() (econml.cate_interpreter.singletreecateinterpreter method)": [[2, "econml.cate_interpreter.SingleTreeCateInterpreter.__init__", false]], "__init__() (econml.cate_interpreter.singletreepolicyinterpreter method)": [[3, "econml.cate_interpreter.SingleTreePolicyInterpreter.__init__", false]], "__init__() (econml.dml.causalforestdml method)": [[4, "econml.dml.CausalForestDML.__init__", false]], "__init__() (econml.dml.dml method)": [[5, "econml.dml.DML.__init__", false]], "__init__() (econml.dml.kerneldml method)": [[6, "econml.dml.KernelDML.__init__", false]], "__init__() (econml.dml.lineardml method)": [[7, "econml.dml.LinearDML.__init__", false]], "__init__() (econml.dml.nonparamdml method)": [[8, "econml.dml.NonParamDML.__init__", false]], "__init__() (econml.dml.sparselineardml method)": [[9, "econml.dml.SparseLinearDML.__init__", false]], "__init__() (econml.dowhy.dowhywrapper method)": [[11, "econml.dowhy.DoWhyWrapper.__init__", false]], "__init__() (econml.dr.drlearner method)": [[12, "econml.dr.DRLearner.__init__", false]], "__init__() (econml.dr.forestdrlearner method)": [[13, "econml.dr.ForestDRLearner.__init__", false]], "__init__() (econml.dr.lineardrlearner method)": [[14, "econml.dr.LinearDRLearner.__init__", false]], "__init__() (econml.dr.sparselineardrlearner method)": [[15, "econml.dr.SparseLinearDRLearner.__init__", false]], "__init__() (econml.federated_learning.federatedestimator method)": [[16, "econml.federated_learning.FederatedEstimator.__init__", false]], "__init__() (econml.grf._base_grf.basegrf method)": [[23, "econml.grf._base_grf.BaseGRF.__init__", false]], "__init__() (econml.grf._base_grftree.grftree method)": [[24, "econml.grf._base_grftree.GRFTree.__init__", false]], "__init__() (econml.grf.causalforest method)": [[17, "econml.grf.CausalForest.__init__", false]], "__init__() (econml.grf.causalivforest method)": [[18, "econml.grf.CausalIVForest.__init__", false]], "__init__() (econml.grf.linearmomentgrfcriterion method)": [[19, "econml.grf.LinearMomentGRFCriterion.__init__", false]], "__init__() (econml.grf.linearmomentgrfcriterionmse method)": [[20, "econml.grf.LinearMomentGRFCriterionMSE.__init__", false]], "__init__() (econml.grf.multioutputgrf method)": [[21, "econml.grf.MultiOutputGRF.__init__", false]], "__init__() (econml.grf.regressionforest method)": [[22, "econml.grf.RegressionForest.__init__", false]], "__init__() (econml.inference.bootstrapinference method)": [[25, "econml.inference.BootstrapInference.__init__", false]], "__init__() (econml.inference.empiricalinferenceresults method)": [[26, "econml.inference.EmpiricalInferenceResults.__init__", false]], "__init__() (econml.inference.genericmodelfinalinference method)": [[27, "econml.inference.GenericModelFinalInference.__init__", false]], "__init__() (econml.inference.genericmodelfinalinferencediscrete method)": [[28, "econml.inference.GenericModelFinalInferenceDiscrete.__init__", false]], "__init__() (econml.inference.genericsingletreatmentmodelfinalinference method)": [[29, "econml.inference.GenericSingleTreatmentModelFinalInference.__init__", false]], "__init__() (econml.inference.linearmodelfinalinference method)": [[30, "econml.inference.LinearModelFinalInference.__init__", false]], "__init__() (econml.inference.linearmodelfinalinferencediscrete method)": [[31, "econml.inference.LinearModelFinalInferenceDiscrete.__init__", false]], "__init__() (econml.inference.normalinferenceresults method)": [[32, "econml.inference.NormalInferenceResults.__init__", false]], "__init__() (econml.inference.populationsummaryresults method)": [[33, "econml.inference.PopulationSummaryResults.__init__", false]], "__init__() (econml.inference.statsmodelsinference method)": [[34, "econml.inference.StatsModelsInference.__init__", false]], "__init__() (econml.inference.statsmodelsinferencediscrete method)": [[35, "econml.inference.StatsModelsInferenceDiscrete.__init__", false]], "__init__() (econml.iv.dml.dmliv method)": [[37, "econml.iv.dml.DMLIV.__init__", false]], "__init__() (econml.iv.dml.nonparamdmliv method)": [[38, "econml.iv.dml.NonParamDMLIV.__init__", false]], "__init__() (econml.iv.dml.orthoiv method)": [[39, "econml.iv.dml.OrthoIV.__init__", false]], "__init__() (econml.iv.dr.driv method)": [[40, "econml.iv.dr.DRIV.__init__", false]], "__init__() (econml.iv.dr.forestdriv method)": [[41, "econml.iv.dr.ForestDRIV.__init__", false]], "__init__() (econml.iv.dr.intenttotreatdriv method)": [[42, "econml.iv.dr.IntentToTreatDRIV.__init__", false]], "__init__() (econml.iv.dr.lineardriv method)": [[43, "econml.iv.dr.LinearDRIV.__init__", false]], "__init__() (econml.iv.dr.linearintenttotreatdriv method)": [[44, "econml.iv.dr.LinearIntentToTreatDRIV.__init__", false]], "__init__() (econml.iv.dr.sparselineardriv method)": [[45, "econml.iv.dr.SparseLinearDRIV.__init__", false]], "__init__() (econml.iv.sieve.dpolynomialfeatures method)": [[46, "econml.iv.sieve.DPolynomialFeatures.__init__", false]], "__init__() (econml.iv.sieve.hermitefeatures method)": [[47, "econml.iv.sieve.HermiteFeatures.__init__", false]], "__init__() (econml.iv.sieve.sievetsls method)": [[48, "econml.iv.sieve.SieveTSLS.__init__", false]], "__init__() (econml.metalearners.domainadaptationlearner method)": [[49, "econml.metalearners.DomainAdaptationLearner.__init__", false]], "__init__() (econml.metalearners.slearner method)": [[50, "econml.metalearners.SLearner.__init__", false]], "__init__() (econml.metalearners.tlearner method)": [[51, "econml.metalearners.TLearner.__init__", false]], "__init__() (econml.metalearners.xlearner method)": [[52, "econml.metalearners.XLearner.__init__", false]], "__init__() (econml.orf.dmlorthoforest method)": [[53, "econml.orf.DMLOrthoForest.__init__", false]], "__init__() (econml.orf.drorthoforest method)": [[54, "econml.orf.DROrthoForest.__init__", false]], "__init__() (econml.panel.dml.dynamicdml method)": [[55, "econml.panel.dml.DynamicDML.__init__", false]], "__init__() (econml.policy.drpolicyforest method)": [[56, "econml.policy.DRPolicyForest.__init__", false]], "__init__() (econml.policy.drpolicytree method)": [[57, "econml.policy.DRPolicyTree.__init__", false]], "__init__() (econml.policy.policyforest method)": [[58, "econml.policy.PolicyForest.__init__", false]], "__init__() (econml.policy.policytree method)": [[59, "econml.policy.PolicyTree.__init__", false]], "__init__() (econml.score.ensemblecateestimator method)": [[60, "econml.score.EnsembleCateEstimator.__init__", false]], "__init__() (econml.score.rscorer method)": [[61, "econml.score.RScorer.__init__", false]], "__init__() (econml.sklearn_extensions.linear_model.debiasedlasso method)": [[62, "econml.sklearn_extensions.linear_model.DebiasedLasso.__init__", false]], "__init__() (econml.sklearn_extensions.linear_model.multioutputdebiasedlasso method)": [[63, "econml.sklearn_extensions.linear_model.MultiOutputDebiasedLasso.__init__", false]], "__init__() (econml.sklearn_extensions.linear_model.selectiveregularization method)": [[64, "econml.sklearn_extensions.linear_model.SelectiveRegularization.__init__", false]], "__init__() (econml.sklearn_extensions.linear_model.statsmodelslinearregression method)": [[65, "econml.sklearn_extensions.linear_model.StatsModelsLinearRegression.__init__", false]], "__init__() (econml.sklearn_extensions.linear_model.statsmodelsrlm method)": [[66, "econml.sklearn_extensions.linear_model.StatsModelsRLM.__init__", false]], "__init__() (econml.sklearn_extensions.linear_model.weightedlasso method)": [[67, "econml.sklearn_extensions.linear_model.WeightedLasso.__init__", false]], "__init__() (econml.sklearn_extensions.linear_model.weightedlassocv method)": [[68, "econml.sklearn_extensions.linear_model.WeightedLassoCV.__init__", false]], "__init__() (econml.sklearn_extensions.linear_model.weightedlassocvwrapper method)": [[69, "econml.sklearn_extensions.linear_model.WeightedLassoCVWrapper.__init__", false]], "__init__() (econml.sklearn_extensions.linear_model.weightedmultitasklassocv method)": [[70, "econml.sklearn_extensions.linear_model.WeightedMultiTaskLassoCV.__init__", false]], "__init__() (econml.sklearn_extensions.model_selection.gridsearchcvlist method)": [[71, "econml.sklearn_extensions.model_selection.GridSearchCVList.__init__", false]], "__init__() (econml.sklearn_extensions.model_selection.weightedkfold method)": [[72, "econml.sklearn_extensions.model_selection.WeightedKFold.__init__", false]], "__init__() (econml.sklearn_extensions.model_selection.weightedstratifiedkfold method)": [[73, "econml.sklearn_extensions.model_selection.WeightedStratifiedKFold.__init__", false]], "__init__() (econml.solutions.causal_analysis.causalanalysis method)": [[74, "econml.solutions.causal_analysis.CausalAnalysis.__init__", false]], "__init__() (econml.validate.blpevaluationresults method)": [[76, "econml.validate.BLPEvaluationResults.__init__", false]], "__init__() (econml.validate.calibrationevaluationresults method)": [[77, "econml.validate.CalibrationEvaluationResults.__init__", false]], "__init__() (econml.validate.drtester method)": [[78, "econml.validate.DRTester.__init__", false]], "__init__() (econml.validate.evaluationresults method)": [[79, "econml.validate.EvaluationResults.__init__", false]], "__init__() (econml.validate.upliftevaluationresults method)": [[80, "econml.validate.UpliftEvaluationResults.__init__", false]], "_crossfit() (in module econml._ortho_learner)": [[1, "econml._ortho_learner._crossfit", false]], "_ortholearner (class in econml._ortho_learner)": [[1, "econml._ortho_learner._OrthoLearner", false]], "_rlearner (class in econml.dml._rlearner)": [[10, "econml.dml._rlearner._RLearner", false]], "add_extra_txt() (econml.utilities.summary method)": [[75, "econml.utilities.Summary.add_extra_txt", false]], "add_intercept() (in module econml.utilities)": [[75, "econml.utilities.add_intercept", false]], "aggregate() (econml.sklearn_extensions.linear_model.statsmodelslinearregression static method)": [[65, "econml.sklearn_extensions.linear_model.StatsModelsLinearRegression.aggregate", false]], "always_treat_value_ (econml.cate_interpreter.singletreepolicyinterpreter attribute)": [[3, "econml.cate_interpreter.SingleTreePolicyInterpreter.always_treat_value_", false]], "always_treat_value_ (econml.policy.policytree attribute)": [[59, "econml.policy.PolicyTree.always_treat_value_", false]], "apply() (econml.grf._base_grf.basegrf method)": [[23, "econml.grf._base_grf.BaseGRF.apply", false]], "apply() (econml.grf._base_grftree.grftree method)": [[24, "econml.grf._base_grftree.GRFTree.apply", false]], "apply() (econml.grf.causalforest method)": [[17, "econml.grf.CausalForest.apply", false]], "apply() (econml.grf.causalivforest method)": [[18, "econml.grf.CausalIVForest.apply", false]], "apply() (econml.grf.regressionforest method)": [[22, "econml.grf.RegressionForest.apply", false]], "apply() (econml.policy.policyforest method)": [[58, "econml.policy.PolicyForest.apply", false]], "apply() (econml.policy.policytree method)": [[59, "econml.policy.PolicyTree.apply", false]], "as_csv() (econml.utilities.summary method)": [[75, "econml.utilities.Summary.as_csv", false]], "as_html() (econml.utilities.summary method)": [[75, "econml.utilities.Summary.as_html", false]], "as_latex() (econml.utilities.summary method)": [[75, "econml.utilities.Summary.as_latex", false]], "as_text() (econml.utilities.summary method)": [[75, "econml.utilities.Summary.as_text", false]], "ate() (econml._cate_estimator.basecateestimator method)": [[0, "econml._cate_estimator.BaseCateEstimator.ate", false]], "ate() (econml._cate_estimator.debiasedlassocateestimatordiscretemixin method)": [[0, "econml._cate_estimator.DebiasedLassoCateEstimatorDiscreteMixin.ate", false]], "ate() (econml._cate_estimator.debiasedlassocateestimatormixin method)": [[0, "econml._cate_estimator.DebiasedLassoCateEstimatorMixin.ate", false]], "ate() (econml._cate_estimator.forestmodelfinalcateestimatordiscretemixin method)": [[0, "econml._cate_estimator.ForestModelFinalCateEstimatorDiscreteMixin.ate", false]], "ate() (econml._cate_estimator.forestmodelfinalcateestimatormixin method)": [[0, "econml._cate_estimator.ForestModelFinalCateEstimatorMixin.ate", false]], "ate() (econml._cate_estimator.linearcateestimator method)": [[0, "econml._cate_estimator.LinearCateEstimator.ate", false]], "ate() (econml._cate_estimator.linearmodelfinalcateestimatordiscretemixin method)": [[0, "econml._cate_estimator.LinearModelFinalCateEstimatorDiscreteMixin.ate", false]], "ate() (econml._cate_estimator.linearmodelfinalcateestimatormixin method)": [[0, "econml._cate_estimator.LinearModelFinalCateEstimatorMixin.ate", false]], "ate() (econml._cate_estimator.statsmodelscateestimatordiscretemixin method)": [[0, "econml._cate_estimator.StatsModelsCateEstimatorDiscreteMixin.ate", false]], "ate() (econml._cate_estimator.statsmodelscateestimatormixin method)": [[0, "econml._cate_estimator.StatsModelsCateEstimatorMixin.ate", false]], "ate() (econml._cate_estimator.treatmentexpansionmixin method)": [[0, "econml._cate_estimator.TreatmentExpansionMixin.ate", false]], "ate() (econml._ortho_learner._ortholearner method)": [[1, "econml._ortho_learner._OrthoLearner.ate", false]], "ate() (econml.dml._rlearner._rlearner method)": [[10, "econml.dml._rlearner._RLearner.ate", false]], "ate() (econml.dml.causalforestdml method)": [[4, "econml.dml.CausalForestDML.ate", false]], "ate() (econml.dml.dml method)": [[5, "econml.dml.DML.ate", false]], "ate() (econml.dml.kerneldml method)": [[6, "econml.dml.KernelDML.ate", false]], "ate() (econml.dml.lineardml method)": [[7, "econml.dml.LinearDML.ate", false]], "ate() (econml.dml.nonparamdml method)": [[8, "econml.dml.NonParamDML.ate", false]], "ate() (econml.dml.sparselineardml method)": [[9, "econml.dml.SparseLinearDML.ate", false]], "ate() (econml.dr.drlearner method)": [[12, "econml.dr.DRLearner.ate", false]], "ate() (econml.dr.forestdrlearner method)": [[13, "econml.dr.ForestDRLearner.ate", false]], "ate() (econml.dr.lineardrlearner method)": [[14, "econml.dr.LinearDRLearner.ate", false]], "ate() (econml.dr.sparselineardrlearner method)": [[15, "econml.dr.SparseLinearDRLearner.ate", false]], "ate() (econml.federated_learning.federatedestimator method)": [[16, "econml.federated_learning.FederatedEstimator.ate", false]], "ate() (econml.iv.dml.dmliv method)": [[37, "econml.iv.dml.DMLIV.ate", false]], "ate() (econml.iv.dml.nonparamdmliv method)": [[38, "econml.iv.dml.NonParamDMLIV.ate", false]], "ate() (econml.iv.dml.orthoiv method)": [[39, "econml.iv.dml.OrthoIV.ate", false]], "ate() (econml.iv.dr.driv method)": [[40, "econml.iv.dr.DRIV.ate", false]], "ate() (econml.iv.dr.forestdriv method)": [[41, "econml.iv.dr.ForestDRIV.ate", false]], "ate() (econml.iv.dr.intenttotreatdriv method)": [[42, "econml.iv.dr.IntentToTreatDRIV.ate", false]], "ate() (econml.iv.dr.lineardriv method)": [[43, "econml.iv.dr.LinearDRIV.ate", false]], "ate() (econml.iv.dr.linearintenttotreatdriv method)": [[44, "econml.iv.dr.LinearIntentToTreatDRIV.ate", false]], "ate() (econml.iv.dr.sparselineardriv method)": [[45, "econml.iv.dr.SparseLinearDRIV.ate", false]], "ate() (econml.iv.sieve.sievetsls method)": [[48, "econml.iv.sieve.SieveTSLS.ate", false]], "ate() (econml.metalearners.domainadaptationlearner method)": [[49, "econml.metalearners.DomainAdaptationLearner.ate", false]], "ate() (econml.metalearners.slearner method)": [[50, "econml.metalearners.SLearner.ate", false]], "ate() (econml.metalearners.tlearner method)": [[51, "econml.metalearners.TLearner.ate", false]], "ate() (econml.metalearners.xlearner method)": [[52, "econml.metalearners.XLearner.ate", false]], "ate() (econml.orf.dmlorthoforest method)": [[53, "econml.orf.DMLOrthoForest.ate", false]], "ate() (econml.orf.drorthoforest method)": [[54, "econml.orf.DROrthoForest.ate", false]], "ate() (econml.panel.dml.dynamicdml method)": [[55, "econml.panel.dml.DynamicDML.ate", false]], "ate_ (econml.dml.causalforestdml attribute)": [[4, "econml.dml.CausalForestDML.ate_", false]], "ate__inference() (econml.dml.causalforestdml method)": [[4, "econml.dml.CausalForestDML.ate__inference", false]], "ate_inference() (econml._cate_estimator.basecateestimator method)": [[0, "econml._cate_estimator.BaseCateEstimator.ate_inference", false]], "ate_inference() (econml._cate_estimator.debiasedlassocateestimatordiscretemixin method)": [[0, "econml._cate_estimator.DebiasedLassoCateEstimatorDiscreteMixin.ate_inference", false]], "ate_inference() (econml._cate_estimator.debiasedlassocateestimatormixin method)": [[0, "econml._cate_estimator.DebiasedLassoCateEstimatorMixin.ate_inference", false]], "ate_inference() (econml._cate_estimator.forestmodelfinalcateestimatordiscretemixin method)": [[0, "econml._cate_estimator.ForestModelFinalCateEstimatorDiscreteMixin.ate_inference", false]], "ate_inference() (econml._cate_estimator.forestmodelfinalcateestimatormixin method)": [[0, "econml._cate_estimator.ForestModelFinalCateEstimatorMixin.ate_inference", false]], "ate_inference() (econml._cate_estimator.linearcateestimator method)": [[0, "econml._cate_estimator.LinearCateEstimator.ate_inference", false]], "ate_inference() (econml._cate_estimator.linearmodelfinalcateestimatordiscretemixin method)": [[0, "econml._cate_estimator.LinearModelFinalCateEstimatorDiscreteMixin.ate_inference", false]], "ate_inference() (econml._cate_estimator.linearmodelfinalcateestimatormixin method)": [[0, "econml._cate_estimator.LinearModelFinalCateEstimatorMixin.ate_inference", false]], "ate_inference() (econml._cate_estimator.statsmodelscateestimatordiscretemixin method)": [[0, "econml._cate_estimator.StatsModelsCateEstimatorDiscreteMixin.ate_inference", false]], "ate_inference() (econml._cate_estimator.statsmodelscateestimatormixin method)": [[0, "econml._cate_estimator.StatsModelsCateEstimatorMixin.ate_inference", false]], "ate_inference() (econml._cate_estimator.treatmentexpansionmixin method)": [[0, "econml._cate_estimator.TreatmentExpansionMixin.ate_inference", false]], "ate_inference() (econml._ortho_learner._ortholearner method)": [[1, "econml._ortho_learner._OrthoLearner.ate_inference", false]], "ate_inference() (econml.dml._rlearner._rlearner method)": [[10, "econml.dml._rlearner._RLearner.ate_inference", false]], "ate_inference() (econml.dml.causalforestdml method)": [[4, "econml.dml.CausalForestDML.ate_inference", false]], "ate_inference() (econml.dml.dml method)": [[5, "econml.dml.DML.ate_inference", false]], "ate_inference() (econml.dml.kerneldml method)": [[6, "econml.dml.KernelDML.ate_inference", false]], "ate_inference() (econml.dml.lineardml method)": [[7, "econml.dml.LinearDML.ate_inference", false]], "ate_inference() (econml.dml.nonparamdml method)": [[8, "econml.dml.NonParamDML.ate_inference", false]], "ate_inference() (econml.dml.sparselineardml method)": [[9, "econml.dml.SparseLinearDML.ate_inference", false]], "ate_inference() (econml.dr.drlearner method)": [[12, "econml.dr.DRLearner.ate_inference", false]], "ate_inference() (econml.dr.forestdrlearner method)": [[13, "econml.dr.ForestDRLearner.ate_inference", false]], "ate_inference() (econml.dr.lineardrlearner method)": [[14, "econml.dr.LinearDRLearner.ate_inference", false]], "ate_inference() (econml.dr.sparselineardrlearner method)": [[15, "econml.dr.SparseLinearDRLearner.ate_inference", false]], "ate_inference() (econml.federated_learning.federatedestimator method)": [[16, "econml.federated_learning.FederatedEstimator.ate_inference", false]], "ate_inference() (econml.iv.dml.dmliv method)": [[37, "econml.iv.dml.DMLIV.ate_inference", false]], "ate_inference() (econml.iv.dml.nonparamdmliv method)": [[38, "econml.iv.dml.NonParamDMLIV.ate_inference", false]], "ate_inference() (econml.iv.dml.orthoiv method)": [[39, "econml.iv.dml.OrthoIV.ate_inference", false]], "ate_inference() (econml.iv.dr.driv method)": [[40, "econml.iv.dr.DRIV.ate_inference", false]], "ate_inference() (econml.iv.dr.forestdriv method)": [[41, "econml.iv.dr.ForestDRIV.ate_inference", false]], "ate_inference() (econml.iv.dr.intenttotreatdriv method)": [[42, "econml.iv.dr.IntentToTreatDRIV.ate_inference", false]], "ate_inference() (econml.iv.dr.lineardriv method)": [[43, "econml.iv.dr.LinearDRIV.ate_inference", false]], "ate_inference() (econml.iv.dr.linearintenttotreatdriv method)": [[44, "econml.iv.dr.LinearIntentToTreatDRIV.ate_inference", false]], "ate_inference() (econml.iv.dr.sparselineardriv method)": [[45, "econml.iv.dr.SparseLinearDRIV.ate_inference", false]], "ate_inference() (econml.iv.sieve.sievetsls method)": [[48, "econml.iv.sieve.SieveTSLS.ate_inference", false]], "ate_inference() (econml.metalearners.domainadaptationlearner method)": [[49, "econml.metalearners.DomainAdaptationLearner.ate_inference", false]], "ate_inference() (econml.metalearners.slearner method)": [[50, "econml.metalearners.SLearner.ate_inference", false]], "ate_inference() (econml.metalearners.tlearner method)": [[51, "econml.metalearners.TLearner.ate_inference", false]], "ate_inference() (econml.metalearners.xlearner method)": [[52, "econml.metalearners.XLearner.ate_inference", false]], "ate_inference() (econml.orf.dmlorthoforest method)": [[53, "econml.orf.DMLOrthoForest.ate_inference", false]], "ate_inference() (econml.orf.drorthoforest method)": [[54, "econml.orf.DROrthoForest.ate_inference", false]], "ate_inference() (econml.panel.dml.dynamicdml method)": [[55, "econml.panel.dml.DynamicDML.ate_inference", false]], "ate_interval() (econml._cate_estimator.basecateestimator method)": [[0, "econml._cate_estimator.BaseCateEstimator.ate_interval", false]], "ate_interval() (econml._cate_estimator.debiasedlassocateestimatordiscretemixin method)": [[0, "econml._cate_estimator.DebiasedLassoCateEstimatorDiscreteMixin.ate_interval", false]], "ate_interval() (econml._cate_estimator.debiasedlassocateestimatormixin method)": [[0, "econml._cate_estimator.DebiasedLassoCateEstimatorMixin.ate_interval", false]], "ate_interval() (econml._cate_estimator.forestmodelfinalcateestimatordiscretemixin method)": [[0, "econml._cate_estimator.ForestModelFinalCateEstimatorDiscreteMixin.ate_interval", false]], "ate_interval() (econml._cate_estimator.forestmodelfinalcateestimatormixin method)": [[0, "econml._cate_estimator.ForestModelFinalCateEstimatorMixin.ate_interval", false]], "ate_interval() (econml._cate_estimator.linearcateestimator method)": [[0, "econml._cate_estimator.LinearCateEstimator.ate_interval", false]], "ate_interval() (econml._cate_estimator.linearmodelfinalcateestimatordiscretemixin method)": [[0, "econml._cate_estimator.LinearModelFinalCateEstimatorDiscreteMixin.ate_interval", false]], "ate_interval() (econml._cate_estimator.linearmodelfinalcateestimatormixin method)": [[0, "econml._cate_estimator.LinearModelFinalCateEstimatorMixin.ate_interval", false]], "ate_interval() (econml._cate_estimator.statsmodelscateestimatordiscretemixin method)": [[0, "econml._cate_estimator.StatsModelsCateEstimatorDiscreteMixin.ate_interval", false]], "ate_interval() (econml._cate_estimator.statsmodelscateestimatormixin method)": [[0, "econml._cate_estimator.StatsModelsCateEstimatorMixin.ate_interval", false]], "ate_interval() (econml._cate_estimator.treatmentexpansionmixin method)": [[0, "econml._cate_estimator.TreatmentExpansionMixin.ate_interval", false]], "ate_interval() (econml._ortho_learner._ortholearner method)": [[1, "econml._ortho_learner._OrthoLearner.ate_interval", false]], "ate_interval() (econml.dml._rlearner._rlearner method)": [[10, "econml.dml._rlearner._RLearner.ate_interval", false]], "ate_interval() (econml.dml.causalforestdml method)": [[4, "econml.dml.CausalForestDML.ate_interval", false]], "ate_interval() (econml.dml.dml method)": [[5, "econml.dml.DML.ate_interval", false]], "ate_interval() (econml.dml.kerneldml method)": [[6, "econml.dml.KernelDML.ate_interval", false]], "ate_interval() (econml.dml.lineardml method)": [[7, "econml.dml.LinearDML.ate_interval", false]], "ate_interval() (econml.dml.nonparamdml method)": [[8, "econml.dml.NonParamDML.ate_interval", false]], "ate_interval() (econml.dml.sparselineardml method)": [[9, "econml.dml.SparseLinearDML.ate_interval", false]], "ate_interval() (econml.dr.drlearner method)": [[12, "econml.dr.DRLearner.ate_interval", false]], "ate_interval() (econml.dr.forestdrlearner method)": [[13, "econml.dr.ForestDRLearner.ate_interval", false]], "ate_interval() (econml.dr.lineardrlearner method)": [[14, "econml.dr.LinearDRLearner.ate_interval", false]], "ate_interval() (econml.dr.sparselineardrlearner method)": [[15, "econml.dr.SparseLinearDRLearner.ate_interval", false]], "ate_interval() (econml.federated_learning.federatedestimator method)": [[16, "econml.federated_learning.FederatedEstimator.ate_interval", false]], "ate_interval() (econml.iv.dml.dmliv method)": [[37, "econml.iv.dml.DMLIV.ate_interval", false]], "ate_interval() (econml.iv.dml.nonparamdmliv method)": [[38, "econml.iv.dml.NonParamDMLIV.ate_interval", false]], "ate_interval() (econml.iv.dml.orthoiv method)": [[39, "econml.iv.dml.OrthoIV.ate_interval", false]], "ate_interval() (econml.iv.dr.driv method)": [[40, "econml.iv.dr.DRIV.ate_interval", false]], "ate_interval() (econml.iv.dr.forestdriv method)": [[41, "econml.iv.dr.ForestDRIV.ate_interval", false]], "ate_interval() (econml.iv.dr.intenttotreatdriv method)": [[42, "econml.iv.dr.IntentToTreatDRIV.ate_interval", false]], "ate_interval() (econml.iv.dr.lineardriv method)": [[43, "econml.iv.dr.LinearDRIV.ate_interval", false]], "ate_interval() (econml.iv.dr.linearintenttotreatdriv method)": [[44, "econml.iv.dr.LinearIntentToTreatDRIV.ate_interval", false]], "ate_interval() (econml.iv.dr.sparselineardriv method)": [[45, "econml.iv.dr.SparseLinearDRIV.ate_interval", false]], "ate_interval() (econml.iv.sieve.sievetsls method)": [[48, "econml.iv.sieve.SieveTSLS.ate_interval", false]], "ate_interval() (econml.metalearners.domainadaptationlearner method)": [[49, "econml.metalearners.DomainAdaptationLearner.ate_interval", false]], "ate_interval() (econml.metalearners.slearner method)": [[50, "econml.metalearners.SLearner.ate_interval", false]], "ate_interval() (econml.metalearners.tlearner method)": [[51, "econml.metalearners.TLearner.ate_interval", false]], "ate_interval() (econml.metalearners.xlearner method)": [[52, "econml.metalearners.XLearner.ate_interval", false]], "ate_interval() (econml.orf.dmlorthoforest method)": [[53, "econml.orf.DMLOrthoForest.ate_interval", false]], "ate_interval() (econml.orf.drorthoforest method)": [[54, "econml.orf.DROrthoForest.ate_interval", false]], "ate_interval() (econml.panel.dml.dynamicdml method)": [[55, "econml.panel.dml.DynamicDML.ate_interval", false]], "ate_stderr_ (econml.dml.causalforestdml attribute)": [[4, "econml.dml.CausalForestDML.ate_stderr_", false]], "att_() (econml.dml.causalforestdml method)": [[4, "econml.dml.CausalForestDML.att_", false]], "att__inference() (econml.dml.causalforestdml method)": [[4, "econml.dml.CausalForestDML.att__inference", false]], "att_stderr_() (econml.dml.causalforestdml method)": [[4, "econml.dml.CausalForestDML.att_stderr_", false]], "basecateestimator (class in econml._cate_estimator)": [[0, "econml._cate_estimator.BaseCateEstimator", false]], "basegrf (class in econml.grf._base_grf)": [[23, "econml.grf._base_grf.BaseGRF", false]], "best_model() (econml.score.rscorer method)": [[61, "econml.score.RScorer.best_model", false]], "bias_part_of_coef (econml._cate_estimator.linearmodelfinalcateestimatormixin attribute)": [[0, "econml._cate_estimator.LinearModelFinalCateEstimatorMixin.bias_part_of_coef", false]], "blpevaluationresults (class in econml.validate)": [[76, "econml.validate.BLPEvaluationResults", false]], "bootstrapestimator (class in econml.inference._bootstrap)": [[36, "econml.inference._bootstrap.BootstrapEstimator", false]], "bootstrapinference (class in econml.inference)": [[25, "econml.inference.BootstrapInference", false]], "broadcast_unit_treatments() (in module econml.utilities)": [[75, "econml.utilities.broadcast_unit_treatments", false]], "cachedvalues (class in econml._ortho_learner)": [[1, "econml._ortho_learner.CachedValues", false]], "calibrationevaluationresults (class in econml.validate)": [[77, "econml.validate.CalibrationEvaluationResults", false]], "can set w": [[99, "term-Can-set-W", true]], "cate_feature_names() (econml._cate_estimator.basecateestimator method)": [[0, "econml._cate_estimator.BaseCateEstimator.cate_feature_names", false]], "cate_feature_names() (econml._cate_estimator.debiasedlassocateestimatordiscretemixin method)": [[0, "econml._cate_estimator.DebiasedLassoCateEstimatorDiscreteMixin.cate_feature_names", false]], "cate_feature_names() (econml._cate_estimator.debiasedlassocateestimatormixin method)": [[0, "econml._cate_estimator.DebiasedLassoCateEstimatorMixin.cate_feature_names", false]], "cate_feature_names() (econml._cate_estimator.forestmodelfinalcateestimatordiscretemixin method)": [[0, "econml._cate_estimator.ForestModelFinalCateEstimatorDiscreteMixin.cate_feature_names", false]], "cate_feature_names() (econml._cate_estimator.forestmodelfinalcateestimatormixin method)": [[0, "econml._cate_estimator.ForestModelFinalCateEstimatorMixin.cate_feature_names", false]], "cate_feature_names() (econml._cate_estimator.linearcateestimator method)": [[0, "econml._cate_estimator.LinearCateEstimator.cate_feature_names", false]], "cate_feature_names() (econml._cate_estimator.linearmodelfinalcateestimatordiscretemixin method)": [[0, "econml._cate_estimator.LinearModelFinalCateEstimatorDiscreteMixin.cate_feature_names", false]], "cate_feature_names() (econml._cate_estimator.linearmodelfinalcateestimatormixin method)": [[0, "econml._cate_estimator.LinearModelFinalCateEstimatorMixin.cate_feature_names", false]], "cate_feature_names() (econml._cate_estimator.statsmodelscateestimatordiscretemixin method)": [[0, "econml._cate_estimator.StatsModelsCateEstimatorDiscreteMixin.cate_feature_names", false]], "cate_feature_names() (econml._cate_estimator.statsmodelscateestimatormixin method)": [[0, "econml._cate_estimator.StatsModelsCateEstimatorMixin.cate_feature_names", false]], "cate_feature_names() (econml._cate_estimator.treatmentexpansionmixin method)": [[0, "econml._cate_estimator.TreatmentExpansionMixin.cate_feature_names", false]], "cate_feature_names() (econml._ortho_learner._ortholearner method)": [[1, "econml._ortho_learner._OrthoLearner.cate_feature_names", false]], "cate_feature_names() (econml.dml._rlearner._rlearner method)": [[10, "econml.dml._rlearner._RLearner.cate_feature_names", false]], "cate_feature_names() (econml.dml.causalforestdml method)": [[4, "econml.dml.CausalForestDML.cate_feature_names", false]], "cate_feature_names() (econml.dml.dml method)": [[5, "econml.dml.DML.cate_feature_names", false]], "cate_feature_names() (econml.dml.kerneldml method)": [[6, "econml.dml.KernelDML.cate_feature_names", false]], "cate_feature_names() (econml.dml.lineardml method)": [[7, "econml.dml.LinearDML.cate_feature_names", false]], "cate_feature_names() (econml.dml.nonparamdml method)": [[8, "econml.dml.NonParamDML.cate_feature_names", false]], "cate_feature_names() (econml.dml.sparselineardml method)": [[9, "econml.dml.SparseLinearDML.cate_feature_names", false]], "cate_feature_names() (econml.dr.drlearner method)": [[12, "econml.dr.DRLearner.cate_feature_names", false]], "cate_feature_names() (econml.dr.forestdrlearner method)": [[13, "econml.dr.ForestDRLearner.cate_feature_names", false]], "cate_feature_names() (econml.dr.lineardrlearner method)": [[14, "econml.dr.LinearDRLearner.cate_feature_names", false]], "cate_feature_names() (econml.dr.sparselineardrlearner method)": [[15, "econml.dr.SparseLinearDRLearner.cate_feature_names", false]], "cate_feature_names() (econml.federated_learning.federatedestimator method)": [[16, "econml.federated_learning.FederatedEstimator.cate_feature_names", false]], "cate_feature_names() (econml.iv.dml.dmliv method)": [[37, "econml.iv.dml.DMLIV.cate_feature_names", false]], "cate_feature_names() (econml.iv.dml.nonparamdmliv method)": [[38, "econml.iv.dml.NonParamDMLIV.cate_feature_names", false]], "cate_feature_names() (econml.iv.dml.orthoiv method)": [[39, "econml.iv.dml.OrthoIV.cate_feature_names", false]], "cate_feature_names() (econml.iv.dr.driv method)": [[40, "econml.iv.dr.DRIV.cate_feature_names", false]], "cate_feature_names() (econml.iv.dr.forestdriv method)": [[41, "econml.iv.dr.ForestDRIV.cate_feature_names", false]], "cate_feature_names() (econml.iv.dr.intenttotreatdriv method)": [[42, "econml.iv.dr.IntentToTreatDRIV.cate_feature_names", false]], "cate_feature_names() (econml.iv.dr.lineardriv method)": [[43, "econml.iv.dr.LinearDRIV.cate_feature_names", false]], "cate_feature_names() (econml.iv.dr.linearintenttotreatdriv method)": [[44, "econml.iv.dr.LinearIntentToTreatDRIV.cate_feature_names", false]], "cate_feature_names() (econml.iv.dr.sparselineardriv method)": [[45, "econml.iv.dr.SparseLinearDRIV.cate_feature_names", false]], "cate_feature_names() (econml.iv.sieve.sievetsls method)": [[48, "econml.iv.sieve.SieveTSLS.cate_feature_names", false]], "cate_feature_names() (econml.metalearners.domainadaptationlearner method)": [[49, "econml.metalearners.DomainAdaptationLearner.cate_feature_names", false]], "cate_feature_names() (econml.metalearners.slearner method)": [[50, "econml.metalearners.SLearner.cate_feature_names", false]], "cate_feature_names() (econml.metalearners.tlearner method)": [[51, "econml.metalearners.TLearner.cate_feature_names", false]], "cate_feature_names() (econml.metalearners.xlearner method)": [[52, "econml.metalearners.XLearner.cate_feature_names", false]], "cate_feature_names() (econml.orf.dmlorthoforest method)": [[53, "econml.orf.DMLOrthoForest.cate_feature_names", false]], "cate_feature_names() (econml.orf.drorthoforest method)": [[54, "econml.orf.DROrthoForest.cate_feature_names", false]], "cate_feature_names() (econml.panel.dml.dynamicdml method)": [[55, "econml.panel.dml.DynamicDML.cate_feature_names", false]], "cate_output_names() (econml._cate_estimator.basecateestimator method)": [[0, "econml._cate_estimator.BaseCateEstimator.cate_output_names", false]], "cate_output_names() (econml._cate_estimator.debiasedlassocateestimatordiscretemixin method)": [[0, "econml._cate_estimator.DebiasedLassoCateEstimatorDiscreteMixin.cate_output_names", false]], "cate_output_names() (econml._cate_estimator.debiasedlassocateestimatormixin method)": [[0, "econml._cate_estimator.DebiasedLassoCateEstimatorMixin.cate_output_names", false]], "cate_output_names() (econml._cate_estimator.forestmodelfinalcateestimatordiscretemixin method)": [[0, "econml._cate_estimator.ForestModelFinalCateEstimatorDiscreteMixin.cate_output_names", false]], "cate_output_names() (econml._cate_estimator.forestmodelfinalcateestimatormixin method)": [[0, "econml._cate_estimator.ForestModelFinalCateEstimatorMixin.cate_output_names", false]], "cate_output_names() (econml._cate_estimator.linearcateestimator method)": [[0, "econml._cate_estimator.LinearCateEstimator.cate_output_names", false]], "cate_output_names() (econml._cate_estimator.linearmodelfinalcateestimatordiscretemixin method)": [[0, "econml._cate_estimator.LinearModelFinalCateEstimatorDiscreteMixin.cate_output_names", false]], "cate_output_names() (econml._cate_estimator.linearmodelfinalcateestimatormixin method)": [[0, "econml._cate_estimator.LinearModelFinalCateEstimatorMixin.cate_output_names", false]], "cate_output_names() (econml._cate_estimator.statsmodelscateestimatordiscretemixin method)": [[0, "econml._cate_estimator.StatsModelsCateEstimatorDiscreteMixin.cate_output_names", false]], "cate_output_names() (econml._cate_estimator.statsmodelscateestimatormixin method)": [[0, "econml._cate_estimator.StatsModelsCateEstimatorMixin.cate_output_names", false]], "cate_output_names() (econml._cate_estimator.treatmentexpansionmixin method)": [[0, "econml._cate_estimator.TreatmentExpansionMixin.cate_output_names", false]], "cate_output_names() (econml._ortho_learner._ortholearner method)": [[1, "econml._ortho_learner._OrthoLearner.cate_output_names", false]], "cate_output_names() (econml.dml._rlearner._rlearner method)": [[10, "econml.dml._rlearner._RLearner.cate_output_names", false]], "cate_output_names() (econml.dml.causalforestdml method)": [[4, "econml.dml.CausalForestDML.cate_output_names", false]], "cate_output_names() (econml.dml.dml method)": [[5, "econml.dml.DML.cate_output_names", false]], "cate_output_names() (econml.dml.kerneldml method)": [[6, "econml.dml.KernelDML.cate_output_names", false]], "cate_output_names() (econml.dml.lineardml method)": [[7, "econml.dml.LinearDML.cate_output_names", false]], "cate_output_names() (econml.dml.nonparamdml method)": [[8, "econml.dml.NonParamDML.cate_output_names", false]], "cate_output_names() (econml.dml.sparselineardml method)": [[9, "econml.dml.SparseLinearDML.cate_output_names", false]], "cate_output_names() (econml.dr.drlearner method)": [[12, "econml.dr.DRLearner.cate_output_names", false]], "cate_output_names() (econml.dr.forestdrlearner method)": [[13, "econml.dr.ForestDRLearner.cate_output_names", false]], "cate_output_names() (econml.dr.lineardrlearner method)": [[14, "econml.dr.LinearDRLearner.cate_output_names", false]], "cate_output_names() (econml.dr.sparselineardrlearner method)": [[15, "econml.dr.SparseLinearDRLearner.cate_output_names", false]], "cate_output_names() (econml.federated_learning.federatedestimator method)": [[16, "econml.federated_learning.FederatedEstimator.cate_output_names", false]], "cate_output_names() (econml.iv.dml.dmliv method)": [[37, "econml.iv.dml.DMLIV.cate_output_names", false]], "cate_output_names() (econml.iv.dml.nonparamdmliv method)": [[38, "econml.iv.dml.NonParamDMLIV.cate_output_names", false]], "cate_output_names() (econml.iv.dml.orthoiv method)": [[39, "econml.iv.dml.OrthoIV.cate_output_names", false]], "cate_output_names() (econml.iv.dr.driv method)": [[40, "econml.iv.dr.DRIV.cate_output_names", false]], "cate_output_names() (econml.iv.dr.forestdriv method)": [[41, "econml.iv.dr.ForestDRIV.cate_output_names", false]], "cate_output_names() (econml.iv.dr.intenttotreatdriv method)": [[42, "econml.iv.dr.IntentToTreatDRIV.cate_output_names", false]], "cate_output_names() (econml.iv.dr.lineardriv method)": [[43, "econml.iv.dr.LinearDRIV.cate_output_names", false]], "cate_output_names() (econml.iv.dr.linearintenttotreatdriv method)": [[44, "econml.iv.dr.LinearIntentToTreatDRIV.cate_output_names", false]], "cate_output_names() (econml.iv.dr.sparselineardriv method)": [[45, "econml.iv.dr.SparseLinearDRIV.cate_output_names", false]], "cate_output_names() (econml.iv.sieve.sievetsls method)": [[48, "econml.iv.sieve.SieveTSLS.cate_output_names", false]], "cate_output_names() (econml.metalearners.domainadaptationlearner method)": [[49, "econml.metalearners.DomainAdaptationLearner.cate_output_names", false]], "cate_output_names() (econml.metalearners.slearner method)": [[50, "econml.metalearners.SLearner.cate_output_names", false]], "cate_output_names() (econml.metalearners.tlearner method)": [[51, "econml.metalearners.TLearner.cate_output_names", false]], "cate_output_names() (econml.metalearners.xlearner method)": [[52, "econml.metalearners.XLearner.cate_output_names", false]], "cate_output_names() (econml.orf.dmlorthoforest method)": [[53, "econml.orf.DMLOrthoForest.cate_output_names", false]], "cate_output_names() (econml.orf.drorthoforest method)": [[54, "econml.orf.DROrthoForest.cate_output_names", false]], "cate_output_names() (econml.panel.dml.dynamicdml method)": [[55, "econml.panel.dml.DynamicDML.cate_output_names", false]], "cate_treatment_names() (econml._cate_estimator.basecateestimator method)": [[0, "econml._cate_estimator.BaseCateEstimator.cate_treatment_names", false]], "cate_treatment_names() (econml._cate_estimator.debiasedlassocateestimatordiscretemixin method)": [[0, "econml._cate_estimator.DebiasedLassoCateEstimatorDiscreteMixin.cate_treatment_names", false]], "cate_treatment_names() (econml._cate_estimator.debiasedlassocateestimatormixin method)": [[0, "econml._cate_estimator.DebiasedLassoCateEstimatorMixin.cate_treatment_names", false]], "cate_treatment_names() (econml._cate_estimator.forestmodelfinalcateestimatordiscretemixin method)": [[0, "econml._cate_estimator.ForestModelFinalCateEstimatorDiscreteMixin.cate_treatment_names", false]], "cate_treatment_names() (econml._cate_estimator.forestmodelfinalcateestimatormixin method)": [[0, "econml._cate_estimator.ForestModelFinalCateEstimatorMixin.cate_treatment_names", false]], "cate_treatment_names() (econml._cate_estimator.linearcateestimator method)": [[0, "econml._cate_estimator.LinearCateEstimator.cate_treatment_names", false]], "cate_treatment_names() (econml._cate_estimator.linearmodelfinalcateestimatordiscretemixin method)": [[0, "econml._cate_estimator.LinearModelFinalCateEstimatorDiscreteMixin.cate_treatment_names", false]], "cate_treatment_names() (econml._cate_estimator.linearmodelfinalcateestimatormixin method)": [[0, "econml._cate_estimator.LinearModelFinalCateEstimatorMixin.cate_treatment_names", false]], "cate_treatment_names() (econml._cate_estimator.statsmodelscateestimatordiscretemixin method)": [[0, "econml._cate_estimator.StatsModelsCateEstimatorDiscreteMixin.cate_treatment_names", false]], "cate_treatment_names() (econml._cate_estimator.statsmodelscateestimatormixin method)": [[0, "econml._cate_estimator.StatsModelsCateEstimatorMixin.cate_treatment_names", false]], "cate_treatment_names() (econml._cate_estimator.treatmentexpansionmixin method)": [[0, "econml._cate_estimator.TreatmentExpansionMixin.cate_treatment_names", false]], "cate_treatment_names() (econml._ortho_learner._ortholearner method)": [[1, "econml._ortho_learner._OrthoLearner.cate_treatment_names", false]], "cate_treatment_names() (econml.dml._rlearner._rlearner method)": [[10, "econml.dml._rlearner._RLearner.cate_treatment_names", false]], "cate_treatment_names() (econml.dml.causalforestdml method)": [[4, "econml.dml.CausalForestDML.cate_treatment_names", false]], "cate_treatment_names() (econml.dml.dml method)": [[5, "econml.dml.DML.cate_treatment_names", false]], "cate_treatment_names() (econml.dml.kerneldml method)": [[6, "econml.dml.KernelDML.cate_treatment_names", false]], "cate_treatment_names() (econml.dml.lineardml method)": [[7, "econml.dml.LinearDML.cate_treatment_names", false]], "cate_treatment_names() (econml.dml.nonparamdml method)": [[8, "econml.dml.NonParamDML.cate_treatment_names", false]], "cate_treatment_names() (econml.dml.sparselineardml method)": [[9, "econml.dml.SparseLinearDML.cate_treatment_names", false]], "cate_treatment_names() (econml.dr.drlearner method)": [[12, "econml.dr.DRLearner.cate_treatment_names", false]], "cate_treatment_names() (econml.dr.forestdrlearner method)": [[13, "econml.dr.ForestDRLearner.cate_treatment_names", false]], "cate_treatment_names() (econml.dr.lineardrlearner method)": [[14, "econml.dr.LinearDRLearner.cate_treatment_names", false]], "cate_treatment_names() (econml.dr.sparselineardrlearner method)": [[15, "econml.dr.SparseLinearDRLearner.cate_treatment_names", false]], "cate_treatment_names() (econml.federated_learning.federatedestimator method)": [[16, "econml.federated_learning.FederatedEstimator.cate_treatment_names", false]], "cate_treatment_names() (econml.iv.dml.dmliv method)": [[37, "econml.iv.dml.DMLIV.cate_treatment_names", false]], "cate_treatment_names() (econml.iv.dml.nonparamdmliv method)": [[38, "econml.iv.dml.NonParamDMLIV.cate_treatment_names", false]], "cate_treatment_names() (econml.iv.dml.orthoiv method)": [[39, "econml.iv.dml.OrthoIV.cate_treatment_names", false]], "cate_treatment_names() (econml.iv.dr.driv method)": [[40, "econml.iv.dr.DRIV.cate_treatment_names", false]], "cate_treatment_names() (econml.iv.dr.forestdriv method)": [[41, "econml.iv.dr.ForestDRIV.cate_treatment_names", false]], "cate_treatment_names() (econml.iv.dr.intenttotreatdriv method)": [[42, "econml.iv.dr.IntentToTreatDRIV.cate_treatment_names", false]], "cate_treatment_names() (econml.iv.dr.lineardriv method)": [[43, "econml.iv.dr.LinearDRIV.cate_treatment_names", false]], "cate_treatment_names() (econml.iv.dr.linearintenttotreatdriv method)": [[44, "econml.iv.dr.LinearIntentToTreatDRIV.cate_treatment_names", false]], "cate_treatment_names() (econml.iv.dr.sparselineardriv method)": [[45, "econml.iv.dr.SparseLinearDRIV.cate_treatment_names", false]], "cate_treatment_names() (econml.iv.sieve.sievetsls method)": [[48, "econml.iv.sieve.SieveTSLS.cate_treatment_names", false]], "cate_treatment_names() (econml.metalearners.domainadaptationlearner method)": [[49, "econml.metalearners.DomainAdaptationLearner.cate_treatment_names", false]], "cate_treatment_names() (econml.metalearners.slearner method)": [[50, "econml.metalearners.SLearner.cate_treatment_names", false]], "cate_treatment_names() (econml.metalearners.tlearner method)": [[51, "econml.metalearners.TLearner.cate_treatment_names", false]], "cate_treatment_names() (econml.metalearners.xlearner method)": [[52, "econml.metalearners.XLearner.cate_treatment_names", false]], "cate_treatment_names() (econml.orf.dmlorthoforest method)": [[53, "econml.orf.DMLOrthoForest.cate_treatment_names", false]], "cate_treatment_names() (econml.orf.drorthoforest method)": [[54, "econml.orf.DROrthoForest.cate_treatment_names", false]], "cate_treatment_names() (econml.panel.dml.dynamicdml method)": [[55, "econml.panel.dml.DynamicDML.cate_treatment_names", false]], "causalanalysis (class in econml.solutions.causal_analysis)": [[74, "econml.solutions.causal_analysis.CausalAnalysis", false]], "causalforest (class in econml.grf)": [[17, "econml.grf.CausalForest", false]], "causalforestdml (class in econml.dml)": [[4, "econml.dml.CausalForestDML", false]], "causalivforest (class in econml.grf)": [[18, "econml.grf.CausalIVForest", false]], "caution": [[99, "term-CAUTION", true]], "check_input_arrays() (in module econml.utilities)": [[75, "econml.utilities.check_input_arrays", false]], "check_inputs() (in module econml.utilities)": [[75, "econml.utilities.check_inputs", false]], "check_models() (in module econml.utilities)": [[75, "econml.utilities.check_models", false]], "coef_ (econml._cate_estimator.debiasedlassocateestimatormixin property)": [[0, "econml._cate_estimator.DebiasedLassoCateEstimatorMixin.coef_", false]], "coef_ (econml._cate_estimator.linearmodelfinalcateestimatormixin property)": [[0, "econml._cate_estimator.LinearModelFinalCateEstimatorMixin.coef_", false]], "coef_ (econml._cate_estimator.statsmodelscateestimatormixin property)": [[0, "econml._cate_estimator.StatsModelsCateEstimatorMixin.coef_", false]], "coef_ (econml.dml.dml property)": [[5, "econml.dml.DML.coef_", false]], "coef_ (econml.dml.kerneldml property)": [[6, "econml.dml.KernelDML.coef_", false]], "coef_ (econml.dml.lineardml property)": [[7, "econml.dml.LinearDML.coef_", false]], "coef_ (econml.dml.sparselineardml property)": [[9, "econml.dml.SparseLinearDML.coef_", false]], "coef_ (econml.iv.dml.dmliv property)": [[37, "econml.iv.dml.DMLIV.coef_", false]], "coef_ (econml.iv.dml.orthoiv property)": [[39, "econml.iv.dml.OrthoIV.coef_", false]], "coef_ (econml.iv.dr.lineardriv property)": [[43, "econml.iv.dr.LinearDRIV.coef_", false]], "coef_ (econml.iv.dr.linearintenttotreatdriv property)": [[44, "econml.iv.dr.LinearIntentToTreatDRIV.coef_", false]], "coef_ (econml.iv.dr.sparselineardriv property)": [[45, "econml.iv.dr.SparseLinearDRIV.coef_", false]], "coef_ (econml.panel.dml.dynamicdml property)": [[55, "econml.panel.dml.DynamicDML.coef_", false]], "coef_ (econml.sklearn_extensions.linear_model.debiasedlasso attribute)": [[62, "econml.sklearn_extensions.linear_model.DebiasedLasso.coef_", false]], "coef_ (econml.sklearn_extensions.linear_model.multioutputdebiasedlasso attribute)": [[63, "econml.sklearn_extensions.linear_model.MultiOutputDebiasedLasso.coef_", false]], "coef_ (econml.sklearn_extensions.linear_model.selectiveregularization attribute)": [[64, "econml.sklearn_extensions.linear_model.SelectiveRegularization.coef_", false]], "coef_ (econml.sklearn_extensions.linear_model.statsmodelslinearregression property)": [[65, "econml.sklearn_extensions.linear_model.StatsModelsLinearRegression.coef_", false]], "coef_ (econml.sklearn_extensions.linear_model.statsmodelsrlm property)": [[66, "econml.sklearn_extensions.linear_model.StatsModelsRLM.coef_", false]], "coef_ (econml.sklearn_extensions.linear_model.weightedlasso attribute)": [[67, "econml.sklearn_extensions.linear_model.WeightedLasso.coef_", false]], "coef_() (econml._cate_estimator.debiasedlassocateestimatordiscretemixin method)": [[0, "econml._cate_estimator.DebiasedLassoCateEstimatorDiscreteMixin.coef_", false]], "coef_() (econml._cate_estimator.linearmodelfinalcateestimatordiscretemixin method)": [[0, "econml._cate_estimator.LinearModelFinalCateEstimatorDiscreteMixin.coef_", false]], "coef_() (econml._cate_estimator.statsmodelscateestimatordiscretemixin method)": [[0, "econml._cate_estimator.StatsModelsCateEstimatorDiscreteMixin.coef_", false]], "coef_() (econml.dr.lineardrlearner method)": [[14, "econml.dr.LinearDRLearner.coef_", false]], "coef_() (econml.dr.sparselineardrlearner method)": [[15, "econml.dr.SparseLinearDRLearner.coef_", false]], "coef__inference() (econml._cate_estimator.debiasedlassocateestimatordiscretemixin method)": [[0, "econml._cate_estimator.DebiasedLassoCateEstimatorDiscreteMixin.coef__inference", false]], "coef__inference() (econml._cate_estimator.debiasedlassocateestimatormixin method)": [[0, "econml._cate_estimator.DebiasedLassoCateEstimatorMixin.coef__inference", false]], "coef__inference() (econml._cate_estimator.linearmodelfinalcateestimatordiscretemixin method)": [[0, "econml._cate_estimator.LinearModelFinalCateEstimatorDiscreteMixin.coef__inference", false]], "coef__inference() (econml._cate_estimator.linearmodelfinalcateestimatormixin method)": [[0, "econml._cate_estimator.LinearModelFinalCateEstimatorMixin.coef__inference", false]], "coef__inference() (econml._cate_estimator.statsmodelscateestimatordiscretemixin method)": [[0, "econml._cate_estimator.StatsModelsCateEstimatorDiscreteMixin.coef__inference", false]], "coef__inference() (econml._cate_estimator.statsmodelscateestimatormixin method)": [[0, "econml._cate_estimator.StatsModelsCateEstimatorMixin.coef__inference", false]], "coef__inference() (econml.dml.dml method)": [[5, "econml.dml.DML.coef__inference", false]], "coef__inference() (econml.dml.kerneldml method)": [[6, "econml.dml.KernelDML.coef__inference", false]], "coef__inference() (econml.dml.lineardml method)": [[7, "econml.dml.LinearDML.coef__inference", false]], "coef__inference() (econml.dml.sparselineardml method)": [[9, "econml.dml.SparseLinearDML.coef__inference", false]], "coef__inference() (econml.dr.lineardrlearner method)": [[14, "econml.dr.LinearDRLearner.coef__inference", false]], "coef__inference() (econml.dr.sparselineardrlearner method)": [[15, "econml.dr.SparseLinearDRLearner.coef__inference", false]], "coef__inference() (econml.iv.dml.orthoiv method)": [[39, "econml.iv.dml.OrthoIV.coef__inference", false]], "coef__inference() (econml.iv.dr.lineardriv method)": [[43, "econml.iv.dr.LinearDRIV.coef__inference", false]], "coef__inference() (econml.iv.dr.linearintenttotreatdriv method)": [[44, "econml.iv.dr.LinearIntentToTreatDRIV.coef__inference", false]], "coef__inference() (econml.iv.dr.sparselineardriv method)": [[45, "econml.iv.dr.SparseLinearDRIV.coef__inference", false]], "coef__inference() (econml.panel.dml.dynamicdml method)": [[55, "econml.panel.dml.DynamicDML.coef__inference", false]], "coef__interval() (econml._cate_estimator.debiasedlassocateestimatordiscretemixin method)": [[0, "econml._cate_estimator.DebiasedLassoCateEstimatorDiscreteMixin.coef__interval", false]], "coef__interval() (econml._cate_estimator.debiasedlassocateestimatormixin method)": [[0, "econml._cate_estimator.DebiasedLassoCateEstimatorMixin.coef__interval", false]], "coef__interval() (econml._cate_estimator.linearmodelfinalcateestimatordiscretemixin method)": [[0, "econml._cate_estimator.LinearModelFinalCateEstimatorDiscreteMixin.coef__interval", false]], "coef__interval() (econml._cate_estimator.linearmodelfinalcateestimatormixin method)": [[0, "econml._cate_estimator.LinearModelFinalCateEstimatorMixin.coef__interval", false]], "coef__interval() (econml._cate_estimator.statsmodelscateestimatordiscretemixin method)": [[0, "econml._cate_estimator.StatsModelsCateEstimatorDiscreteMixin.coef__interval", false]], "coef__interval() (econml._cate_estimator.statsmodelscateestimatormixin method)": [[0, "econml._cate_estimator.StatsModelsCateEstimatorMixin.coef__interval", false]], "coef__interval() (econml.dml.dml method)": [[5, "econml.dml.DML.coef__interval", false]], "coef__interval() (econml.dml.kerneldml method)": [[6, "econml.dml.KernelDML.coef__interval", false]], "coef__interval() (econml.dml.lineardml method)": [[7, "econml.dml.LinearDML.coef__interval", false]], "coef__interval() (econml.dml.sparselineardml method)": [[9, "econml.dml.SparseLinearDML.coef__interval", false]], "coef__interval() (econml.dr.lineardrlearner method)": [[14, "econml.dr.LinearDRLearner.coef__interval", false]], "coef__interval() (econml.dr.sparselineardrlearner method)": [[15, "econml.dr.SparseLinearDRLearner.coef__interval", false]], "coef__interval() (econml.iv.dml.orthoiv method)": [[39, "econml.iv.dml.OrthoIV.coef__interval", false]], "coef__interval() (econml.iv.dr.lineardriv method)": [[43, "econml.iv.dr.LinearDRIV.coef__interval", false]], "coef__interval() (econml.iv.dr.linearintenttotreatdriv method)": [[44, "econml.iv.dr.LinearIntentToTreatDRIV.coef__interval", false]], "coef__interval() (econml.iv.dr.sparselineardriv method)": [[45, "econml.iv.dr.SparseLinearDRIV.coef__interval", false]], "coef__interval() (econml.panel.dml.dynamicdml method)": [[55, "econml.panel.dml.DynamicDML.coef__interval", false]], "coef__interval() (econml.sklearn_extensions.linear_model.debiasedlasso method)": [[62, "econml.sklearn_extensions.linear_model.DebiasedLasso.coef__interval", false]], "coef__interval() (econml.sklearn_extensions.linear_model.multioutputdebiasedlasso method)": [[63, "econml.sklearn_extensions.linear_model.MultiOutputDebiasedLasso.coef__interval", false]], "coef__interval() (econml.sklearn_extensions.linear_model.statsmodelslinearregression method)": [[65, "econml.sklearn_extensions.linear_model.StatsModelsLinearRegression.coef__interval", false]], "coef__interval() (econml.sklearn_extensions.linear_model.statsmodelsrlm method)": [[66, "econml.sklearn_extensions.linear_model.StatsModelsRLM.coef__interval", false]], "coef_stderr_ (econml.sklearn_extensions.linear_model.debiasedlasso attribute)": [[62, "econml.sklearn_extensions.linear_model.DebiasedLasso.coef_stderr_", false]], "coef_stderr_ (econml.sklearn_extensions.linear_model.multioutputdebiasedlasso attribute)": [[63, "econml.sklearn_extensions.linear_model.MultiOutputDebiasedLasso.coef_stderr_", false]], "coef_stderr_ (econml.sklearn_extensions.linear_model.statsmodelslinearregression property)": [[65, "econml.sklearn_extensions.linear_model.StatsModelsLinearRegression.coef_stderr_", false]], "coef_stderr_ (econml.sklearn_extensions.linear_model.statsmodelsrlm property)": [[66, "econml.sklearn_extensions.linear_model.StatsModelsRLM.coef_stderr_", false]], "cohort_causal_effect() (econml.solutions.causal_analysis.causalanalysis method)": [[74, "econml.solutions.causal_analysis.CausalAnalysis.cohort_causal_effect", false]], "compliance": [[99, "term-COMPLIANCE", true]], "concatenate() (in module econml.utilities)": [[75, "econml.utilities.concatenate", false]], "conf_int() (econml.inference.empiricalinferenceresults method)": [[26, "econml.inference.EmpiricalInferenceResults.conf_int", false]], "conf_int() (econml.inference.normalinferenceresults method)": [[32, "econml.inference.NormalInferenceResults.conf_int", false]], "conf_int_mean() (econml.inference.populationsummaryresults method)": [[33, "econml.inference.PopulationSummaryResults.conf_int_mean", false]], "conf_int_point() (econml.inference.populationsummaryresults method)": [[33, "econml.inference.PopulationSummaryResults.conf_int_point", false]], "confidence intervals/model selection": [[99, "term-CONFIDENCE-INTERVALS-MODEL-SELECTION", true]], "const_marginal_ate() (econml._cate_estimator.linearcateestimator method)": [[0, "econml._cate_estimator.LinearCateEstimator.const_marginal_ate", false]], "const_marginal_ate() (econml._ortho_learner._ortholearner method)": [[1, "econml._ortho_learner._OrthoLearner.const_marginal_ate", false]], "const_marginal_ate() (econml.dml._rlearner._rlearner method)": [[10, "econml.dml._rlearner._RLearner.const_marginal_ate", false]], "const_marginal_ate() (econml.dml.causalforestdml method)": [[4, "econml.dml.CausalForestDML.const_marginal_ate", false]], "const_marginal_ate() (econml.dml.dml method)": [[5, "econml.dml.DML.const_marginal_ate", false]], "const_marginal_ate() (econml.dml.kerneldml method)": [[6, "econml.dml.KernelDML.const_marginal_ate", false]], "const_marginal_ate() (econml.dml.lineardml method)": [[7, "econml.dml.LinearDML.const_marginal_ate", false]], "const_marginal_ate() (econml.dml.nonparamdml method)": [[8, "econml.dml.NonParamDML.const_marginal_ate", false]], "const_marginal_ate() (econml.dml.sparselineardml method)": [[9, "econml.dml.SparseLinearDML.const_marginal_ate", false]], "const_marginal_ate() (econml.dr.drlearner method)": [[12, "econml.dr.DRLearner.const_marginal_ate", false]], "const_marginal_ate() (econml.dr.forestdrlearner method)": [[13, "econml.dr.ForestDRLearner.const_marginal_ate", false]], "const_marginal_ate() (econml.dr.lineardrlearner method)": [[14, "econml.dr.LinearDRLearner.const_marginal_ate", false]], "const_marginal_ate() (econml.dr.sparselineardrlearner method)": [[15, "econml.dr.SparseLinearDRLearner.const_marginal_ate", false]], "const_marginal_ate() (econml.federated_learning.federatedestimator method)": [[16, "econml.federated_learning.FederatedEstimator.const_marginal_ate", false]], "const_marginal_ate() (econml.iv.dml.dmliv method)": [[37, "econml.iv.dml.DMLIV.const_marginal_ate", false]], "const_marginal_ate() (econml.iv.dml.nonparamdmliv method)": [[38, "econml.iv.dml.NonParamDMLIV.const_marginal_ate", false]], "const_marginal_ate() (econml.iv.dml.orthoiv method)": [[39, "econml.iv.dml.OrthoIV.const_marginal_ate", false]], "const_marginal_ate() (econml.iv.dr.driv method)": [[40, "econml.iv.dr.DRIV.const_marginal_ate", false]], "const_marginal_ate() (econml.iv.dr.forestdriv method)": [[41, "econml.iv.dr.ForestDRIV.const_marginal_ate", false]], "const_marginal_ate() (econml.iv.dr.intenttotreatdriv method)": [[42, "econml.iv.dr.IntentToTreatDRIV.const_marginal_ate", false]], "const_marginal_ate() (econml.iv.dr.lineardriv method)": [[43, "econml.iv.dr.LinearDRIV.const_marginal_ate", false]], "const_marginal_ate() (econml.iv.dr.linearintenttotreatdriv method)": [[44, "econml.iv.dr.LinearIntentToTreatDRIV.const_marginal_ate", false]], "const_marginal_ate() (econml.iv.dr.sparselineardriv method)": [[45, "econml.iv.dr.SparseLinearDRIV.const_marginal_ate", false]], "const_marginal_ate() (econml.metalearners.domainadaptationlearner method)": [[49, "econml.metalearners.DomainAdaptationLearner.const_marginal_ate", false]], "const_marginal_ate() (econml.metalearners.slearner method)": [[50, "econml.metalearners.SLearner.const_marginal_ate", false]], "const_marginal_ate() (econml.metalearners.tlearner method)": [[51, "econml.metalearners.TLearner.const_marginal_ate", false]], "const_marginal_ate() (econml.metalearners.xlearner method)": [[52, "econml.metalearners.XLearner.const_marginal_ate", false]], "const_marginal_ate() (econml.orf.dmlorthoforest method)": [[53, "econml.orf.DMLOrthoForest.const_marginal_ate", false]], "const_marginal_ate() (econml.orf.drorthoforest method)": [[54, "econml.orf.DROrthoForest.const_marginal_ate", false]], "const_marginal_ate() (econml.panel.dml.dynamicdml method)": [[55, "econml.panel.dml.DynamicDML.const_marginal_ate", false]], "const_marginal_ate_inference() (econml._cate_estimator.linearcateestimator method)": [[0, "econml._cate_estimator.LinearCateEstimator.const_marginal_ate_inference", false]], "const_marginal_ate_inference() (econml._ortho_learner._ortholearner method)": [[1, "econml._ortho_learner._OrthoLearner.const_marginal_ate_inference", false]], "const_marginal_ate_inference() (econml.dml._rlearner._rlearner method)": [[10, "econml.dml._rlearner._RLearner.const_marginal_ate_inference", false]], "const_marginal_ate_inference() (econml.dml.causalforestdml method)": [[4, "econml.dml.CausalForestDML.const_marginal_ate_inference", false]], "const_marginal_ate_inference() (econml.dml.dml method)": [[5, "econml.dml.DML.const_marginal_ate_inference", false]], "const_marginal_ate_inference() (econml.dml.kerneldml method)": [[6, "econml.dml.KernelDML.const_marginal_ate_inference", false]], "const_marginal_ate_inference() (econml.dml.lineardml method)": [[7, "econml.dml.LinearDML.const_marginal_ate_inference", false]], "const_marginal_ate_inference() (econml.dml.nonparamdml method)": [[8, "econml.dml.NonParamDML.const_marginal_ate_inference", false]], "const_marginal_ate_inference() (econml.dml.sparselineardml method)": [[9, "econml.dml.SparseLinearDML.const_marginal_ate_inference", false]], "const_marginal_ate_inference() (econml.dr.drlearner method)": [[12, "econml.dr.DRLearner.const_marginal_ate_inference", false]], "const_marginal_ate_inference() (econml.dr.forestdrlearner method)": [[13, "econml.dr.ForestDRLearner.const_marginal_ate_inference", false]], "const_marginal_ate_inference() (econml.dr.lineardrlearner method)": [[14, "econml.dr.LinearDRLearner.const_marginal_ate_inference", false]], "const_marginal_ate_inference() (econml.dr.sparselineardrlearner method)": [[15, "econml.dr.SparseLinearDRLearner.const_marginal_ate_inference", false]], "const_marginal_ate_inference() (econml.federated_learning.federatedestimator method)": [[16, "econml.federated_learning.FederatedEstimator.const_marginal_ate_inference", false]], "const_marginal_ate_inference() (econml.iv.dml.dmliv method)": [[37, "econml.iv.dml.DMLIV.const_marginal_ate_inference", false]], "const_marginal_ate_inference() (econml.iv.dml.nonparamdmliv method)": [[38, "econml.iv.dml.NonParamDMLIV.const_marginal_ate_inference", false]], "const_marginal_ate_inference() (econml.iv.dml.orthoiv method)": [[39, "econml.iv.dml.OrthoIV.const_marginal_ate_inference", false]], "const_marginal_ate_inference() (econml.iv.dr.driv method)": [[40, "econml.iv.dr.DRIV.const_marginal_ate_inference", false]], "const_marginal_ate_inference() (econml.iv.dr.forestdriv method)": [[41, "econml.iv.dr.ForestDRIV.const_marginal_ate_inference", false]], "const_marginal_ate_inference() (econml.iv.dr.intenttotreatdriv method)": [[42, "econml.iv.dr.IntentToTreatDRIV.const_marginal_ate_inference", false]], "const_marginal_ate_inference() (econml.iv.dr.lineardriv method)": [[43, "econml.iv.dr.LinearDRIV.const_marginal_ate_inference", false]], "const_marginal_ate_inference() (econml.iv.dr.linearintenttotreatdriv method)": [[44, "econml.iv.dr.LinearIntentToTreatDRIV.const_marginal_ate_inference", false]], "const_marginal_ate_inference() (econml.iv.dr.sparselineardriv method)": [[45, "econml.iv.dr.SparseLinearDRIV.const_marginal_ate_inference", false]], "const_marginal_ate_inference() (econml.metalearners.domainadaptationlearner method)": [[49, "econml.metalearners.DomainAdaptationLearner.const_marginal_ate_inference", false]], "const_marginal_ate_inference() (econml.metalearners.slearner method)": [[50, "econml.metalearners.SLearner.const_marginal_ate_inference", false]], "const_marginal_ate_inference() (econml.metalearners.tlearner method)": [[51, "econml.metalearners.TLearner.const_marginal_ate_inference", false]], "const_marginal_ate_inference() (econml.metalearners.xlearner method)": [[52, "econml.metalearners.XLearner.const_marginal_ate_inference", false]], "const_marginal_ate_inference() (econml.orf.dmlorthoforest method)": [[53, "econml.orf.DMLOrthoForest.const_marginal_ate_inference", false]], "const_marginal_ate_inference() (econml.orf.drorthoforest method)": [[54, "econml.orf.DROrthoForest.const_marginal_ate_inference", false]], "const_marginal_ate_inference() (econml.panel.dml.dynamicdml method)": [[55, "econml.panel.dml.DynamicDML.const_marginal_ate_inference", false]], "const_marginal_ate_interval() (econml._cate_estimator.linearcateestimator method)": [[0, "econml._cate_estimator.LinearCateEstimator.const_marginal_ate_interval", false]], "const_marginal_ate_interval() (econml._ortho_learner._ortholearner method)": [[1, "econml._ortho_learner._OrthoLearner.const_marginal_ate_interval", false]], "const_marginal_ate_interval() (econml.dml._rlearner._rlearner method)": [[10, "econml.dml._rlearner._RLearner.const_marginal_ate_interval", false]], "const_marginal_ate_interval() (econml.dml.causalforestdml method)": [[4, "econml.dml.CausalForestDML.const_marginal_ate_interval", false]], "const_marginal_ate_interval() (econml.dml.dml method)": [[5, "econml.dml.DML.const_marginal_ate_interval", false]], "const_marginal_ate_interval() (econml.dml.kerneldml method)": [[6, "econml.dml.KernelDML.const_marginal_ate_interval", false]], "const_marginal_ate_interval() (econml.dml.lineardml method)": [[7, "econml.dml.LinearDML.const_marginal_ate_interval", false]], "const_marginal_ate_interval() (econml.dml.nonparamdml method)": [[8, "econml.dml.NonParamDML.const_marginal_ate_interval", false]], "const_marginal_ate_interval() (econml.dml.sparselineardml method)": [[9, "econml.dml.SparseLinearDML.const_marginal_ate_interval", false]], "const_marginal_ate_interval() (econml.dr.drlearner method)": [[12, "econml.dr.DRLearner.const_marginal_ate_interval", false]], "const_marginal_ate_interval() (econml.dr.forestdrlearner method)": [[13, "econml.dr.ForestDRLearner.const_marginal_ate_interval", false]], "const_marginal_ate_interval() (econml.dr.lineardrlearner method)": [[14, "econml.dr.LinearDRLearner.const_marginal_ate_interval", false]], "const_marginal_ate_interval() (econml.dr.sparselineardrlearner method)": [[15, "econml.dr.SparseLinearDRLearner.const_marginal_ate_interval", false]], "const_marginal_ate_interval() (econml.federated_learning.federatedestimator method)": [[16, "econml.federated_learning.FederatedEstimator.const_marginal_ate_interval", false]], "const_marginal_ate_interval() (econml.iv.dml.dmliv method)": [[37, "econml.iv.dml.DMLIV.const_marginal_ate_interval", false]], "const_marginal_ate_interval() (econml.iv.dml.nonparamdmliv method)": [[38, "econml.iv.dml.NonParamDMLIV.const_marginal_ate_interval", false]], "const_marginal_ate_interval() (econml.iv.dml.orthoiv method)": [[39, "econml.iv.dml.OrthoIV.const_marginal_ate_interval", false]], "const_marginal_ate_interval() (econml.iv.dr.driv method)": [[40, "econml.iv.dr.DRIV.const_marginal_ate_interval", false]], "const_marginal_ate_interval() (econml.iv.dr.forestdriv method)": [[41, "econml.iv.dr.ForestDRIV.const_marginal_ate_interval", false]], "const_marginal_ate_interval() (econml.iv.dr.intenttotreatdriv method)": [[42, "econml.iv.dr.IntentToTreatDRIV.const_marginal_ate_interval", false]], "const_marginal_ate_interval() (econml.iv.dr.lineardriv method)": [[43, "econml.iv.dr.LinearDRIV.const_marginal_ate_interval", false]], "const_marginal_ate_interval() (econml.iv.dr.linearintenttotreatdriv method)": [[44, "econml.iv.dr.LinearIntentToTreatDRIV.const_marginal_ate_interval", false]], "const_marginal_ate_interval() (econml.iv.dr.sparselineardriv method)": [[45, "econml.iv.dr.SparseLinearDRIV.const_marginal_ate_interval", false]], "const_marginal_ate_interval() (econml.metalearners.domainadaptationlearner method)": [[49, "econml.metalearners.DomainAdaptationLearner.const_marginal_ate_interval", false]], "const_marginal_ate_interval() (econml.metalearners.slearner method)": [[50, "econml.metalearners.SLearner.const_marginal_ate_interval", false]], "const_marginal_ate_interval() (econml.metalearners.tlearner method)": [[51, "econml.metalearners.TLearner.const_marginal_ate_interval", false]], "const_marginal_ate_interval() (econml.metalearners.xlearner method)": [[52, "econml.metalearners.XLearner.const_marginal_ate_interval", false]], "const_marginal_ate_interval() (econml.orf.dmlorthoforest method)": [[53, "econml.orf.DMLOrthoForest.const_marginal_ate_interval", false]], "const_marginal_ate_interval() (econml.orf.drorthoforest method)": [[54, "econml.orf.DROrthoForest.const_marginal_ate_interval", false]], "const_marginal_ate_interval() (econml.panel.dml.dynamicdml method)": [[55, "econml.panel.dml.DynamicDML.const_marginal_ate_interval", false]], "const_marginal_effect() (econml._cate_estimator.linearcateestimator method)": [[0, "econml._cate_estimator.LinearCateEstimator.const_marginal_effect", false]], "const_marginal_effect() (econml._ortho_learner._ortholearner method)": [[1, "econml._ortho_learner._OrthoLearner.const_marginal_effect", false]], "const_marginal_effect() (econml.dml._rlearner._rlearner method)": [[10, "econml.dml._rlearner._RLearner.const_marginal_effect", false]], "const_marginal_effect() (econml.dml.causalforestdml method)": [[4, "econml.dml.CausalForestDML.const_marginal_effect", false]], "const_marginal_effect() (econml.dml.dml method)": [[5, "econml.dml.DML.const_marginal_effect", false]], "const_marginal_effect() (econml.dml.kerneldml method)": [[6, "econml.dml.KernelDML.const_marginal_effect", false]], "const_marginal_effect() (econml.dml.lineardml method)": [[7, "econml.dml.LinearDML.const_marginal_effect", false]], "const_marginal_effect() (econml.dml.nonparamdml method)": [[8, "econml.dml.NonParamDML.const_marginal_effect", false]], "const_marginal_effect() (econml.dml.sparselineardml method)": [[9, "econml.dml.SparseLinearDML.const_marginal_effect", false]], "const_marginal_effect() (econml.dr.drlearner method)": [[12, "econml.dr.DRLearner.const_marginal_effect", false]], "const_marginal_effect() (econml.dr.forestdrlearner method)": [[13, "econml.dr.ForestDRLearner.const_marginal_effect", false]], "const_marginal_effect() (econml.dr.lineardrlearner method)": [[14, "econml.dr.LinearDRLearner.const_marginal_effect", false]], "const_marginal_effect() (econml.dr.sparselineardrlearner method)": [[15, "econml.dr.SparseLinearDRLearner.const_marginal_effect", false]], "const_marginal_effect() (econml.federated_learning.federatedestimator method)": [[16, "econml.federated_learning.FederatedEstimator.const_marginal_effect", false]], "const_marginal_effect() (econml.iv.dml.dmliv method)": [[37, "econml.iv.dml.DMLIV.const_marginal_effect", false]], "const_marginal_effect() (econml.iv.dml.nonparamdmliv method)": [[38, "econml.iv.dml.NonParamDMLIV.const_marginal_effect", false]], "const_marginal_effect() (econml.iv.dml.orthoiv method)": [[39, "econml.iv.dml.OrthoIV.const_marginal_effect", false]], "const_marginal_effect() (econml.iv.dr.driv method)": [[40, "econml.iv.dr.DRIV.const_marginal_effect", false]], "const_marginal_effect() (econml.iv.dr.forestdriv method)": [[41, "econml.iv.dr.ForestDRIV.const_marginal_effect", false]], "const_marginal_effect() (econml.iv.dr.intenttotreatdriv method)": [[42, "econml.iv.dr.IntentToTreatDRIV.const_marginal_effect", false]], "const_marginal_effect() (econml.iv.dr.lineardriv method)": [[43, "econml.iv.dr.LinearDRIV.const_marginal_effect", false]], "const_marginal_effect() (econml.iv.dr.linearintenttotreatdriv method)": [[44, "econml.iv.dr.LinearIntentToTreatDRIV.const_marginal_effect", false]], "const_marginal_effect() (econml.iv.dr.sparselineardriv method)": [[45, "econml.iv.dr.SparseLinearDRIV.const_marginal_effect", false]], "const_marginal_effect() (econml.metalearners.domainadaptationlearner method)": [[49, "econml.metalearners.DomainAdaptationLearner.const_marginal_effect", false]], "const_marginal_effect() (econml.metalearners.slearner method)": [[50, "econml.metalearners.SLearner.const_marginal_effect", false]], "const_marginal_effect() (econml.metalearners.tlearner method)": [[51, "econml.metalearners.TLearner.const_marginal_effect", false]], "const_marginal_effect() (econml.metalearners.xlearner method)": [[52, "econml.metalearners.XLearner.const_marginal_effect", false]], "const_marginal_effect() (econml.orf.dmlorthoforest method)": [[53, "econml.orf.DMLOrthoForest.const_marginal_effect", false]], "const_marginal_effect() (econml.orf.drorthoforest method)": [[54, "econml.orf.DROrthoForest.const_marginal_effect", false]], "const_marginal_effect() (econml.panel.dml.dynamicdml method)": [[55, "econml.panel.dml.DynamicDML.const_marginal_effect", false]], "const_marginal_effect() (econml.score.ensemblecateestimator method)": [[60, "econml.score.EnsembleCateEstimator.const_marginal_effect", false]], "const_marginal_effect_inference() (econml._cate_estimator.linearcateestimator method)": [[0, "econml._cate_estimator.LinearCateEstimator.const_marginal_effect_inference", false]], "const_marginal_effect_inference() (econml._ortho_learner._ortholearner method)": [[1, "econml._ortho_learner._OrthoLearner.const_marginal_effect_inference", false]], "const_marginal_effect_inference() (econml.dml._rlearner._rlearner method)": [[10, "econml.dml._rlearner._RLearner.const_marginal_effect_inference", false]], "const_marginal_effect_inference() (econml.dml.causalforestdml method)": [[4, "econml.dml.CausalForestDML.const_marginal_effect_inference", false]], "const_marginal_effect_inference() (econml.dml.dml method)": [[5, "econml.dml.DML.const_marginal_effect_inference", false]], "const_marginal_effect_inference() (econml.dml.kerneldml method)": [[6, "econml.dml.KernelDML.const_marginal_effect_inference", false]], "const_marginal_effect_inference() (econml.dml.lineardml method)": [[7, "econml.dml.LinearDML.const_marginal_effect_inference", false]], "const_marginal_effect_inference() (econml.dml.nonparamdml method)": [[8, "econml.dml.NonParamDML.const_marginal_effect_inference", false]], "const_marginal_effect_inference() (econml.dml.sparselineardml method)": [[9, "econml.dml.SparseLinearDML.const_marginal_effect_inference", false]], "const_marginal_effect_inference() (econml.dr.drlearner method)": [[12, "econml.dr.DRLearner.const_marginal_effect_inference", false]], "const_marginal_effect_inference() (econml.dr.forestdrlearner method)": [[13, "econml.dr.ForestDRLearner.const_marginal_effect_inference", false]], "const_marginal_effect_inference() (econml.dr.lineardrlearner method)": [[14, "econml.dr.LinearDRLearner.const_marginal_effect_inference", false]], "const_marginal_effect_inference() (econml.dr.sparselineardrlearner method)": [[15, "econml.dr.SparseLinearDRLearner.const_marginal_effect_inference", false]], "const_marginal_effect_inference() (econml.federated_learning.federatedestimator method)": [[16, "econml.federated_learning.FederatedEstimator.const_marginal_effect_inference", false]], "const_marginal_effect_inference() (econml.iv.dml.dmliv method)": [[37, "econml.iv.dml.DMLIV.const_marginal_effect_inference", false]], "const_marginal_effect_inference() (econml.iv.dml.nonparamdmliv method)": [[38, "econml.iv.dml.NonParamDMLIV.const_marginal_effect_inference", false]], "const_marginal_effect_inference() (econml.iv.dml.orthoiv method)": [[39, "econml.iv.dml.OrthoIV.const_marginal_effect_inference", false]], "const_marginal_effect_inference() (econml.iv.dr.driv method)": [[40, "econml.iv.dr.DRIV.const_marginal_effect_inference", false]], "const_marginal_effect_inference() (econml.iv.dr.forestdriv method)": [[41, "econml.iv.dr.ForestDRIV.const_marginal_effect_inference", false]], "const_marginal_effect_inference() (econml.iv.dr.intenttotreatdriv method)": [[42, "econml.iv.dr.IntentToTreatDRIV.const_marginal_effect_inference", false]], "const_marginal_effect_inference() (econml.iv.dr.lineardriv method)": [[43, "econml.iv.dr.LinearDRIV.const_marginal_effect_inference", false]], "const_marginal_effect_inference() (econml.iv.dr.linearintenttotreatdriv method)": [[44, "econml.iv.dr.LinearIntentToTreatDRIV.const_marginal_effect_inference", false]], "const_marginal_effect_inference() (econml.iv.dr.sparselineardriv method)": [[45, "econml.iv.dr.SparseLinearDRIV.const_marginal_effect_inference", false]], "const_marginal_effect_inference() (econml.metalearners.domainadaptationlearner method)": [[49, "econml.metalearners.DomainAdaptationLearner.const_marginal_effect_inference", false]], "const_marginal_effect_inference() (econml.metalearners.slearner method)": [[50, "econml.metalearners.SLearner.const_marginal_effect_inference", false]], "const_marginal_effect_inference() (econml.metalearners.tlearner method)": [[51, "econml.metalearners.TLearner.const_marginal_effect_inference", false]], "const_marginal_effect_inference() (econml.metalearners.xlearner method)": [[52, "econml.metalearners.XLearner.const_marginal_effect_inference", false]], "const_marginal_effect_inference() (econml.orf.dmlorthoforest method)": [[53, "econml.orf.DMLOrthoForest.const_marginal_effect_inference", false]], "const_marginal_effect_inference() (econml.orf.drorthoforest method)": [[54, "econml.orf.DROrthoForest.const_marginal_effect_inference", false]], "const_marginal_effect_inference() (econml.panel.dml.dynamicdml method)": [[55, "econml.panel.dml.DynamicDML.const_marginal_effect_inference", false]], "const_marginal_effect_interval() (econml._cate_estimator.linearcateestimator method)": [[0, "econml._cate_estimator.LinearCateEstimator.const_marginal_effect_interval", false]], "const_marginal_effect_interval() (econml._ortho_learner._ortholearner method)": [[1, "econml._ortho_learner._OrthoLearner.const_marginal_effect_interval", false]], "const_marginal_effect_interval() (econml.dml._rlearner._rlearner method)": [[10, "econml.dml._rlearner._RLearner.const_marginal_effect_interval", false]], "const_marginal_effect_interval() (econml.dml.causalforestdml method)": [[4, "econml.dml.CausalForestDML.const_marginal_effect_interval", false]], "const_marginal_effect_interval() (econml.dml.dml method)": [[5, "econml.dml.DML.const_marginal_effect_interval", false]], "const_marginal_effect_interval() (econml.dml.kerneldml method)": [[6, "econml.dml.KernelDML.const_marginal_effect_interval", false]], "const_marginal_effect_interval() (econml.dml.lineardml method)": [[7, "econml.dml.LinearDML.const_marginal_effect_interval", false]], "const_marginal_effect_interval() (econml.dml.nonparamdml method)": [[8, "econml.dml.NonParamDML.const_marginal_effect_interval", false]], "const_marginal_effect_interval() (econml.dml.sparselineardml method)": [[9, "econml.dml.SparseLinearDML.const_marginal_effect_interval", false]], "const_marginal_effect_interval() (econml.dr.drlearner method)": [[12, "econml.dr.DRLearner.const_marginal_effect_interval", false]], "const_marginal_effect_interval() (econml.dr.forestdrlearner method)": [[13, "econml.dr.ForestDRLearner.const_marginal_effect_interval", false]], "const_marginal_effect_interval() (econml.dr.lineardrlearner method)": [[14, "econml.dr.LinearDRLearner.const_marginal_effect_interval", false]], "const_marginal_effect_interval() (econml.dr.sparselineardrlearner method)": [[15, "econml.dr.SparseLinearDRLearner.const_marginal_effect_interval", false]], "const_marginal_effect_interval() (econml.federated_learning.federatedestimator method)": [[16, "econml.federated_learning.FederatedEstimator.const_marginal_effect_interval", false]], "const_marginal_effect_interval() (econml.iv.dml.dmliv method)": [[37, "econml.iv.dml.DMLIV.const_marginal_effect_interval", false]], "const_marginal_effect_interval() (econml.iv.dml.nonparamdmliv method)": [[38, "econml.iv.dml.NonParamDMLIV.const_marginal_effect_interval", false]], "const_marginal_effect_interval() (econml.iv.dml.orthoiv method)": [[39, "econml.iv.dml.OrthoIV.const_marginal_effect_interval", false]], "const_marginal_effect_interval() (econml.iv.dr.driv method)": [[40, "econml.iv.dr.DRIV.const_marginal_effect_interval", false]], "const_marginal_effect_interval() (econml.iv.dr.forestdriv method)": [[41, "econml.iv.dr.ForestDRIV.const_marginal_effect_interval", false]], "const_marginal_effect_interval() (econml.iv.dr.intenttotreatdriv method)": [[42, "econml.iv.dr.IntentToTreatDRIV.const_marginal_effect_interval", false]], "const_marginal_effect_interval() (econml.iv.dr.lineardriv method)": [[43, "econml.iv.dr.LinearDRIV.const_marginal_effect_interval", false]], "const_marginal_effect_interval() (econml.iv.dr.linearintenttotreatdriv method)": [[44, "econml.iv.dr.LinearIntentToTreatDRIV.const_marginal_effect_interval", false]], "const_marginal_effect_interval() (econml.iv.dr.sparselineardriv method)": [[45, "econml.iv.dr.SparseLinearDRIV.const_marginal_effect_interval", false]], "const_marginal_effect_interval() (econml.metalearners.domainadaptationlearner method)": [[49, "econml.metalearners.DomainAdaptationLearner.const_marginal_effect_interval", false]], "const_marginal_effect_interval() (econml.metalearners.slearner method)": [[50, "econml.metalearners.SLearner.const_marginal_effect_interval", false]], "const_marginal_effect_interval() (econml.metalearners.tlearner method)": [[51, "econml.metalearners.TLearner.const_marginal_effect_interval", false]], "const_marginal_effect_interval() (econml.metalearners.xlearner method)": [[52, "econml.metalearners.XLearner.const_marginal_effect_interval", false]], "const_marginal_effect_interval() (econml.orf.dmlorthoforest method)": [[53, "econml.orf.DMLOrthoForest.const_marginal_effect_interval", false]], "const_marginal_effect_interval() (econml.orf.drorthoforest method)": [[54, "econml.orf.DROrthoForest.const_marginal_effect_interval", false]], "const_marginal_effect_interval() (econml.panel.dml.dynamicdml method)": [[55, "econml.panel.dml.DynamicDML.const_marginal_effect_interval", false]], "count() (econml._ortho_learner.cachedvalues method)": [[1, "econml._ortho_learner.CachedValues.count", false]], "cross_product() (in module econml.utilities)": [[75, "econml.utilities.cross_product", false]], "debiasedlasso (class in econml.sklearn_extensions.linear_model)": [[62, "econml.sklearn_extensions.linear_model.DebiasedLasso", false]], "debiasedlassocateestimatordiscretemixin (class in econml._cate_estimator)": [[0, "econml._cate_estimator.DebiasedLassoCateEstimatorDiscreteMixin", false]], "debiasedlassocateestimatormixin (class in econml._cate_estimator)": [[0, "econml._cate_estimator.DebiasedLassoCateEstimatorMixin", false]], "decision_path() (econml.grf._base_grf.basegrf method)": [[23, "econml.grf._base_grf.BaseGRF.decision_path", false]], "decision_path() (econml.grf._base_grftree.grftree method)": [[24, "econml.grf._base_grftree.GRFTree.decision_path", false]], "decision_path() (econml.grf.causalforest method)": [[17, "econml.grf.CausalForest.decision_path", false]], "decision_path() (econml.grf.causalivforest method)": [[18, "econml.grf.CausalIVForest.decision_path", false]], "decision_path() (econml.grf.regressionforest method)": [[22, "econml.grf.RegressionForest.decision_path", false]], "decision_path() (econml.policy.policyforest method)": [[58, "econml.policy.PolicyForest.decision_path", false]], "decision_path() (econml.policy.policytree method)": [[59, "econml.policy.PolicyTree.decision_path", false]], "deprecated() (in module econml.utilities)": [[75, "econml.utilities.deprecated", false]], "dml (class in econml.dml)": [[5, "econml.dml.DML", false]], "dmliv (class in econml.iv.dml)": [[37, "econml.iv.dml.DMLIV", false]], "dmlorthoforest (class in econml.orf)": [[53, "econml.orf.DMLOrthoForest", false]], "domainadaptationlearner (class in econml.metalearners)": [[49, "econml.metalearners.DomainAdaptationLearner", false]], "dowhy (econml._cate_estimator.basecateestimator property)": [[0, "econml._cate_estimator.BaseCateEstimator.dowhy", false]], "dowhy (econml._cate_estimator.debiasedlassocateestimatordiscretemixin property)": [[0, "econml._cate_estimator.DebiasedLassoCateEstimatorDiscreteMixin.dowhy", false]], "dowhy (econml._cate_estimator.debiasedlassocateestimatormixin property)": [[0, "econml._cate_estimator.DebiasedLassoCateEstimatorMixin.dowhy", false]], "dowhy (econml._cate_estimator.forestmodelfinalcateestimatordiscretemixin property)": [[0, "econml._cate_estimator.ForestModelFinalCateEstimatorDiscreteMixin.dowhy", false]], "dowhy (econml._cate_estimator.forestmodelfinalcateestimatormixin property)": [[0, "econml._cate_estimator.ForestModelFinalCateEstimatorMixin.dowhy", false]], "dowhy (econml._cate_estimator.linearcateestimator property)": [[0, "econml._cate_estimator.LinearCateEstimator.dowhy", false]], "dowhy (econml._cate_estimator.linearmodelfinalcateestimatordiscretemixin property)": [[0, "econml._cate_estimator.LinearModelFinalCateEstimatorDiscreteMixin.dowhy", false]], "dowhy (econml._cate_estimator.linearmodelfinalcateestimatormixin property)": [[0, "econml._cate_estimator.LinearModelFinalCateEstimatorMixin.dowhy", false]], "dowhy (econml._cate_estimator.statsmodelscateestimatordiscretemixin property)": [[0, "econml._cate_estimator.StatsModelsCateEstimatorDiscreteMixin.dowhy", false]], "dowhy (econml._cate_estimator.statsmodelscateestimatormixin property)": [[0, "econml._cate_estimator.StatsModelsCateEstimatorMixin.dowhy", false]], "dowhy (econml._cate_estimator.treatmentexpansionmixin property)": [[0, "econml._cate_estimator.TreatmentExpansionMixin.dowhy", false]], "dowhy (econml._ortho_learner._ortholearner property)": [[1, "econml._ortho_learner._OrthoLearner.dowhy", false]], "dowhy (econml.dml._rlearner._rlearner property)": [[10, "econml.dml._rlearner._RLearner.dowhy", false]], "dowhy (econml.dml.causalforestdml property)": [[4, "econml.dml.CausalForestDML.dowhy", false]], "dowhy (econml.dml.dml property)": [[5, "econml.dml.DML.dowhy", false]], "dowhy (econml.dml.kerneldml property)": [[6, "econml.dml.KernelDML.dowhy", false]], "dowhy (econml.dml.lineardml property)": [[7, "econml.dml.LinearDML.dowhy", false]], "dowhy (econml.dml.nonparamdml property)": [[8, "econml.dml.NonParamDML.dowhy", false]], "dowhy (econml.dml.sparselineardml property)": [[9, "econml.dml.SparseLinearDML.dowhy", false]], "dowhy (econml.dr.drlearner property)": [[12, "econml.dr.DRLearner.dowhy", false]], "dowhy (econml.dr.forestdrlearner property)": [[13, "econml.dr.ForestDRLearner.dowhy", false]], "dowhy (econml.dr.lineardrlearner property)": [[14, "econml.dr.LinearDRLearner.dowhy", false]], "dowhy (econml.dr.sparselineardrlearner property)": [[15, "econml.dr.SparseLinearDRLearner.dowhy", false]], "dowhy (econml.federated_learning.federatedestimator property)": [[16, "econml.federated_learning.FederatedEstimator.dowhy", false]], "dowhy (econml.iv.dml.dmliv property)": [[37, "econml.iv.dml.DMLIV.dowhy", false]], "dowhy (econml.iv.dml.nonparamdmliv property)": [[38, "econml.iv.dml.NonParamDMLIV.dowhy", false]], "dowhy (econml.iv.dml.orthoiv property)": [[39, "econml.iv.dml.OrthoIV.dowhy", false]], "dowhy (econml.iv.dr.driv property)": [[40, "econml.iv.dr.DRIV.dowhy", false]], "dowhy (econml.iv.dr.forestdriv property)": [[41, "econml.iv.dr.ForestDRIV.dowhy", false]], "dowhy (econml.iv.dr.intenttotreatdriv property)": [[42, "econml.iv.dr.IntentToTreatDRIV.dowhy", false]], "dowhy (econml.iv.dr.lineardriv property)": [[43, "econml.iv.dr.LinearDRIV.dowhy", false]], "dowhy (econml.iv.dr.linearintenttotreatdriv property)": [[44, "econml.iv.dr.LinearIntentToTreatDRIV.dowhy", false]], "dowhy (econml.iv.dr.sparselineardriv property)": [[45, "econml.iv.dr.SparseLinearDRIV.dowhy", false]], "dowhy (econml.iv.sieve.sievetsls property)": [[48, "econml.iv.sieve.SieveTSLS.dowhy", false]], "dowhy (econml.metalearners.domainadaptationlearner property)": [[49, "econml.metalearners.DomainAdaptationLearner.dowhy", false]], "dowhy (econml.metalearners.slearner property)": [[50, "econml.metalearners.SLearner.dowhy", false]], "dowhy (econml.metalearners.tlearner property)": [[51, "econml.metalearners.TLearner.dowhy", false]], "dowhy (econml.metalearners.xlearner property)": [[52, "econml.metalearners.XLearner.dowhy", false]], "dowhy (econml.orf.dmlorthoforest property)": [[53, "econml.orf.DMLOrthoForest.dowhy", false]], "dowhy (econml.orf.drorthoforest property)": [[54, "econml.orf.DROrthoForest.dowhy", false]], "dowhy (econml.panel.dml.dynamicdml property)": [[55, "econml.panel.dml.DynamicDML.dowhy", false]], "dowhywrapper (class in econml.dowhy)": [[11, "econml.dowhy.DoWhyWrapper", false]], "dpolynomialfeatures (class in econml.iv.sieve)": [[46, "econml.iv.sieve.DPolynomialFeatures", false]], "driv (class in econml.iv.dr)": [[40, "econml.iv.dr.DRIV", false]], "drlearner (class in econml.dr)": [[12, "econml.dr.DRLearner", false]], "drorthoforest (class in econml.orf)": [[54, "econml.orf.DROrthoForest", false]], "drpolicyforest (class in econml.policy)": [[56, "econml.policy.DRPolicyForest", false]], "drpolicytree (class in econml.policy)": [[57, "econml.policy.DRPolicyTree", false]], "drtester (class in econml.validate)": [[78, "econml.validate.DRTester", false]], "dynamicdml (class in econml.panel.dml)": [[55, "econml.panel.dml.DynamicDML", false]], "econml._cate_estimator": [[0, "module-econml._cate_estimator", false]], "econml._ortho_learner": [[1, "module-econml._ortho_learner", false]], "econml.dml._rlearner": [[10, "module-econml.dml._rlearner", false]], "econml.inference._bootstrap": [[36, "module-econml.inference._bootstrap", false]], "econml.utilities": [[75, "module-econml.utilities", false]], "effect() (econml._cate_estimator.basecateestimator method)": [[0, "econml._cate_estimator.BaseCateEstimator.effect", false]], "effect() (econml._cate_estimator.debiasedlassocateestimatordiscretemixin method)": [[0, "econml._cate_estimator.DebiasedLassoCateEstimatorDiscreteMixin.effect", false]], "effect() (econml._cate_estimator.debiasedlassocateestimatormixin method)": [[0, "econml._cate_estimator.DebiasedLassoCateEstimatorMixin.effect", false]], "effect() (econml._cate_estimator.forestmodelfinalcateestimatordiscretemixin method)": [[0, "econml._cate_estimator.ForestModelFinalCateEstimatorDiscreteMixin.effect", false]], "effect() (econml._cate_estimator.forestmodelfinalcateestimatormixin method)": [[0, "econml._cate_estimator.ForestModelFinalCateEstimatorMixin.effect", false]], "effect() (econml._cate_estimator.linearcateestimator method)": [[0, "econml._cate_estimator.LinearCateEstimator.effect", false]], "effect() (econml._cate_estimator.linearmodelfinalcateestimatordiscretemixin method)": [[0, "econml._cate_estimator.LinearModelFinalCateEstimatorDiscreteMixin.effect", false]], "effect() (econml._cate_estimator.linearmodelfinalcateestimatormixin method)": [[0, "econml._cate_estimator.LinearModelFinalCateEstimatorMixin.effect", false]], "effect() (econml._cate_estimator.statsmodelscateestimatordiscretemixin method)": [[0, "econml._cate_estimator.StatsModelsCateEstimatorDiscreteMixin.effect", false]], "effect() (econml._cate_estimator.statsmodelscateestimatormixin method)": [[0, "econml._cate_estimator.StatsModelsCateEstimatorMixin.effect", false]], "effect() (econml._cate_estimator.treatmentexpansionmixin method)": [[0, "econml._cate_estimator.TreatmentExpansionMixin.effect", false]], "effect() (econml._ortho_learner._ortholearner method)": [[1, "econml._ortho_learner._OrthoLearner.effect", false]], "effect() (econml.dml._rlearner._rlearner method)": [[10, "econml.dml._rlearner._RLearner.effect", false]], "effect() (econml.dml.causalforestdml method)": [[4, "econml.dml.CausalForestDML.effect", false]], "effect() (econml.dml.dml method)": [[5, "econml.dml.DML.effect", false]], "effect() (econml.dml.kerneldml method)": [[6, "econml.dml.KernelDML.effect", false]], "effect() (econml.dml.lineardml method)": [[7, "econml.dml.LinearDML.effect", false]], "effect() (econml.dml.nonparamdml method)": [[8, "econml.dml.NonParamDML.effect", false]], "effect() (econml.dml.sparselineardml method)": [[9, "econml.dml.SparseLinearDML.effect", false]], "effect() (econml.dr.drlearner method)": [[12, "econml.dr.DRLearner.effect", false]], "effect() (econml.dr.forestdrlearner method)": [[13, "econml.dr.ForestDRLearner.effect", false]], "effect() (econml.dr.lineardrlearner method)": [[14, "econml.dr.LinearDRLearner.effect", false]], "effect() (econml.dr.sparselineardrlearner method)": [[15, "econml.dr.SparseLinearDRLearner.effect", false]], "effect() (econml.federated_learning.federatedestimator method)": [[16, "econml.federated_learning.FederatedEstimator.effect", false]], "effect() (econml.iv.dml.dmliv method)": [[37, "econml.iv.dml.DMLIV.effect", false]], "effect() (econml.iv.dml.nonparamdmliv method)": [[38, "econml.iv.dml.NonParamDMLIV.effect", false]], "effect() (econml.iv.dml.orthoiv method)": [[39, "econml.iv.dml.OrthoIV.effect", false]], "effect() (econml.iv.dr.driv method)": [[40, "econml.iv.dr.DRIV.effect", false]], "effect() (econml.iv.dr.forestdriv method)": [[41, "econml.iv.dr.ForestDRIV.effect", false]], "effect() (econml.iv.dr.intenttotreatdriv method)": [[42, "econml.iv.dr.IntentToTreatDRIV.effect", false]], "effect() (econml.iv.dr.lineardriv method)": [[43, "econml.iv.dr.LinearDRIV.effect", false]], "effect() (econml.iv.dr.linearintenttotreatdriv method)": [[44, "econml.iv.dr.LinearIntentToTreatDRIV.effect", false]], "effect() (econml.iv.dr.sparselineardriv method)": [[45, "econml.iv.dr.SparseLinearDRIV.effect", false]], "effect() (econml.iv.sieve.sievetsls method)": [[48, "econml.iv.sieve.SieveTSLS.effect", false]], "effect() (econml.metalearners.domainadaptationlearner method)": [[49, "econml.metalearners.DomainAdaptationLearner.effect", false]], "effect() (econml.metalearners.slearner method)": [[50, "econml.metalearners.SLearner.effect", false]], "effect() (econml.metalearners.tlearner method)": [[51, "econml.metalearners.TLearner.effect", false]], "effect() (econml.metalearners.xlearner method)": [[52, "econml.metalearners.XLearner.effect", false]], "effect() (econml.orf.dmlorthoforest method)": [[53, "econml.orf.DMLOrthoForest.effect", false]], "effect() (econml.orf.drorthoforest method)": [[54, "econml.orf.DROrthoForest.effect", false]], "effect() (econml.panel.dml.dynamicdml method)": [[55, "econml.panel.dml.DynamicDML.effect", false]], "effect() (econml.score.ensemblecateestimator method)": [[60, "econml.score.EnsembleCateEstimator.effect", false]], "effect_inference() (econml._cate_estimator.basecateestimator method)": [[0, "econml._cate_estimator.BaseCateEstimator.effect_inference", false]], "effect_inference() (econml._cate_estimator.debiasedlassocateestimatordiscretemixin method)": [[0, "econml._cate_estimator.DebiasedLassoCateEstimatorDiscreteMixin.effect_inference", false]], "effect_inference() (econml._cate_estimator.debiasedlassocateestimatormixin method)": [[0, "econml._cate_estimator.DebiasedLassoCateEstimatorMixin.effect_inference", false]], "effect_inference() (econml._cate_estimator.forestmodelfinalcateestimatordiscretemixin method)": [[0, "econml._cate_estimator.ForestModelFinalCateEstimatorDiscreteMixin.effect_inference", false]], "effect_inference() (econml._cate_estimator.forestmodelfinalcateestimatormixin method)": [[0, "econml._cate_estimator.ForestModelFinalCateEstimatorMixin.effect_inference", false]], "effect_inference() (econml._cate_estimator.linearcateestimator method)": [[0, "econml._cate_estimator.LinearCateEstimator.effect_inference", false]], "effect_inference() (econml._cate_estimator.linearmodelfinalcateestimatordiscretemixin method)": [[0, "econml._cate_estimator.LinearModelFinalCateEstimatorDiscreteMixin.effect_inference", false]], "effect_inference() (econml._cate_estimator.linearmodelfinalcateestimatormixin method)": [[0, "econml._cate_estimator.LinearModelFinalCateEstimatorMixin.effect_inference", false]], "effect_inference() (econml._cate_estimator.statsmodelscateestimatordiscretemixin method)": [[0, "econml._cate_estimator.StatsModelsCateEstimatorDiscreteMixin.effect_inference", false]], "effect_inference() (econml._cate_estimator.statsmodelscateestimatormixin method)": [[0, "econml._cate_estimator.StatsModelsCateEstimatorMixin.effect_inference", false]], "effect_inference() (econml._cate_estimator.treatmentexpansionmixin method)": [[0, "econml._cate_estimator.TreatmentExpansionMixin.effect_inference", false]], "effect_inference() (econml._ortho_learner._ortholearner method)": [[1, "econml._ortho_learner._OrthoLearner.effect_inference", false]], "effect_inference() (econml.dml._rlearner._rlearner method)": [[10, "econml.dml._rlearner._RLearner.effect_inference", false]], "effect_inference() (econml.dml.causalforestdml method)": [[4, "econml.dml.CausalForestDML.effect_inference", false]], "effect_inference() (econml.dml.dml method)": [[5, "econml.dml.DML.effect_inference", false]], "effect_inference() (econml.dml.kerneldml method)": [[6, "econml.dml.KernelDML.effect_inference", false]], "effect_inference() (econml.dml.lineardml method)": [[7, "econml.dml.LinearDML.effect_inference", false]], "effect_inference() (econml.dml.nonparamdml method)": [[8, "econml.dml.NonParamDML.effect_inference", false]], "effect_inference() (econml.dml.sparselineardml method)": [[9, "econml.dml.SparseLinearDML.effect_inference", false]], "effect_inference() (econml.dr.drlearner method)": [[12, "econml.dr.DRLearner.effect_inference", false]], "effect_inference() (econml.dr.forestdrlearner method)": [[13, "econml.dr.ForestDRLearner.effect_inference", false]], "effect_inference() (econml.dr.lineardrlearner method)": [[14, "econml.dr.LinearDRLearner.effect_inference", false]], "effect_inference() (econml.dr.sparselineardrlearner method)": [[15, "econml.dr.SparseLinearDRLearner.effect_inference", false]], "effect_inference() (econml.federated_learning.federatedestimator method)": [[16, "econml.federated_learning.FederatedEstimator.effect_inference", false]], "effect_inference() (econml.iv.dml.dmliv method)": [[37, "econml.iv.dml.DMLIV.effect_inference", false]], "effect_inference() (econml.iv.dml.nonparamdmliv method)": [[38, "econml.iv.dml.NonParamDMLIV.effect_inference", false]], "effect_inference() (econml.iv.dml.orthoiv method)": [[39, "econml.iv.dml.OrthoIV.effect_inference", false]], "effect_inference() (econml.iv.dr.driv method)": [[40, "econml.iv.dr.DRIV.effect_inference", false]], "effect_inference() (econml.iv.dr.forestdriv method)": [[41, "econml.iv.dr.ForestDRIV.effect_inference", false]], "effect_inference() (econml.iv.dr.intenttotreatdriv method)": [[42, "econml.iv.dr.IntentToTreatDRIV.effect_inference", false]], "effect_inference() (econml.iv.dr.lineardriv method)": [[43, "econml.iv.dr.LinearDRIV.effect_inference", false]], "effect_inference() (econml.iv.dr.linearintenttotreatdriv method)": [[44, "econml.iv.dr.LinearIntentToTreatDRIV.effect_inference", false]], "effect_inference() (econml.iv.dr.sparselineardriv method)": [[45, "econml.iv.dr.SparseLinearDRIV.effect_inference", false]], "effect_inference() (econml.iv.sieve.sievetsls method)": [[48, "econml.iv.sieve.SieveTSLS.effect_inference", false]], "effect_inference() (econml.metalearners.domainadaptationlearner method)": [[49, "econml.metalearners.DomainAdaptationLearner.effect_inference", false]], "effect_inference() (econml.metalearners.slearner method)": [[50, "econml.metalearners.SLearner.effect_inference", false]], "effect_inference() (econml.metalearners.tlearner method)": [[51, "econml.metalearners.TLearner.effect_inference", false]], "effect_inference() (econml.metalearners.xlearner method)": [[52, "econml.metalearners.XLearner.effect_inference", false]], "effect_inference() (econml.orf.dmlorthoforest method)": [[53, "econml.orf.DMLOrthoForest.effect_inference", false]], "effect_inference() (econml.orf.drorthoforest method)": [[54, "econml.orf.DROrthoForest.effect_inference", false]], "effect_inference() (econml.panel.dml.dynamicdml method)": [[55, "econml.panel.dml.DynamicDML.effect_inference", false]], "effect_interval() (econml._cate_estimator.basecateestimator method)": [[0, "econml._cate_estimator.BaseCateEstimator.effect_interval", false]], "effect_interval() (econml._cate_estimator.debiasedlassocateestimatordiscretemixin method)": [[0, "econml._cate_estimator.DebiasedLassoCateEstimatorDiscreteMixin.effect_interval", false]], "effect_interval() (econml._cate_estimator.debiasedlassocateestimatormixin method)": [[0, "econml._cate_estimator.DebiasedLassoCateEstimatorMixin.effect_interval", false]], "effect_interval() (econml._cate_estimator.forestmodelfinalcateestimatordiscretemixin method)": [[0, "econml._cate_estimator.ForestModelFinalCateEstimatorDiscreteMixin.effect_interval", false]], "effect_interval() (econml._cate_estimator.forestmodelfinalcateestimatormixin method)": [[0, "econml._cate_estimator.ForestModelFinalCateEstimatorMixin.effect_interval", false]], "effect_interval() (econml._cate_estimator.linearcateestimator method)": [[0, "econml._cate_estimator.LinearCateEstimator.effect_interval", false]], "effect_interval() (econml._cate_estimator.linearmodelfinalcateestimatordiscretemixin method)": [[0, "econml._cate_estimator.LinearModelFinalCateEstimatorDiscreteMixin.effect_interval", false]], "effect_interval() (econml._cate_estimator.linearmodelfinalcateestimatormixin method)": [[0, "econml._cate_estimator.LinearModelFinalCateEstimatorMixin.effect_interval", false]], "effect_interval() (econml._cate_estimator.statsmodelscateestimatordiscretemixin method)": [[0, "econml._cate_estimator.StatsModelsCateEstimatorDiscreteMixin.effect_interval", false]], "effect_interval() (econml._cate_estimator.statsmodelscateestimatormixin method)": [[0, "econml._cate_estimator.StatsModelsCateEstimatorMixin.effect_interval", false]], "effect_interval() (econml._cate_estimator.treatmentexpansionmixin method)": [[0, "econml._cate_estimator.TreatmentExpansionMixin.effect_interval", false]], "effect_interval() (econml._ortho_learner._ortholearner method)": [[1, "econml._ortho_learner._OrthoLearner.effect_interval", false]], "effect_interval() (econml.dml._rlearner._rlearner method)": [[10, "econml.dml._rlearner._RLearner.effect_interval", false]], "effect_interval() (econml.dml.causalforestdml method)": [[4, "econml.dml.CausalForestDML.effect_interval", false]], "effect_interval() (econml.dml.dml method)": [[5, "econml.dml.DML.effect_interval", false]], "effect_interval() (econml.dml.kerneldml method)": [[6, "econml.dml.KernelDML.effect_interval", false]], "effect_interval() (econml.dml.lineardml method)": [[7, "econml.dml.LinearDML.effect_interval", false]], "effect_interval() (econml.dml.nonparamdml method)": [[8, "econml.dml.NonParamDML.effect_interval", false]], "effect_interval() (econml.dml.sparselineardml method)": [[9, "econml.dml.SparseLinearDML.effect_interval", false]], "effect_interval() (econml.dr.drlearner method)": [[12, "econml.dr.DRLearner.effect_interval", false]], "effect_interval() (econml.dr.forestdrlearner method)": [[13, "econml.dr.ForestDRLearner.effect_interval", false]], "effect_interval() (econml.dr.lineardrlearner method)": [[14, "econml.dr.LinearDRLearner.effect_interval", false]], "effect_interval() (econml.dr.sparselineardrlearner method)": [[15, "econml.dr.SparseLinearDRLearner.effect_interval", false]], "effect_interval() (econml.federated_learning.federatedestimator method)": [[16, "econml.federated_learning.FederatedEstimator.effect_interval", false]], "effect_interval() (econml.iv.dml.dmliv method)": [[37, "econml.iv.dml.DMLIV.effect_interval", false]], "effect_interval() (econml.iv.dml.nonparamdmliv method)": [[38, "econml.iv.dml.NonParamDMLIV.effect_interval", false]], "effect_interval() (econml.iv.dml.orthoiv method)": [[39, "econml.iv.dml.OrthoIV.effect_interval", false]], "effect_interval() (econml.iv.dr.driv method)": [[40, "econml.iv.dr.DRIV.effect_interval", false]], "effect_interval() (econml.iv.dr.forestdriv method)": [[41, "econml.iv.dr.ForestDRIV.effect_interval", false]], "effect_interval() (econml.iv.dr.intenttotreatdriv method)": [[42, "econml.iv.dr.IntentToTreatDRIV.effect_interval", false]], "effect_interval() (econml.iv.dr.lineardriv method)": [[43, "econml.iv.dr.LinearDRIV.effect_interval", false]], "effect_interval() (econml.iv.dr.linearintenttotreatdriv method)": [[44, "econml.iv.dr.LinearIntentToTreatDRIV.effect_interval", false]], "effect_interval() (econml.iv.dr.sparselineardriv method)": [[45, "econml.iv.dr.SparseLinearDRIV.effect_interval", false]], "effect_interval() (econml.iv.sieve.sievetsls method)": [[48, "econml.iv.sieve.SieveTSLS.effect_interval", false]], "effect_interval() (econml.metalearners.domainadaptationlearner method)": [[49, "econml.metalearners.DomainAdaptationLearner.effect_interval", false]], "effect_interval() (econml.metalearners.slearner method)": [[50, "econml.metalearners.SLearner.effect_interval", false]], "effect_interval() (econml.metalearners.tlearner method)": [[51, "econml.metalearners.TLearner.effect_interval", false]], "effect_interval() (econml.metalearners.xlearner method)": [[52, "econml.metalearners.XLearner.effect_interval", false]], "effect_interval() (econml.orf.dmlorthoforest method)": [[53, "econml.orf.DMLOrthoForest.effect_interval", false]], "effect_interval() (econml.orf.drorthoforest method)": [[54, "econml.orf.DROrthoForest.effect_interval", false]], "effect_interval() (econml.panel.dml.dynamicdml method)": [[55, "econml.panel.dml.DynamicDML.effect_interval", false]], "einsum_sparse() (in module econml.utilities)": [[75, "econml.utilities.einsum_sparse", false]], "empiricalinferenceresults (class in econml.inference)": [[26, "econml.inference.EmpiricalInferenceResults", false]], "ensemble() (econml.score.rscorer method)": [[61, "econml.score.RScorer.ensemble", false]], "ensemblecateestimator (class in econml.score)": [[60, "econml.score.EnsembleCateEstimator", false]], "estimators_ (econml.grf.causalforest attribute)": [[17, "econml.grf.CausalForest.estimators_", false]], "estimators_ (econml.grf.causalivforest attribute)": [[18, "econml.grf.CausalIVForest.estimators_", false]], "estimators_ (econml.grf.regressionforest attribute)": [[22, "econml.grf.RegressionForest.estimators_", false]], "evaluate_all() (econml.validate.drtester method)": [[78, "econml.validate.DRTester.evaluate_all", false]], "evaluate_blp() (econml.validate.drtester method)": [[78, "econml.validate.DRTester.evaluate_blp", false]], "evaluate_cal() (econml.validate.drtester method)": [[78, "econml.validate.DRTester.evaluate_cal", false]], "evaluate_uplift() (econml.validate.drtester method)": [[78, "econml.validate.DRTester.evaluate_uplift", false]], "evaluationresults (class in econml.validate)": [[79, "econml.validate.EvaluationResults", false]], "experiment": [[99, "term-EXPERIMENT", true]], "export_graphviz() (econml.cate_interpreter.singletreecateinterpreter method)": [[2, "econml.cate_interpreter.SingleTreeCateInterpreter.export_graphviz", false]], "export_graphviz() (econml.cate_interpreter.singletreepolicyinterpreter method)": [[3, "econml.cate_interpreter.SingleTreePolicyInterpreter.export_graphviz", false]], "export_graphviz() (econml.policy.drpolicyforest method)": [[56, "econml.policy.DRPolicyForest.export_graphviz", false]], "export_graphviz() (econml.policy.drpolicytree method)": [[57, "econml.policy.DRPolicyTree.export_graphviz", false]], "export_graphviz() (econml.policy.policytree method)": [[59, "econml.policy.PolicyTree.export_graphviz", false]], "extra_txt (econml.utilities.summary attribute)": [[75, "econml.utilities.Summary.extra_txt", false]], "feature_importances() (econml.grf._base_grf.basegrf method)": [[23, "econml.grf._base_grf.BaseGRF.feature_importances", false]], "feature_importances() (econml.grf._base_grftree.grftree method)": [[24, "econml.grf._base_grftree.GRFTree.feature_importances", false]], "feature_importances() (econml.grf.causalforest method)": [[17, "econml.grf.CausalForest.feature_importances", false]], "feature_importances() (econml.grf.causalivforest method)": [[18, "econml.grf.CausalIVForest.feature_importances", false]], "feature_importances() (econml.grf.regressionforest method)": [[22, "econml.grf.RegressionForest.feature_importances", false]], "feature_importances() (econml.policy.drpolicyforest method)": [[56, "econml.policy.DRPolicyForest.feature_importances", false]], "feature_importances() (econml.policy.drpolicytree method)": [[57, "econml.policy.DRPolicyTree.feature_importances", false]], "feature_importances() (econml.policy.policyforest method)": [[58, "econml.policy.PolicyForest.feature_importances", false]], "feature_importances() (econml.policy.policytree method)": [[59, "econml.policy.PolicyTree.feature_importances", false]], "feature_importances_ (econml.dml.causalforestdml attribute)": [[4, "econml.dml.CausalForestDML.feature_importances_", false]], "feature_importances_ (econml.grf._base_grftree.grftree attribute)": [[24, "econml.grf._base_grftree.GRFTree.feature_importances_", false]], "feature_importances_ (econml.grf.causalforest attribute)": [[17, "econml.grf.CausalForest.feature_importances_", false]], "feature_importances_ (econml.grf.causalivforest attribute)": [[18, "econml.grf.CausalIVForest.feature_importances_", false]], "feature_importances_ (econml.grf.regressionforest attribute)": [[22, "econml.grf.RegressionForest.feature_importances_", false]], "feature_importances_ (econml.policy.policyforest attribute)": [[58, "econml.policy.PolicyForest.feature_importances_", false]], "feature_importances_ (econml.policy.policytree attribute)": [[59, "econml.policy.PolicyTree.feature_importances_", false]], "feature_names_ (econml.solutions.causal_analysis.causalanalysis attribute)": [[74, "econml.solutions.causal_analysis.CausalAnalysis.feature_names_", false]], "featurizer_ (econml.dr.drlearner property)": [[12, "econml.dr.DRLearner.featurizer_", false]], "featurizer_ (econml.dr.forestdrlearner property)": [[13, "econml.dr.ForestDRLearner.featurizer_", false]], "featurizer_ (econml.dr.lineardrlearner property)": [[14, "econml.dr.LinearDRLearner.featurizer_", false]], "featurizer_ (econml.dr.sparselineardrlearner property)": [[15, "econml.dr.SparseLinearDRLearner.featurizer_", false]], "featurizer_ (econml.iv.dml.orthoiv property)": [[39, "econml.iv.dml.OrthoIV.featurizer_", false]], "featurizer_ (econml.iv.dr.driv property)": [[40, "econml.iv.dr.DRIV.featurizer_", false]], "featurizer_ (econml.iv.dr.forestdriv property)": [[41, "econml.iv.dr.ForestDRIV.featurizer_", false]], "featurizer_ (econml.iv.dr.intenttotreatdriv property)": [[42, "econml.iv.dr.IntentToTreatDRIV.featurizer_", false]], "featurizer_ (econml.iv.dr.lineardriv property)": [[43, "econml.iv.dr.LinearDRIV.featurizer_", false]], "featurizer_ (econml.iv.dr.linearintenttotreatdriv property)": [[44, "econml.iv.dr.LinearIntentToTreatDRIV.featurizer_", false]], "featurizer_ (econml.iv.dr.sparselineardriv property)": [[45, "econml.iv.dr.SparseLinearDRIV.featurizer_", false]], "federatedestimator (class in econml.federated_learning)": [[16, "econml.federated_learning.FederatedEstimator", false]], "filter_none_kwargs() (in module econml.utilities)": [[75, "econml.utilities.filter_none_kwargs", false]], "fit() (econml._cate_estimator.basecateestimator method)": [[0, "econml._cate_estimator.BaseCateEstimator.fit", false]], "fit() (econml._cate_estimator.debiasedlassocateestimatordiscretemixin method)": [[0, "econml._cate_estimator.DebiasedLassoCateEstimatorDiscreteMixin.fit", false]], "fit() (econml._cate_estimator.debiasedlassocateestimatormixin method)": [[0, "econml._cate_estimator.DebiasedLassoCateEstimatorMixin.fit", false]], "fit() (econml._cate_estimator.forestmodelfinalcateestimatordiscretemixin method)": [[0, "econml._cate_estimator.ForestModelFinalCateEstimatorDiscreteMixin.fit", false]], "fit() (econml._cate_estimator.forestmodelfinalcateestimatormixin method)": [[0, "econml._cate_estimator.ForestModelFinalCateEstimatorMixin.fit", false]], "fit() (econml._cate_estimator.linearcateestimator method)": [[0, "econml._cate_estimator.LinearCateEstimator.fit", false]], "fit() (econml._cate_estimator.linearmodelfinalcateestimatordiscretemixin method)": [[0, "econml._cate_estimator.LinearModelFinalCateEstimatorDiscreteMixin.fit", false]], "fit() (econml._cate_estimator.linearmodelfinalcateestimatormixin method)": [[0, "econml._cate_estimator.LinearModelFinalCateEstimatorMixin.fit", false]], "fit() (econml._cate_estimator.statsmodelscateestimatordiscretemixin method)": [[0, "econml._cate_estimator.StatsModelsCateEstimatorDiscreteMixin.fit", false]], "fit() (econml._cate_estimator.statsmodelscateestimatormixin method)": [[0, "econml._cate_estimator.StatsModelsCateEstimatorMixin.fit", false]], "fit() (econml._cate_estimator.treatmentexpansionmixin method)": [[0, "econml._cate_estimator.TreatmentExpansionMixin.fit", false]], "fit() (econml._ortho_learner._ortholearner method)": [[1, "econml._ortho_learner._OrthoLearner.fit", false]], "fit() (econml.dml._rlearner._rlearner method)": [[10, "econml.dml._rlearner._RLearner.fit", false]], "fit() (econml.dml.causalforestdml method)": [[4, "econml.dml.CausalForestDML.fit", false]], "fit() (econml.dml.dml method)": [[5, "econml.dml.DML.fit", false]], "fit() (econml.dml.kerneldml method)": [[6, "econml.dml.KernelDML.fit", false]], "fit() (econml.dml.lineardml method)": [[7, "econml.dml.LinearDML.fit", false]], "fit() (econml.dml.nonparamdml method)": [[8, "econml.dml.NonParamDML.fit", false]], "fit() (econml.dml.sparselineardml method)": [[9, "econml.dml.SparseLinearDML.fit", false]], "fit() (econml.dowhy.dowhywrapper method)": [[11, "econml.dowhy.DoWhyWrapper.fit", false]], "fit() (econml.dr.drlearner method)": [[12, "econml.dr.DRLearner.fit", false]], "fit() (econml.dr.forestdrlearner method)": [[13, "econml.dr.ForestDRLearner.fit", false]], "fit() (econml.dr.lineardrlearner method)": [[14, "econml.dr.LinearDRLearner.fit", false]], "fit() (econml.dr.sparselineardrlearner method)": [[15, "econml.dr.SparseLinearDRLearner.fit", false]], "fit() (econml.federated_learning.federatedestimator method)": [[16, "econml.federated_learning.FederatedEstimator.fit", false]], "fit() (econml.grf._base_grf.basegrf method)": [[23, "econml.grf._base_grf.BaseGRF.fit", false]], "fit() (econml.grf._base_grftree.grftree method)": [[24, "econml.grf._base_grftree.GRFTree.fit", false]], "fit() (econml.grf.causalforest method)": [[17, "econml.grf.CausalForest.fit", false]], "fit() (econml.grf.causalivforest method)": [[18, "econml.grf.CausalIVForest.fit", false]], "fit() (econml.grf.regressionforest method)": [[22, "econml.grf.RegressionForest.fit", false]], "fit() (econml.inference._bootstrap.bootstrapestimator method)": [[36, "econml.inference._bootstrap.BootstrapEstimator.fit", false]], "fit() (econml.inference.bootstrapinference method)": [[25, "econml.inference.BootstrapInference.fit", false]], "fit() (econml.inference.genericmodelfinalinference method)": [[27, "econml.inference.GenericModelFinalInference.fit", false]], "fit() (econml.inference.genericmodelfinalinferencediscrete method)": [[28, "econml.inference.GenericModelFinalInferenceDiscrete.fit", false]], "fit() (econml.inference.genericsingletreatmentmodelfinalinference method)": [[29, "econml.inference.GenericSingleTreatmentModelFinalInference.fit", false]], "fit() (econml.inference.linearmodelfinalinference method)": [[30, "econml.inference.LinearModelFinalInference.fit", false]], "fit() (econml.inference.linearmodelfinalinferencediscrete method)": [[31, "econml.inference.LinearModelFinalInferenceDiscrete.fit", false]], "fit() (econml.inference.statsmodelsinference method)": [[34, "econml.inference.StatsModelsInference.fit", false]], "fit() (econml.inference.statsmodelsinferencediscrete method)": [[35, "econml.inference.StatsModelsInferenceDiscrete.fit", false]], "fit() (econml.iv.dml.dmliv method)": [[37, "econml.iv.dml.DMLIV.fit", false]], "fit() (econml.iv.dml.nonparamdmliv method)": [[38, "econml.iv.dml.NonParamDMLIV.fit", false]], "fit() (econml.iv.dml.orthoiv method)": [[39, "econml.iv.dml.OrthoIV.fit", false]], "fit() (econml.iv.dr.driv method)": [[40, "econml.iv.dr.DRIV.fit", false]], "fit() (econml.iv.dr.forestdriv method)": [[41, "econml.iv.dr.ForestDRIV.fit", false]], "fit() (econml.iv.dr.intenttotreatdriv method)": [[42, "econml.iv.dr.IntentToTreatDRIV.fit", false]], "fit() (econml.iv.dr.lineardriv method)": [[43, "econml.iv.dr.LinearDRIV.fit", false]], "fit() (econml.iv.dr.linearintenttotreatdriv method)": [[44, "econml.iv.dr.LinearIntentToTreatDRIV.fit", false]], "fit() (econml.iv.dr.sparselineardriv method)": [[45, "econml.iv.dr.SparseLinearDRIV.fit", false]], "fit() (econml.iv.sieve.dpolynomialfeatures method)": [[46, "econml.iv.sieve.DPolynomialFeatures.fit", false]], "fit() (econml.iv.sieve.hermitefeatures method)": [[47, "econml.iv.sieve.HermiteFeatures.fit", false]], "fit() (econml.iv.sieve.sievetsls method)": [[48, "econml.iv.sieve.SieveTSLS.fit", false]], "fit() (econml.metalearners.domainadaptationlearner method)": [[49, "econml.metalearners.DomainAdaptationLearner.fit", false]], "fit() (econml.metalearners.slearner method)": [[50, "econml.metalearners.SLearner.fit", false]], "fit() (econml.metalearners.tlearner method)": [[51, "econml.metalearners.TLearner.fit", false]], "fit() (econml.metalearners.xlearner method)": [[52, "econml.metalearners.XLearner.fit", false]], "fit() (econml.orf.dmlorthoforest method)": [[53, "econml.orf.DMLOrthoForest.fit", false]], "fit() (econml.orf.drorthoforest method)": [[54, "econml.orf.DROrthoForest.fit", false]], "fit() (econml.panel.dml.dynamicdml method)": [[55, "econml.panel.dml.DynamicDML.fit", false]], "fit() (econml.policy.drpolicyforest method)": [[56, "econml.policy.DRPolicyForest.fit", false]], "fit() (econml.policy.drpolicytree method)": [[57, "econml.policy.DRPolicyTree.fit", false]], "fit() (econml.policy.policyforest method)": [[58, "econml.policy.PolicyForest.fit", false]], "fit() (econml.policy.policytree method)": [[59, "econml.policy.PolicyTree.fit", false]], "fit() (econml.score.rscorer method)": [[61, "econml.score.RScorer.fit", false]], "fit() (econml.sklearn_extensions.linear_model.debiasedlasso method)": [[62, "econml.sklearn_extensions.linear_model.DebiasedLasso.fit", false]], "fit() (econml.sklearn_extensions.linear_model.multioutputdebiasedlasso method)": [[63, "econml.sklearn_extensions.linear_model.MultiOutputDebiasedLasso.fit", false]], "fit() (econml.sklearn_extensions.linear_model.selectiveregularization method)": [[64, "econml.sklearn_extensions.linear_model.SelectiveRegularization.fit", false]], "fit() (econml.sklearn_extensions.linear_model.statsmodelslinearregression method)": [[65, "econml.sklearn_extensions.linear_model.StatsModelsLinearRegression.fit", false]], "fit() (econml.sklearn_extensions.linear_model.statsmodelsrlm method)": [[66, "econml.sklearn_extensions.linear_model.StatsModelsRLM.fit", false]], "fit() (econml.sklearn_extensions.linear_model.weightedlasso method)": [[67, "econml.sklearn_extensions.linear_model.WeightedLasso.fit", false]], "fit() (econml.sklearn_extensions.linear_model.weightedlassocv method)": [[68, "econml.sklearn_extensions.linear_model.WeightedLassoCV.fit", false]], "fit() (econml.sklearn_extensions.linear_model.weightedmultitasklassocv method)": [[70, "econml.sklearn_extensions.linear_model.WeightedMultiTaskLassoCV.fit", false]], "fit() (econml.solutions.causal_analysis.causalanalysis method)": [[74, "econml.solutions.causal_analysis.CausalAnalysis.fit", false]], "fit() (econml.utilities.identityfeatures method)": [[75, "econml.utilities.IdentityFeatures.fit", false]], "fit() (econml.utilities.multimodelwrapper method)": [[75, "econml.utilities.MultiModelWrapper.fit", false]], "fit() (econml.utilities.weightedmodelwrapper method)": [[75, "econml.utilities.WeightedModelWrapper.fit", false]], "fit_nuisance() (econml.validate.drtester method)": [[78, "econml.validate.DRTester.fit_nuisance", false]], "fit_nuisance_cv() (econml.validate.drtester method)": [[78, "econml.validate.DRTester.fit_nuisance_cv", false]], "fit_nuisance_train() (econml.validate.drtester method)": [[78, "econml.validate.DRTester.fit_nuisance_train", false]], "fit_transform() (econml.iv.sieve.dpolynomialfeatures method)": [[46, "econml.iv.sieve.DPolynomialFeatures.fit_transform", false]], "fit_transform() (econml.iv.sieve.hermitefeatures method)": [[47, "econml.iv.sieve.HermiteFeatures.fit_transform", false]], "fit_transform() (econml.utilities.identityfeatures method)": [[75, "econml.utilities.IdentityFeatures.fit_transform", false]], "forestdriv (class in econml.iv.dr)": [[41, "econml.iv.dr.ForestDRIV", false]], "forestdrlearner (class in econml.dr)": [[13, "econml.dr.ForestDRLearner", false]], "forestmodelfinalcateestimatordiscretemixin (class in econml._cate_estimator)": [[0, "econml._cate_estimator.ForestModelFinalCateEstimatorDiscreteMixin", false]], "forestmodelfinalcateestimatormixin (class in econml._cate_estimator)": [[0, "econml._cate_estimator.ForestModelFinalCateEstimatorMixin", false]], "freq_weight (econml._ortho_learner.cachedvalues attribute)": [[1, "econml._ortho_learner.CachedValues.freq_weight", false]], "genericmodelfinalinference (class in econml.inference)": [[27, "econml.inference.GenericModelFinalInference", false]], "genericmodelfinalinferencediscrete (class in econml.inference)": [[28, "econml.inference.GenericModelFinalInferenceDiscrete", false]], "genericsingletreatmentmodelfinalinference (class in econml.inference)": [[29, "econml.inference.GenericSingleTreatmentModelFinalInference", false]], "get_cate_preds() (econml.validate.drtester method)": [[78, "econml.validate.DRTester.get_cate_preds", false]], "get_cv_splits() (econml.validate.drtester method)": [[78, "econml.validate.DRTester.get_cv_splits", false]], "get_cv_splitter() (econml.validate.drtester method)": [[78, "econml.validate.DRTester.get_cv_splitter", false]], "get_depth() (econml.grf._base_grftree.grftree method)": [[24, "econml.grf._base_grftree.GRFTree.get_depth", false]], "get_depth() (econml.policy.policytree method)": [[59, "econml.policy.PolicyTree.get_depth", false]], "get_feature_names_or_default() (in module econml.utilities)": [[75, "econml.utilities.get_feature_names_or_default", false]], "get_input_columns() (in module econml.utilities)": [[75, "econml.utilities.get_input_columns", false]], "get_metadata_routing() (econml.grf._base_grf.basegrf method)": [[23, "econml.grf._base_grf.BaseGRF.get_metadata_routing", false]], "get_metadata_routing() (econml.grf._base_grftree.grftree method)": [[24, "econml.grf._base_grftree.GRFTree.get_metadata_routing", false]], "get_metadata_routing() (econml.grf.causalforest method)": [[17, "econml.grf.CausalForest.get_metadata_routing", false]], "get_metadata_routing() (econml.grf.causalivforest method)": [[18, "econml.grf.CausalIVForest.get_metadata_routing", false]], "get_metadata_routing() (econml.grf.multioutputgrf method)": [[21, "econml.grf.MultiOutputGRF.get_metadata_routing", false]], "get_metadata_routing() (econml.grf.regressionforest method)": [[22, "econml.grf.RegressionForest.get_metadata_routing", false]], "get_metadata_routing() (econml.policy.policyforest method)": [[58, "econml.policy.PolicyForest.get_metadata_routing", false]], "get_metadata_routing() (econml.policy.policytree method)": [[59, "econml.policy.PolicyTree.get_metadata_routing", false]], "get_metadata_routing() (econml.sklearn_extensions.linear_model.debiasedlasso method)": [[62, "econml.sklearn_extensions.linear_model.DebiasedLasso.get_metadata_routing", false]], "get_metadata_routing() (econml.sklearn_extensions.linear_model.multioutputdebiasedlasso method)": [[63, "econml.sklearn_extensions.linear_model.MultiOutputDebiasedLasso.get_metadata_routing", false]], "get_metadata_routing() (econml.sklearn_extensions.linear_model.statsmodelslinearregression method)": [[65, "econml.sklearn_extensions.linear_model.StatsModelsLinearRegression.get_metadata_routing", false]], "get_metadata_routing() (econml.sklearn_extensions.linear_model.statsmodelsrlm method)": [[66, "econml.sklearn_extensions.linear_model.StatsModelsRLM.get_metadata_routing", false]], "get_metadata_routing() (econml.sklearn_extensions.linear_model.weightedlasso method)": [[67, "econml.sklearn_extensions.linear_model.WeightedLasso.get_metadata_routing", false]], "get_metadata_routing() (econml.sklearn_extensions.linear_model.weightedlassocv method)": [[68, "econml.sklearn_extensions.linear_model.WeightedLassoCV.get_metadata_routing", false]], "get_metadata_routing() (econml.sklearn_extensions.linear_model.weightedmultitasklassocv method)": [[70, "econml.sklearn_extensions.linear_model.WeightedMultiTaskLassoCV.get_metadata_routing", false]], "get_metadata_routing() (econml.sklearn_extensions.model_selection.gridsearchcvlist method)": [[71, "econml.sklearn_extensions.model_selection.GridSearchCVList.get_metadata_routing", false]], "get_n_leaves() (econml.grf._base_grftree.grftree method)": [[24, "econml.grf._base_grftree.GRFTree.get_n_leaves", false]], "get_n_leaves() (econml.policy.policytree method)": [[59, "econml.policy.PolicyTree.get_n_leaves", false]], "get_n_splits() (econml.sklearn_extensions.model_selection.weightedkfold method)": [[72, "econml.sklearn_extensions.model_selection.WeightedKFold.get_n_splits", false]], "get_n_splits() (econml.sklearn_extensions.model_selection.weightedstratifiedkfold method)": [[73, "econml.sklearn_extensions.model_selection.WeightedStratifiedKFold.get_n_splits", false]], "get_params() (econml.grf._base_grf.basegrf method)": [[23, "econml.grf._base_grf.BaseGRF.get_params", false]], "get_params() (econml.grf._base_grftree.grftree method)": [[24, "econml.grf._base_grftree.GRFTree.get_params", false]], "get_params() (econml.grf.causalforest method)": [[17, "econml.grf.CausalForest.get_params", false]], "get_params() (econml.grf.causalivforest method)": [[18, "econml.grf.CausalIVForest.get_params", false]], "get_params() (econml.grf.multioutputgrf method)": [[21, "econml.grf.MultiOutputGRF.get_params", false]], "get_params() (econml.grf.regressionforest method)": [[22, "econml.grf.RegressionForest.get_params", false]], "get_params() (econml.policy.policyforest method)": [[58, "econml.policy.PolicyForest.get_params", false]], "get_params() (econml.policy.policytree method)": [[59, "econml.policy.PolicyTree.get_params", false]], "get_params() (econml.sklearn_extensions.linear_model.debiasedlasso method)": [[62, "econml.sklearn_extensions.linear_model.DebiasedLasso.get_params", false]], "get_params() (econml.sklearn_extensions.linear_model.multioutputdebiasedlasso method)": [[63, "econml.sklearn_extensions.linear_model.MultiOutputDebiasedLasso.get_params", false]], "get_params() (econml.sklearn_extensions.linear_model.statsmodelslinearregression method)": [[65, "econml.sklearn_extensions.linear_model.StatsModelsLinearRegression.get_params", false]], "get_params() (econml.sklearn_extensions.linear_model.statsmodelsrlm method)": [[66, "econml.sklearn_extensions.linear_model.StatsModelsRLM.get_params", false]], "get_params() (econml.sklearn_extensions.linear_model.weightedlasso method)": [[67, "econml.sklearn_extensions.linear_model.WeightedLasso.get_params", false]], "get_params() (econml.sklearn_extensions.linear_model.weightedlassocv method)": [[68, "econml.sklearn_extensions.linear_model.WeightedLassoCV.get_params", false]], "get_params() (econml.sklearn_extensions.linear_model.weightedlassocvwrapper method)": [[69, "econml.sklearn_extensions.linear_model.WeightedLassoCVWrapper.get_params", false]], "get_params() (econml.sklearn_extensions.linear_model.weightedmultitasklassocv method)": [[70, "econml.sklearn_extensions.linear_model.WeightedMultiTaskLassoCV.get_params", false]], "get_params() (econml.sklearn_extensions.model_selection.gridsearchcvlist method)": [[71, "econml.sklearn_extensions.model_selection.GridSearchCVList.get_params", false]], "get_subsample_inds() (econml.grf._base_grf.basegrf method)": [[23, "econml.grf._base_grf.BaseGRF.get_subsample_inds", false]], "get_subsample_inds() (econml.grf.causalforest method)": [[17, "econml.grf.CausalForest.get_subsample_inds", false]], "get_subsample_inds() (econml.grf.causalivforest method)": [[18, "econml.grf.CausalIVForest.get_subsample_inds", false]], "get_subsample_inds() (econml.grf.regressionforest method)": [[22, "econml.grf.RegressionForest.get_subsample_inds", false]], "get_subsample_inds() (econml.policy.policyforest method)": [[58, "econml.policy.PolicyForest.get_subsample_inds", false]], "get_train_test_split_inds() (econml.grf._base_grftree.grftree method)": [[24, "econml.grf._base_grftree.GRFTree.get_train_test_split_inds", false]], "get_train_test_split_inds() (econml.policy.policytree method)": [[59, "econml.policy.PolicyTree.get_train_test_split_inds", false]], "global_causal_effect() (econml.solutions.causal_analysis.causalanalysis method)": [[74, "econml.solutions.causal_analysis.CausalAnalysis.global_causal_effect", false]], "grftree (class in econml.grf._base_grftree)": [[24, "econml.grf._base_grftree.GRFTree", false]], "gridsearchcvlist (class in econml.sklearn_extensions.model_selection)": [[71, "econml.sklearn_extensions.model_selection.GridSearchCVList", false]], "groups (econml._ortho_learner.cachedvalues attribute)": [[1, "econml._ortho_learner.CachedValues.groups", false]], "hermitefeatures (class in econml.iv.sieve)": [[47, "econml.iv.sieve.HermiteFeatures", false]], "heterogeneity_model (econml.solutions.causal_analysis.causalanalysis attribute)": [[74, "econml.solutions.causal_analysis.CausalAnalysis.heterogeneity_model", false]], "honest_ (econml.grf._base_grftree.grftree attribute)": [[24, "econml.grf._base_grftree.GRFTree.honest_", false]], "honest_ (econml.policy.policytree attribute)": [[59, "econml.policy.PolicyTree.honest_", false]], "hstack() (in module econml.utilities)": [[75, "econml.utilities.hstack", false]], "identityfeatures (class in econml.utilities)": [[75, "econml.utilities.IdentityFeatures", false]], "index() (econml._ortho_learner.cachedvalues method)": [[1, "econml._ortho_learner.CachedValues.index", false]], "individualized_policy() (econml.solutions.causal_analysis.causalanalysis method)": [[74, "econml.solutions.causal_analysis.CausalAnalysis.individualized_policy", false]], "init() (econml.grf._base_grftree.grftree method)": [[24, "econml.grf._base_grftree.GRFTree.init", false]], "instrument": [[99, "term-INSTRUMENT", true]], "intenttotreatdriv (class in econml.iv.dr)": [[42, "econml.iv.dr.IntentToTreatDRIV", false]], "intercept_ (econml._cate_estimator.debiasedlassocateestimatormixin property)": [[0, "econml._cate_estimator.DebiasedLassoCateEstimatorMixin.intercept_", false]], "intercept_ (econml._cate_estimator.linearmodelfinalcateestimatormixin property)": [[0, "econml._cate_estimator.LinearModelFinalCateEstimatorMixin.intercept_", false]], "intercept_ (econml._cate_estimator.statsmodelscateestimatormixin property)": [[0, "econml._cate_estimator.StatsModelsCateEstimatorMixin.intercept_", false]], "intercept_ (econml.dml.dml property)": [[5, "econml.dml.DML.intercept_", false]], "intercept_ (econml.dml.kerneldml property)": [[6, "econml.dml.KernelDML.intercept_", false]], "intercept_ (econml.dml.lineardml property)": [[7, "econml.dml.LinearDML.intercept_", false]], "intercept_ (econml.dml.sparselineardml property)": [[9, "econml.dml.SparseLinearDML.intercept_", false]], "intercept_ (econml.iv.dml.dmliv property)": [[37, "econml.iv.dml.DMLIV.intercept_", false]], "intercept_ (econml.iv.dml.orthoiv property)": [[39, "econml.iv.dml.OrthoIV.intercept_", false]], "intercept_ (econml.iv.dr.lineardriv property)": [[43, "econml.iv.dr.LinearDRIV.intercept_", false]], "intercept_ (econml.iv.dr.linearintenttotreatdriv property)": [[44, "econml.iv.dr.LinearIntentToTreatDRIV.intercept_", false]], "intercept_ (econml.iv.dr.sparselineardriv property)": [[45, "econml.iv.dr.SparseLinearDRIV.intercept_", false]], "intercept_ (econml.panel.dml.dynamicdml property)": [[55, "econml.panel.dml.DynamicDML.intercept_", false]], "intercept_ (econml.sklearn_extensions.linear_model.debiasedlasso attribute)": [[62, "econml.sklearn_extensions.linear_model.DebiasedLasso.intercept_", false]], "intercept_ (econml.sklearn_extensions.linear_model.multioutputdebiasedlasso attribute)": [[63, "econml.sklearn_extensions.linear_model.MultiOutputDebiasedLasso.intercept_", false]], "intercept_ (econml.sklearn_extensions.linear_model.selectiveregularization attribute)": [[64, "econml.sklearn_extensions.linear_model.SelectiveRegularization.intercept_", false]], "intercept_ (econml.sklearn_extensions.linear_model.statsmodelslinearregression property)": [[65, "econml.sklearn_extensions.linear_model.StatsModelsLinearRegression.intercept_", false]], "intercept_ (econml.sklearn_extensions.linear_model.statsmodelsrlm property)": [[66, "econml.sklearn_extensions.linear_model.StatsModelsRLM.intercept_", false]], "intercept_ (econml.sklearn_extensions.linear_model.weightedlasso attribute)": [[67, "econml.sklearn_extensions.linear_model.WeightedLasso.intercept_", false]], "intercept_() (econml._cate_estimator.debiasedlassocateestimatordiscretemixin method)": [[0, "econml._cate_estimator.DebiasedLassoCateEstimatorDiscreteMixin.intercept_", false]], "intercept_() (econml._cate_estimator.linearmodelfinalcateestimatordiscretemixin method)": [[0, "econml._cate_estimator.LinearModelFinalCateEstimatorDiscreteMixin.intercept_", false]], "intercept_() (econml._cate_estimator.statsmodelscateestimatordiscretemixin method)": [[0, "econml._cate_estimator.StatsModelsCateEstimatorDiscreteMixin.intercept_", false]], "intercept_() (econml.dr.lineardrlearner method)": [[14, "econml.dr.LinearDRLearner.intercept_", false]], "intercept_() (econml.dr.sparselineardrlearner method)": [[15, "econml.dr.SparseLinearDRLearner.intercept_", false]], "intercept__inference() (econml._cate_estimator.debiasedlassocateestimatordiscretemixin method)": [[0, "econml._cate_estimator.DebiasedLassoCateEstimatorDiscreteMixin.intercept__inference", false]], "intercept__inference() (econml._cate_estimator.debiasedlassocateestimatormixin method)": [[0, "econml._cate_estimator.DebiasedLassoCateEstimatorMixin.intercept__inference", false]], "intercept__inference() (econml._cate_estimator.linearmodelfinalcateestimatordiscretemixin method)": [[0, "econml._cate_estimator.LinearModelFinalCateEstimatorDiscreteMixin.intercept__inference", false]], "intercept__inference() (econml._cate_estimator.linearmodelfinalcateestimatormixin method)": [[0, "econml._cate_estimator.LinearModelFinalCateEstimatorMixin.intercept__inference", false]], "intercept__inference() (econml._cate_estimator.statsmodelscateestimatordiscretemixin method)": [[0, "econml._cate_estimator.StatsModelsCateEstimatorDiscreteMixin.intercept__inference", false]], "intercept__inference() (econml._cate_estimator.statsmodelscateestimatormixin method)": [[0, "econml._cate_estimator.StatsModelsCateEstimatorMixin.intercept__inference", false]], "intercept__inference() (econml.dml.dml method)": [[5, "econml.dml.DML.intercept__inference", false]], "intercept__inference() (econml.dml.kerneldml method)": [[6, "econml.dml.KernelDML.intercept__inference", false]], "intercept__inference() (econml.dml.lineardml method)": [[7, "econml.dml.LinearDML.intercept__inference", false]], "intercept__inference() (econml.dml.sparselineardml method)": [[9, "econml.dml.SparseLinearDML.intercept__inference", false]], "intercept__inference() (econml.dr.lineardrlearner method)": [[14, "econml.dr.LinearDRLearner.intercept__inference", false]], "intercept__inference() (econml.dr.sparselineardrlearner method)": [[15, "econml.dr.SparseLinearDRLearner.intercept__inference", false]], "intercept__inference() (econml.iv.dml.orthoiv method)": [[39, "econml.iv.dml.OrthoIV.intercept__inference", false]], "intercept__inference() (econml.iv.dr.lineardriv method)": [[43, "econml.iv.dr.LinearDRIV.intercept__inference", false]], "intercept__inference() (econml.iv.dr.linearintenttotreatdriv method)": [[44, "econml.iv.dr.LinearIntentToTreatDRIV.intercept__inference", false]], "intercept__inference() (econml.iv.dr.sparselineardriv method)": [[45, "econml.iv.dr.SparseLinearDRIV.intercept__inference", false]], "intercept__inference() (econml.panel.dml.dynamicdml method)": [[55, "econml.panel.dml.DynamicDML.intercept__inference", false]], "intercept__interval() (econml._cate_estimator.debiasedlassocateestimatordiscretemixin method)": [[0, "econml._cate_estimator.DebiasedLassoCateEstimatorDiscreteMixin.intercept__interval", false]], "intercept__interval() (econml._cate_estimator.debiasedlassocateestimatormixin method)": [[0, "econml._cate_estimator.DebiasedLassoCateEstimatorMixin.intercept__interval", false]], "intercept__interval() (econml._cate_estimator.linearmodelfinalcateestimatordiscretemixin method)": [[0, "econml._cate_estimator.LinearModelFinalCateEstimatorDiscreteMixin.intercept__interval", false]], "intercept__interval() (econml._cate_estimator.linearmodelfinalcateestimatormixin method)": [[0, "econml._cate_estimator.LinearModelFinalCateEstimatorMixin.intercept__interval", false]], "intercept__interval() (econml._cate_estimator.statsmodelscateestimatordiscretemixin method)": [[0, "econml._cate_estimator.StatsModelsCateEstimatorDiscreteMixin.intercept__interval", false]], "intercept__interval() (econml._cate_estimator.statsmodelscateestimatormixin method)": [[0, "econml._cate_estimator.StatsModelsCateEstimatorMixin.intercept__interval", false]], "intercept__interval() (econml.dml.dml method)": [[5, "econml.dml.DML.intercept__interval", false]], "intercept__interval() (econml.dml.kerneldml method)": [[6, "econml.dml.KernelDML.intercept__interval", false]], "intercept__interval() (econml.dml.lineardml method)": [[7, "econml.dml.LinearDML.intercept__interval", false]], "intercept__interval() (econml.dml.sparselineardml method)": [[9, "econml.dml.SparseLinearDML.intercept__interval", false]], "intercept__interval() (econml.dr.lineardrlearner method)": [[14, "econml.dr.LinearDRLearner.intercept__interval", false]], "intercept__interval() (econml.dr.sparselineardrlearner method)": [[15, "econml.dr.SparseLinearDRLearner.intercept__interval", false]], "intercept__interval() (econml.iv.dml.orthoiv method)": [[39, "econml.iv.dml.OrthoIV.intercept__interval", false]], "intercept__interval() (econml.iv.dr.lineardriv method)": [[43, "econml.iv.dr.LinearDRIV.intercept__interval", false]], "intercept__interval() (econml.iv.dr.linearintenttotreatdriv method)": [[44, "econml.iv.dr.LinearIntentToTreatDRIV.intercept__interval", false]], "intercept__interval() (econml.iv.dr.sparselineardriv method)": [[45, "econml.iv.dr.SparseLinearDRIV.intercept__interval", false]], "intercept__interval() (econml.panel.dml.dynamicdml method)": [[55, "econml.panel.dml.DynamicDML.intercept__interval", false]], "intercept__interval() (econml.sklearn_extensions.linear_model.debiasedlasso method)": [[62, "econml.sklearn_extensions.linear_model.DebiasedLasso.intercept__interval", false]], "intercept__interval() (econml.sklearn_extensions.linear_model.multioutputdebiasedlasso method)": [[63, "econml.sklearn_extensions.linear_model.MultiOutputDebiasedLasso.intercept__interval", false]], "intercept__interval() (econml.sklearn_extensions.linear_model.statsmodelslinearregression method)": [[65, "econml.sklearn_extensions.linear_model.StatsModelsLinearRegression.intercept__interval", false]], "intercept__interval() (econml.sklearn_extensions.linear_model.statsmodelsrlm method)": [[66, "econml.sklearn_extensions.linear_model.StatsModelsRLM.intercept__interval", false]], "intercept_stderr_ (econml.sklearn_extensions.linear_model.debiasedlasso attribute)": [[62, "econml.sklearn_extensions.linear_model.DebiasedLasso.intercept_stderr_", false]], "intercept_stderr_ (econml.sklearn_extensions.linear_model.multioutputdebiasedlasso attribute)": [[63, "econml.sklearn_extensions.linear_model.MultiOutputDebiasedLasso.intercept_stderr_", false]], "intercept_stderr_ (econml.sklearn_extensions.linear_model.statsmodelslinearregression property)": [[65, "econml.sklearn_extensions.linear_model.StatsModelsLinearRegression.intercept_stderr_", false]], "intercept_stderr_ (econml.sklearn_extensions.linear_model.statsmodelsrlm property)": [[66, "econml.sklearn_extensions.linear_model.StatsModelsRLM.intercept_stderr_", false]], "interpret() (econml.cate_interpreter.singletreecateinterpreter method)": [[2, "econml.cate_interpreter.SingleTreeCateInterpreter.interpret", false]], "interpret() (econml.cate_interpreter.singletreepolicyinterpreter method)": [[3, "econml.cate_interpreter.SingleTreePolicyInterpreter.interpret", false]], "inverse_onehot() (in module econml.utilities)": [[75, "econml.utilities.inverse_onehot", false]], "iscoo() (in module econml.utilities)": [[75, "econml.utilities.iscoo", false]], "issparse() (in module econml.utilities)": [[75, "econml.utilities.issparse", false]], "jacify_featurizer() (in module econml.utilities)": [[75, "econml.utilities.jacify_featurizer", false]], "kerneldml (class in econml.dml)": [[6, "econml.dml.KernelDML", false]], "linear heterogeneity": [[99, "term-LINEAR-HETEROGENEITY", true]], "linear treatment effects": [[99, "term-LINEAR-TREATMENT-EFFECTS", true]], "linearcateestimator (class in econml._cate_estimator)": [[0, "econml._cate_estimator.LinearCateEstimator", false]], "lineardml (class in econml.dml)": [[7, "econml.dml.LinearDML", false]], "lineardriv (class in econml.iv.dr)": [[43, "econml.iv.dr.LinearDRIV", false]], "lineardrlearner (class in econml.dr)": [[14, "econml.dr.LinearDRLearner", false]], "linearintenttotreatdriv (class in econml.iv.dr)": [[44, "econml.iv.dr.LinearIntentToTreatDRIV", false]], "linearmodelfinalcateestimatordiscretemixin (class in econml._cate_estimator)": [[0, "econml._cate_estimator.LinearModelFinalCateEstimatorDiscreteMixin", false]], "linearmodelfinalcateestimatormixin (class in econml._cate_estimator)": [[0, "econml._cate_estimator.LinearModelFinalCateEstimatorMixin", false]], "linearmodelfinalinference (class in econml.inference)": [[30, "econml.inference.LinearModelFinalInference", false]], "linearmodelfinalinferencediscrete (class in econml.inference)": [[31, "econml.inference.LinearModelFinalInferenceDiscrete", false]], "linearmomentgrfcriterion (class in econml.grf)": [[19, "econml.grf.LinearMomentGRFCriterion", false]], "linearmomentgrfcriterionmse (class in econml.grf)": [[20, "econml.grf.LinearMomentGRFCriterionMSE", false]], "local_causal_effect() (econml.solutions.causal_analysis.causalanalysis method)": [[74, "econml.solutions.causal_analysis.CausalAnalysis.local_causal_effect", false]], "marginal_ate() (econml._cate_estimator.basecateestimator method)": [[0, "econml._cate_estimator.BaseCateEstimator.marginal_ate", false]], "marginal_ate() (econml._cate_estimator.debiasedlassocateestimatordiscretemixin method)": [[0, "econml._cate_estimator.DebiasedLassoCateEstimatorDiscreteMixin.marginal_ate", false]], "marginal_ate() (econml._cate_estimator.debiasedlassocateestimatormixin method)": [[0, "econml._cate_estimator.DebiasedLassoCateEstimatorMixin.marginal_ate", false]], "marginal_ate() (econml._cate_estimator.forestmodelfinalcateestimatordiscretemixin method)": [[0, "econml._cate_estimator.ForestModelFinalCateEstimatorDiscreteMixin.marginal_ate", false]], "marginal_ate() (econml._cate_estimator.forestmodelfinalcateestimatormixin method)": [[0, "econml._cate_estimator.ForestModelFinalCateEstimatorMixin.marginal_ate", false]], "marginal_ate() (econml._cate_estimator.linearcateestimator method)": [[0, "econml._cate_estimator.LinearCateEstimator.marginal_ate", false]], "marginal_ate() (econml._cate_estimator.linearmodelfinalcateestimatordiscretemixin method)": [[0, "econml._cate_estimator.LinearModelFinalCateEstimatorDiscreteMixin.marginal_ate", false]], "marginal_ate() (econml._cate_estimator.linearmodelfinalcateestimatormixin method)": [[0, "econml._cate_estimator.LinearModelFinalCateEstimatorMixin.marginal_ate", false]], "marginal_ate() (econml._cate_estimator.statsmodelscateestimatordiscretemixin method)": [[0, "econml._cate_estimator.StatsModelsCateEstimatorDiscreteMixin.marginal_ate", false]], "marginal_ate() (econml._cate_estimator.statsmodelscateestimatormixin method)": [[0, "econml._cate_estimator.StatsModelsCateEstimatorMixin.marginal_ate", false]], "marginal_ate() (econml._cate_estimator.treatmentexpansionmixin method)": [[0, "econml._cate_estimator.TreatmentExpansionMixin.marginal_ate", false]], "marginal_ate() (econml._ortho_learner._ortholearner method)": [[1, "econml._ortho_learner._OrthoLearner.marginal_ate", false]], "marginal_ate() (econml.dml._rlearner._rlearner method)": [[10, "econml.dml._rlearner._RLearner.marginal_ate", false]], "marginal_ate() (econml.dml.causalforestdml method)": [[4, "econml.dml.CausalForestDML.marginal_ate", false]], "marginal_ate() (econml.dml.dml method)": [[5, "econml.dml.DML.marginal_ate", false]], "marginal_ate() (econml.dml.kerneldml method)": [[6, "econml.dml.KernelDML.marginal_ate", false]], "marginal_ate() (econml.dml.lineardml method)": [[7, "econml.dml.LinearDML.marginal_ate", false]], "marginal_ate() (econml.dml.nonparamdml method)": [[8, "econml.dml.NonParamDML.marginal_ate", false]], "marginal_ate() (econml.dml.sparselineardml method)": [[9, "econml.dml.SparseLinearDML.marginal_ate", false]], "marginal_ate() (econml.dr.drlearner method)": [[12, "econml.dr.DRLearner.marginal_ate", false]], "marginal_ate() (econml.dr.forestdrlearner method)": [[13, "econml.dr.ForestDRLearner.marginal_ate", false]], "marginal_ate() (econml.dr.lineardrlearner method)": [[14, "econml.dr.LinearDRLearner.marginal_ate", false]], "marginal_ate() (econml.dr.sparselineardrlearner method)": [[15, "econml.dr.SparseLinearDRLearner.marginal_ate", false]], "marginal_ate() (econml.federated_learning.federatedestimator method)": [[16, "econml.federated_learning.FederatedEstimator.marginal_ate", false]], "marginal_ate() (econml.iv.dml.dmliv method)": [[37, "econml.iv.dml.DMLIV.marginal_ate", false]], "marginal_ate() (econml.iv.dml.nonparamdmliv method)": [[38, "econml.iv.dml.NonParamDMLIV.marginal_ate", false]], "marginal_ate() (econml.iv.dml.orthoiv method)": [[39, "econml.iv.dml.OrthoIV.marginal_ate", false]], "marginal_ate() (econml.iv.dr.driv method)": [[40, "econml.iv.dr.DRIV.marginal_ate", false]], "marginal_ate() (econml.iv.dr.forestdriv method)": [[41, "econml.iv.dr.ForestDRIV.marginal_ate", false]], "marginal_ate() (econml.iv.dr.intenttotreatdriv method)": [[42, "econml.iv.dr.IntentToTreatDRIV.marginal_ate", false]], "marginal_ate() (econml.iv.dr.lineardriv method)": [[43, "econml.iv.dr.LinearDRIV.marginal_ate", false]], "marginal_ate() (econml.iv.dr.linearintenttotreatdriv method)": [[44, "econml.iv.dr.LinearIntentToTreatDRIV.marginal_ate", false]], "marginal_ate() (econml.iv.dr.sparselineardriv method)": [[45, "econml.iv.dr.SparseLinearDRIV.marginal_ate", false]], "marginal_ate() (econml.iv.sieve.sievetsls method)": [[48, "econml.iv.sieve.SieveTSLS.marginal_ate", false]], "marginal_ate() (econml.metalearners.domainadaptationlearner method)": [[49, "econml.metalearners.DomainAdaptationLearner.marginal_ate", false]], "marginal_ate() (econml.metalearners.slearner method)": [[50, "econml.metalearners.SLearner.marginal_ate", false]], "marginal_ate() (econml.metalearners.tlearner method)": [[51, "econml.metalearners.TLearner.marginal_ate", false]], "marginal_ate() (econml.metalearners.xlearner method)": [[52, "econml.metalearners.XLearner.marginal_ate", false]], "marginal_ate() (econml.orf.dmlorthoforest method)": [[53, "econml.orf.DMLOrthoForest.marginal_ate", false]], "marginal_ate() (econml.orf.drorthoforest method)": [[54, "econml.orf.DROrthoForest.marginal_ate", false]], "marginal_ate() (econml.panel.dml.dynamicdml method)": [[55, "econml.panel.dml.DynamicDML.marginal_ate", false]], "marginal_ate_inference() (econml._cate_estimator.basecateestimator method)": [[0, "econml._cate_estimator.BaseCateEstimator.marginal_ate_inference", false]], "marginal_ate_inference() (econml._cate_estimator.debiasedlassocateestimatordiscretemixin method)": [[0, "econml._cate_estimator.DebiasedLassoCateEstimatorDiscreteMixin.marginal_ate_inference", false]], "marginal_ate_inference() (econml._cate_estimator.debiasedlassocateestimatormixin method)": [[0, "econml._cate_estimator.DebiasedLassoCateEstimatorMixin.marginal_ate_inference", false]], "marginal_ate_inference() (econml._cate_estimator.forestmodelfinalcateestimatordiscretemixin method)": [[0, "econml._cate_estimator.ForestModelFinalCateEstimatorDiscreteMixin.marginal_ate_inference", false]], "marginal_ate_inference() (econml._cate_estimator.forestmodelfinalcateestimatormixin method)": [[0, "econml._cate_estimator.ForestModelFinalCateEstimatorMixin.marginal_ate_inference", false]], "marginal_ate_inference() (econml._cate_estimator.linearcateestimator method)": [[0, "econml._cate_estimator.LinearCateEstimator.marginal_ate_inference", false]], "marginal_ate_inference() (econml._cate_estimator.linearmodelfinalcateestimatordiscretemixin method)": [[0, "econml._cate_estimator.LinearModelFinalCateEstimatorDiscreteMixin.marginal_ate_inference", false]], "marginal_ate_inference() (econml._cate_estimator.linearmodelfinalcateestimatormixin method)": [[0, "econml._cate_estimator.LinearModelFinalCateEstimatorMixin.marginal_ate_inference", false]], "marginal_ate_inference() (econml._cate_estimator.statsmodelscateestimatordiscretemixin method)": [[0, "econml._cate_estimator.StatsModelsCateEstimatorDiscreteMixin.marginal_ate_inference", false]], "marginal_ate_inference() (econml._cate_estimator.statsmodelscateestimatormixin method)": [[0, "econml._cate_estimator.StatsModelsCateEstimatorMixin.marginal_ate_inference", false]], "marginal_ate_inference() (econml._cate_estimator.treatmentexpansionmixin method)": [[0, "econml._cate_estimator.TreatmentExpansionMixin.marginal_ate_inference", false]], "marginal_ate_inference() (econml._ortho_learner._ortholearner method)": [[1, "econml._ortho_learner._OrthoLearner.marginal_ate_inference", false]], "marginal_ate_inference() (econml.dml._rlearner._rlearner method)": [[10, "econml.dml._rlearner._RLearner.marginal_ate_inference", false]], "marginal_ate_inference() (econml.dml.causalforestdml method)": [[4, "econml.dml.CausalForestDML.marginal_ate_inference", false]], "marginal_ate_inference() (econml.dml.dml method)": [[5, "econml.dml.DML.marginal_ate_inference", false]], "marginal_ate_inference() (econml.dml.kerneldml method)": [[6, "econml.dml.KernelDML.marginal_ate_inference", false]], "marginal_ate_inference() (econml.dml.lineardml method)": [[7, "econml.dml.LinearDML.marginal_ate_inference", false]], "marginal_ate_inference() (econml.dml.nonparamdml method)": [[8, "econml.dml.NonParamDML.marginal_ate_inference", false]], "marginal_ate_inference() (econml.dml.sparselineardml method)": [[9, "econml.dml.SparseLinearDML.marginal_ate_inference", false]], "marginal_ate_inference() (econml.dr.drlearner method)": [[12, "econml.dr.DRLearner.marginal_ate_inference", false]], "marginal_ate_inference() (econml.dr.forestdrlearner method)": [[13, "econml.dr.ForestDRLearner.marginal_ate_inference", false]], "marginal_ate_inference() (econml.dr.lineardrlearner method)": [[14, "econml.dr.LinearDRLearner.marginal_ate_inference", false]], "marginal_ate_inference() (econml.dr.sparselineardrlearner method)": [[15, "econml.dr.SparseLinearDRLearner.marginal_ate_inference", false]], "marginal_ate_inference() (econml.federated_learning.federatedestimator method)": [[16, "econml.federated_learning.FederatedEstimator.marginal_ate_inference", false]], "marginal_ate_inference() (econml.iv.dml.dmliv method)": [[37, "econml.iv.dml.DMLIV.marginal_ate_inference", false]], "marginal_ate_inference() (econml.iv.dml.nonparamdmliv method)": [[38, "econml.iv.dml.NonParamDMLIV.marginal_ate_inference", false]], "marginal_ate_inference() (econml.iv.dml.orthoiv method)": [[39, "econml.iv.dml.OrthoIV.marginal_ate_inference", false]], "marginal_ate_inference() (econml.iv.dr.driv method)": [[40, "econml.iv.dr.DRIV.marginal_ate_inference", false]], "marginal_ate_inference() (econml.iv.dr.forestdriv method)": [[41, "econml.iv.dr.ForestDRIV.marginal_ate_inference", false]], "marginal_ate_inference() (econml.iv.dr.intenttotreatdriv method)": [[42, "econml.iv.dr.IntentToTreatDRIV.marginal_ate_inference", false]], "marginal_ate_inference() (econml.iv.dr.lineardriv method)": [[43, "econml.iv.dr.LinearDRIV.marginal_ate_inference", false]], "marginal_ate_inference() (econml.iv.dr.linearintenttotreatdriv method)": [[44, "econml.iv.dr.LinearIntentToTreatDRIV.marginal_ate_inference", false]], "marginal_ate_inference() (econml.iv.dr.sparselineardriv method)": [[45, "econml.iv.dr.SparseLinearDRIV.marginal_ate_inference", false]], "marginal_ate_inference() (econml.iv.sieve.sievetsls method)": [[48, "econml.iv.sieve.SieveTSLS.marginal_ate_inference", false]], "marginal_ate_inference() (econml.metalearners.domainadaptationlearner method)": [[49, "econml.metalearners.DomainAdaptationLearner.marginal_ate_inference", false]], "marginal_ate_inference() (econml.metalearners.slearner method)": [[50, "econml.metalearners.SLearner.marginal_ate_inference", false]], "marginal_ate_inference() (econml.metalearners.tlearner method)": [[51, "econml.metalearners.TLearner.marginal_ate_inference", false]], "marginal_ate_inference() (econml.metalearners.xlearner method)": [[52, "econml.metalearners.XLearner.marginal_ate_inference", false]], "marginal_ate_inference() (econml.orf.dmlorthoforest method)": [[53, "econml.orf.DMLOrthoForest.marginal_ate_inference", false]], "marginal_ate_inference() (econml.orf.drorthoforest method)": [[54, "econml.orf.DROrthoForest.marginal_ate_inference", false]], "marginal_ate_inference() (econml.panel.dml.dynamicdml method)": [[55, "econml.panel.dml.DynamicDML.marginal_ate_inference", false]], "marginal_ate_interval() (econml._cate_estimator.basecateestimator method)": [[0, "econml._cate_estimator.BaseCateEstimator.marginal_ate_interval", false]], "marginal_ate_interval() (econml._cate_estimator.debiasedlassocateestimatordiscretemixin method)": [[0, "econml._cate_estimator.DebiasedLassoCateEstimatorDiscreteMixin.marginal_ate_interval", false]], "marginal_ate_interval() (econml._cate_estimator.debiasedlassocateestimatormixin method)": [[0, "econml._cate_estimator.DebiasedLassoCateEstimatorMixin.marginal_ate_interval", false]], "marginal_ate_interval() (econml._cate_estimator.forestmodelfinalcateestimatordiscretemixin method)": [[0, "econml._cate_estimator.ForestModelFinalCateEstimatorDiscreteMixin.marginal_ate_interval", false]], "marginal_ate_interval() (econml._cate_estimator.forestmodelfinalcateestimatormixin method)": [[0, "econml._cate_estimator.ForestModelFinalCateEstimatorMixin.marginal_ate_interval", false]], "marginal_ate_interval() (econml._cate_estimator.linearcateestimator method)": [[0, "econml._cate_estimator.LinearCateEstimator.marginal_ate_interval", false]], "marginal_ate_interval() (econml._cate_estimator.linearmodelfinalcateestimatordiscretemixin method)": [[0, "econml._cate_estimator.LinearModelFinalCateEstimatorDiscreteMixin.marginal_ate_interval", false]], "marginal_ate_interval() (econml._cate_estimator.linearmodelfinalcateestimatormixin method)": [[0, "econml._cate_estimator.LinearModelFinalCateEstimatorMixin.marginal_ate_interval", false]], "marginal_ate_interval() (econml._cate_estimator.statsmodelscateestimatordiscretemixin method)": [[0, "econml._cate_estimator.StatsModelsCateEstimatorDiscreteMixin.marginal_ate_interval", false]], "marginal_ate_interval() (econml._cate_estimator.statsmodelscateestimatormixin method)": [[0, "econml._cate_estimator.StatsModelsCateEstimatorMixin.marginal_ate_interval", false]], "marginal_ate_interval() (econml._cate_estimator.treatmentexpansionmixin method)": [[0, "econml._cate_estimator.TreatmentExpansionMixin.marginal_ate_interval", false]], "marginal_ate_interval() (econml._ortho_learner._ortholearner method)": [[1, "econml._ortho_learner._OrthoLearner.marginal_ate_interval", false]], "marginal_ate_interval() (econml.dml._rlearner._rlearner method)": [[10, "econml.dml._rlearner._RLearner.marginal_ate_interval", false]], "marginal_ate_interval() (econml.dml.causalforestdml method)": [[4, "econml.dml.CausalForestDML.marginal_ate_interval", false]], "marginal_ate_interval() (econml.dml.dml method)": [[5, "econml.dml.DML.marginal_ate_interval", false]], "marginal_ate_interval() (econml.dml.kerneldml method)": [[6, "econml.dml.KernelDML.marginal_ate_interval", false]], "marginal_ate_interval() (econml.dml.lineardml method)": [[7, "econml.dml.LinearDML.marginal_ate_interval", false]], "marginal_ate_interval() (econml.dml.nonparamdml method)": [[8, "econml.dml.NonParamDML.marginal_ate_interval", false]], "marginal_ate_interval() (econml.dml.sparselineardml method)": [[9, "econml.dml.SparseLinearDML.marginal_ate_interval", false]], "marginal_ate_interval() (econml.dr.drlearner method)": [[12, "econml.dr.DRLearner.marginal_ate_interval", false]], "marginal_ate_interval() (econml.dr.forestdrlearner method)": [[13, "econml.dr.ForestDRLearner.marginal_ate_interval", false]], "marginal_ate_interval() (econml.dr.lineardrlearner method)": [[14, "econml.dr.LinearDRLearner.marginal_ate_interval", false]], "marginal_ate_interval() (econml.dr.sparselineardrlearner method)": [[15, "econml.dr.SparseLinearDRLearner.marginal_ate_interval", false]], "marginal_ate_interval() (econml.federated_learning.federatedestimator method)": [[16, "econml.federated_learning.FederatedEstimator.marginal_ate_interval", false]], "marginal_ate_interval() (econml.iv.dml.dmliv method)": [[37, "econml.iv.dml.DMLIV.marginal_ate_interval", false]], "marginal_ate_interval() (econml.iv.dml.nonparamdmliv method)": [[38, "econml.iv.dml.NonParamDMLIV.marginal_ate_interval", false]], "marginal_ate_interval() (econml.iv.dml.orthoiv method)": [[39, "econml.iv.dml.OrthoIV.marginal_ate_interval", false]], "marginal_ate_interval() (econml.iv.dr.driv method)": [[40, "econml.iv.dr.DRIV.marginal_ate_interval", false]], "marginal_ate_interval() (econml.iv.dr.forestdriv method)": [[41, "econml.iv.dr.ForestDRIV.marginal_ate_interval", false]], "marginal_ate_interval() (econml.iv.dr.intenttotreatdriv method)": [[42, "econml.iv.dr.IntentToTreatDRIV.marginal_ate_interval", false]], "marginal_ate_interval() (econml.iv.dr.lineardriv method)": [[43, "econml.iv.dr.LinearDRIV.marginal_ate_interval", false]], "marginal_ate_interval() (econml.iv.dr.linearintenttotreatdriv method)": [[44, "econml.iv.dr.LinearIntentToTreatDRIV.marginal_ate_interval", false]], "marginal_ate_interval() (econml.iv.dr.sparselineardriv method)": [[45, "econml.iv.dr.SparseLinearDRIV.marginal_ate_interval", false]], "marginal_ate_interval() (econml.iv.sieve.sievetsls method)": [[48, "econml.iv.sieve.SieveTSLS.marginal_ate_interval", false]], "marginal_ate_interval() (econml.metalearners.domainadaptationlearner method)": [[49, "econml.metalearners.DomainAdaptationLearner.marginal_ate_interval", false]], "marginal_ate_interval() (econml.metalearners.slearner method)": [[50, "econml.metalearners.SLearner.marginal_ate_interval", false]], "marginal_ate_interval() (econml.metalearners.tlearner method)": [[51, "econml.metalearners.TLearner.marginal_ate_interval", false]], "marginal_ate_interval() (econml.metalearners.xlearner method)": [[52, "econml.metalearners.XLearner.marginal_ate_interval", false]], "marginal_ate_interval() (econml.orf.dmlorthoforest method)": [[53, "econml.orf.DMLOrthoForest.marginal_ate_interval", false]], "marginal_ate_interval() (econml.orf.drorthoforest method)": [[54, "econml.orf.DROrthoForest.marginal_ate_interval", false]], "marginal_ate_interval() (econml.panel.dml.dynamicdml method)": [[55, "econml.panel.dml.DynamicDML.marginal_ate_interval", false]], "marginal_effect() (econml._cate_estimator.basecateestimator method)": [[0, "econml._cate_estimator.BaseCateEstimator.marginal_effect", false]], "marginal_effect() (econml._cate_estimator.debiasedlassocateestimatordiscretemixin method)": [[0, "econml._cate_estimator.DebiasedLassoCateEstimatorDiscreteMixin.marginal_effect", false]], "marginal_effect() (econml._cate_estimator.debiasedlassocateestimatormixin method)": [[0, "econml._cate_estimator.DebiasedLassoCateEstimatorMixin.marginal_effect", false]], "marginal_effect() (econml._cate_estimator.forestmodelfinalcateestimatordiscretemixin method)": [[0, "econml._cate_estimator.ForestModelFinalCateEstimatorDiscreteMixin.marginal_effect", false]], "marginal_effect() (econml._cate_estimator.forestmodelfinalcateestimatormixin method)": [[0, "econml._cate_estimator.ForestModelFinalCateEstimatorMixin.marginal_effect", false]], "marginal_effect() (econml._cate_estimator.linearcateestimator method)": [[0, "econml._cate_estimator.LinearCateEstimator.marginal_effect", false]], "marginal_effect() (econml._cate_estimator.linearmodelfinalcateestimatordiscretemixin method)": [[0, "econml._cate_estimator.LinearModelFinalCateEstimatorDiscreteMixin.marginal_effect", false]], "marginal_effect() (econml._cate_estimator.linearmodelfinalcateestimatormixin method)": [[0, "econml._cate_estimator.LinearModelFinalCateEstimatorMixin.marginal_effect", false]], "marginal_effect() (econml._cate_estimator.statsmodelscateestimatordiscretemixin method)": [[0, "econml._cate_estimator.StatsModelsCateEstimatorDiscreteMixin.marginal_effect", false]], "marginal_effect() (econml._cate_estimator.statsmodelscateestimatormixin method)": [[0, "econml._cate_estimator.StatsModelsCateEstimatorMixin.marginal_effect", false]], "marginal_effect() (econml._cate_estimator.treatmentexpansionmixin method)": [[0, "econml._cate_estimator.TreatmentExpansionMixin.marginal_effect", false]], "marginal_effect() (econml._ortho_learner._ortholearner method)": [[1, "econml._ortho_learner._OrthoLearner.marginal_effect", false]], "marginal_effect() (econml.dml._rlearner._rlearner method)": [[10, "econml.dml._rlearner._RLearner.marginal_effect", false]], "marginal_effect() (econml.dml.causalforestdml method)": [[4, "econml.dml.CausalForestDML.marginal_effect", false]], "marginal_effect() (econml.dml.dml method)": [[5, "econml.dml.DML.marginal_effect", false]], "marginal_effect() (econml.dml.kerneldml method)": [[6, "econml.dml.KernelDML.marginal_effect", false]], "marginal_effect() (econml.dml.lineardml method)": [[7, "econml.dml.LinearDML.marginal_effect", false]], "marginal_effect() (econml.dml.nonparamdml method)": [[8, "econml.dml.NonParamDML.marginal_effect", false]], "marginal_effect() (econml.dml.sparselineardml method)": [[9, "econml.dml.SparseLinearDML.marginal_effect", false]], "marginal_effect() (econml.dr.drlearner method)": [[12, "econml.dr.DRLearner.marginal_effect", false]], "marginal_effect() (econml.dr.forestdrlearner method)": [[13, "econml.dr.ForestDRLearner.marginal_effect", false]], "marginal_effect() (econml.dr.lineardrlearner method)": [[14, "econml.dr.LinearDRLearner.marginal_effect", false]], "marginal_effect() (econml.dr.sparselineardrlearner method)": [[15, "econml.dr.SparseLinearDRLearner.marginal_effect", false]], "marginal_effect() (econml.federated_learning.federatedestimator method)": [[16, "econml.federated_learning.FederatedEstimator.marginal_effect", false]], "marginal_effect() (econml.iv.dml.dmliv method)": [[37, "econml.iv.dml.DMLIV.marginal_effect", false]], "marginal_effect() (econml.iv.dml.nonparamdmliv method)": [[38, "econml.iv.dml.NonParamDMLIV.marginal_effect", false]], "marginal_effect() (econml.iv.dml.orthoiv method)": [[39, "econml.iv.dml.OrthoIV.marginal_effect", false]], "marginal_effect() (econml.iv.dr.driv method)": [[40, "econml.iv.dr.DRIV.marginal_effect", false]], "marginal_effect() (econml.iv.dr.forestdriv method)": [[41, "econml.iv.dr.ForestDRIV.marginal_effect", false]], "marginal_effect() (econml.iv.dr.intenttotreatdriv method)": [[42, "econml.iv.dr.IntentToTreatDRIV.marginal_effect", false]], "marginal_effect() (econml.iv.dr.lineardriv method)": [[43, "econml.iv.dr.LinearDRIV.marginal_effect", false]], "marginal_effect() (econml.iv.dr.linearintenttotreatdriv method)": [[44, "econml.iv.dr.LinearIntentToTreatDRIV.marginal_effect", false]], "marginal_effect() (econml.iv.dr.sparselineardriv method)": [[45, "econml.iv.dr.SparseLinearDRIV.marginal_effect", false]], "marginal_effect() (econml.iv.sieve.sievetsls method)": [[48, "econml.iv.sieve.SieveTSLS.marginal_effect", false]], "marginal_effect() (econml.metalearners.domainadaptationlearner method)": [[49, "econml.metalearners.DomainAdaptationLearner.marginal_effect", false]], "marginal_effect() (econml.metalearners.slearner method)": [[50, "econml.metalearners.SLearner.marginal_effect", false]], "marginal_effect() (econml.metalearners.tlearner method)": [[51, "econml.metalearners.TLearner.marginal_effect", false]], "marginal_effect() (econml.metalearners.xlearner method)": [[52, "econml.metalearners.XLearner.marginal_effect", false]], "marginal_effect() (econml.orf.dmlorthoforest method)": [[53, "econml.orf.DMLOrthoForest.marginal_effect", false]], "marginal_effect() (econml.orf.drorthoforest method)": [[54, "econml.orf.DROrthoForest.marginal_effect", false]], "marginal_effect() (econml.panel.dml.dynamicdml method)": [[55, "econml.panel.dml.DynamicDML.marginal_effect", false]], "marginal_effect() (econml.score.ensemblecateestimator method)": [[60, "econml.score.EnsembleCateEstimator.marginal_effect", false]], "marginal_effect_inference() (econml._cate_estimator.basecateestimator method)": [[0, "econml._cate_estimator.BaseCateEstimator.marginal_effect_inference", false]], "marginal_effect_inference() (econml._cate_estimator.debiasedlassocateestimatordiscretemixin method)": [[0, "econml._cate_estimator.DebiasedLassoCateEstimatorDiscreteMixin.marginal_effect_inference", false]], "marginal_effect_inference() (econml._cate_estimator.debiasedlassocateestimatormixin method)": [[0, "econml._cate_estimator.DebiasedLassoCateEstimatorMixin.marginal_effect_inference", false]], "marginal_effect_inference() (econml._cate_estimator.forestmodelfinalcateestimatordiscretemixin method)": [[0, "econml._cate_estimator.ForestModelFinalCateEstimatorDiscreteMixin.marginal_effect_inference", false]], "marginal_effect_inference() (econml._cate_estimator.forestmodelfinalcateestimatormixin method)": [[0, "econml._cate_estimator.ForestModelFinalCateEstimatorMixin.marginal_effect_inference", false]], "marginal_effect_inference() (econml._cate_estimator.linearcateestimator method)": [[0, "econml._cate_estimator.LinearCateEstimator.marginal_effect_inference", false]], "marginal_effect_inference() (econml._cate_estimator.linearmodelfinalcateestimatordiscretemixin method)": [[0, "econml._cate_estimator.LinearModelFinalCateEstimatorDiscreteMixin.marginal_effect_inference", false]], "marginal_effect_inference() (econml._cate_estimator.linearmodelfinalcateestimatormixin method)": [[0, "econml._cate_estimator.LinearModelFinalCateEstimatorMixin.marginal_effect_inference", false]], "marginal_effect_inference() (econml._cate_estimator.statsmodelscateestimatordiscretemixin method)": [[0, "econml._cate_estimator.StatsModelsCateEstimatorDiscreteMixin.marginal_effect_inference", false]], "marginal_effect_inference() (econml._cate_estimator.statsmodelscateestimatormixin method)": [[0, "econml._cate_estimator.StatsModelsCateEstimatorMixin.marginal_effect_inference", false]], "marginal_effect_inference() (econml._cate_estimator.treatmentexpansionmixin method)": [[0, "econml._cate_estimator.TreatmentExpansionMixin.marginal_effect_inference", false]], "marginal_effect_inference() (econml._ortho_learner._ortholearner method)": [[1, "econml._ortho_learner._OrthoLearner.marginal_effect_inference", false]], "marginal_effect_inference() (econml.dml._rlearner._rlearner method)": [[10, "econml.dml._rlearner._RLearner.marginal_effect_inference", false]], "marginal_effect_inference() (econml.dml.causalforestdml method)": [[4, "econml.dml.CausalForestDML.marginal_effect_inference", false]], "marginal_effect_inference() (econml.dml.dml method)": [[5, "econml.dml.DML.marginal_effect_inference", false]], "marginal_effect_inference() (econml.dml.kerneldml method)": [[6, "econml.dml.KernelDML.marginal_effect_inference", false]], "marginal_effect_inference() (econml.dml.lineardml method)": [[7, "econml.dml.LinearDML.marginal_effect_inference", false]], "marginal_effect_inference() (econml.dml.nonparamdml method)": [[8, "econml.dml.NonParamDML.marginal_effect_inference", false]], "marginal_effect_inference() (econml.dml.sparselineardml method)": [[9, "econml.dml.SparseLinearDML.marginal_effect_inference", false]], "marginal_effect_inference() (econml.dr.drlearner method)": [[12, "econml.dr.DRLearner.marginal_effect_inference", false]], "marginal_effect_inference() (econml.dr.forestdrlearner method)": [[13, "econml.dr.ForestDRLearner.marginal_effect_inference", false]], "marginal_effect_inference() (econml.dr.lineardrlearner method)": [[14, "econml.dr.LinearDRLearner.marginal_effect_inference", false]], "marginal_effect_inference() (econml.dr.sparselineardrlearner method)": [[15, "econml.dr.SparseLinearDRLearner.marginal_effect_inference", false]], "marginal_effect_inference() (econml.federated_learning.federatedestimator method)": [[16, "econml.federated_learning.FederatedEstimator.marginal_effect_inference", false]], "marginal_effect_inference() (econml.iv.dml.dmliv method)": [[37, "econml.iv.dml.DMLIV.marginal_effect_inference", false]], "marginal_effect_inference() (econml.iv.dml.nonparamdmliv method)": [[38, "econml.iv.dml.NonParamDMLIV.marginal_effect_inference", false]], "marginal_effect_inference() (econml.iv.dml.orthoiv method)": [[39, "econml.iv.dml.OrthoIV.marginal_effect_inference", false]], "marginal_effect_inference() (econml.iv.dr.driv method)": [[40, "econml.iv.dr.DRIV.marginal_effect_inference", false]], "marginal_effect_inference() (econml.iv.dr.forestdriv method)": [[41, "econml.iv.dr.ForestDRIV.marginal_effect_inference", false]], "marginal_effect_inference() (econml.iv.dr.intenttotreatdriv method)": [[42, "econml.iv.dr.IntentToTreatDRIV.marginal_effect_inference", false]], "marginal_effect_inference() (econml.iv.dr.lineardriv method)": [[43, "econml.iv.dr.LinearDRIV.marginal_effect_inference", false]], "marginal_effect_inference() (econml.iv.dr.linearintenttotreatdriv method)": [[44, "econml.iv.dr.LinearIntentToTreatDRIV.marginal_effect_inference", false]], "marginal_effect_inference() (econml.iv.dr.sparselineardriv method)": [[45, "econml.iv.dr.SparseLinearDRIV.marginal_effect_inference", false]], "marginal_effect_inference() (econml.iv.sieve.sievetsls method)": [[48, "econml.iv.sieve.SieveTSLS.marginal_effect_inference", false]], "marginal_effect_inference() (econml.metalearners.domainadaptationlearner method)": [[49, "econml.metalearners.DomainAdaptationLearner.marginal_effect_inference", false]], "marginal_effect_inference() (econml.metalearners.slearner method)": [[50, "econml.metalearners.SLearner.marginal_effect_inference", false]], "marginal_effect_inference() (econml.metalearners.tlearner method)": [[51, "econml.metalearners.TLearner.marginal_effect_inference", false]], "marginal_effect_inference() (econml.metalearners.xlearner method)": [[52, "econml.metalearners.XLearner.marginal_effect_inference", false]], "marginal_effect_inference() (econml.orf.dmlorthoforest method)": [[53, "econml.orf.DMLOrthoForest.marginal_effect_inference", false]], "marginal_effect_inference() (econml.orf.drorthoforest method)": [[54, "econml.orf.DROrthoForest.marginal_effect_inference", false]], "marginal_effect_inference() (econml.panel.dml.dynamicdml method)": [[55, "econml.panel.dml.DynamicDML.marginal_effect_inference", false]], "marginal_effect_interval() (econml._cate_estimator.basecateestimator method)": [[0, "econml._cate_estimator.BaseCateEstimator.marginal_effect_interval", false]], "marginal_effect_interval() (econml._cate_estimator.debiasedlassocateestimatordiscretemixin method)": [[0, "econml._cate_estimator.DebiasedLassoCateEstimatorDiscreteMixin.marginal_effect_interval", false]], "marginal_effect_interval() (econml._cate_estimator.debiasedlassocateestimatormixin method)": [[0, "econml._cate_estimator.DebiasedLassoCateEstimatorMixin.marginal_effect_interval", false]], "marginal_effect_interval() (econml._cate_estimator.forestmodelfinalcateestimatordiscretemixin method)": [[0, "econml._cate_estimator.ForestModelFinalCateEstimatorDiscreteMixin.marginal_effect_interval", false]], "marginal_effect_interval() (econml._cate_estimator.forestmodelfinalcateestimatormixin method)": [[0, "econml._cate_estimator.ForestModelFinalCateEstimatorMixin.marginal_effect_interval", false]], "marginal_effect_interval() (econml._cate_estimator.linearcateestimator method)": [[0, "econml._cate_estimator.LinearCateEstimator.marginal_effect_interval", false]], "marginal_effect_interval() (econml._cate_estimator.linearmodelfinalcateestimatordiscretemixin method)": [[0, "econml._cate_estimator.LinearModelFinalCateEstimatorDiscreteMixin.marginal_effect_interval", false]], "marginal_effect_interval() (econml._cate_estimator.linearmodelfinalcateestimatormixin method)": [[0, "econml._cate_estimator.LinearModelFinalCateEstimatorMixin.marginal_effect_interval", false]], "marginal_effect_interval() (econml._cate_estimator.statsmodelscateestimatordiscretemixin method)": [[0, "econml._cate_estimator.StatsModelsCateEstimatorDiscreteMixin.marginal_effect_interval", false]], "marginal_effect_interval() (econml._cate_estimator.statsmodelscateestimatormixin method)": [[0, "econml._cate_estimator.StatsModelsCateEstimatorMixin.marginal_effect_interval", false]], "marginal_effect_interval() (econml._cate_estimator.treatmentexpansionmixin method)": [[0, "econml._cate_estimator.TreatmentExpansionMixin.marginal_effect_interval", false]], "marginal_effect_interval() (econml._ortho_learner._ortholearner method)": [[1, "econml._ortho_learner._OrthoLearner.marginal_effect_interval", false]], "marginal_effect_interval() (econml.dml._rlearner._rlearner method)": [[10, "econml.dml._rlearner._RLearner.marginal_effect_interval", false]], "marginal_effect_interval() (econml.dml.causalforestdml method)": [[4, "econml.dml.CausalForestDML.marginal_effect_interval", false]], "marginal_effect_interval() (econml.dml.dml method)": [[5, "econml.dml.DML.marginal_effect_interval", false]], "marginal_effect_interval() (econml.dml.kerneldml method)": [[6, "econml.dml.KernelDML.marginal_effect_interval", false]], "marginal_effect_interval() (econml.dml.lineardml method)": [[7, "econml.dml.LinearDML.marginal_effect_interval", false]], "marginal_effect_interval() (econml.dml.nonparamdml method)": [[8, "econml.dml.NonParamDML.marginal_effect_interval", false]], "marginal_effect_interval() (econml.dml.sparselineardml method)": [[9, "econml.dml.SparseLinearDML.marginal_effect_interval", false]], "marginal_effect_interval() (econml.dr.drlearner method)": [[12, "econml.dr.DRLearner.marginal_effect_interval", false]], "marginal_effect_interval() (econml.dr.forestdrlearner method)": [[13, "econml.dr.ForestDRLearner.marginal_effect_interval", false]], "marginal_effect_interval() (econml.dr.lineardrlearner method)": [[14, "econml.dr.LinearDRLearner.marginal_effect_interval", false]], "marginal_effect_interval() (econml.dr.sparselineardrlearner method)": [[15, "econml.dr.SparseLinearDRLearner.marginal_effect_interval", false]], "marginal_effect_interval() (econml.federated_learning.federatedestimator method)": [[16, "econml.federated_learning.FederatedEstimator.marginal_effect_interval", false]], "marginal_effect_interval() (econml.iv.dml.dmliv method)": [[37, "econml.iv.dml.DMLIV.marginal_effect_interval", false]], "marginal_effect_interval() (econml.iv.dml.nonparamdmliv method)": [[38, "econml.iv.dml.NonParamDMLIV.marginal_effect_interval", false]], "marginal_effect_interval() (econml.iv.dml.orthoiv method)": [[39, "econml.iv.dml.OrthoIV.marginal_effect_interval", false]], "marginal_effect_interval() (econml.iv.dr.driv method)": [[40, "econml.iv.dr.DRIV.marginal_effect_interval", false]], "marginal_effect_interval() (econml.iv.dr.forestdriv method)": [[41, "econml.iv.dr.ForestDRIV.marginal_effect_interval", false]], "marginal_effect_interval() (econml.iv.dr.intenttotreatdriv method)": [[42, "econml.iv.dr.IntentToTreatDRIV.marginal_effect_interval", false]], "marginal_effect_interval() (econml.iv.dr.lineardriv method)": [[43, "econml.iv.dr.LinearDRIV.marginal_effect_interval", false]], "marginal_effect_interval() (econml.iv.dr.linearintenttotreatdriv method)": [[44, "econml.iv.dr.LinearIntentToTreatDRIV.marginal_effect_interval", false]], "marginal_effect_interval() (econml.iv.dr.sparselineardriv method)": [[45, "econml.iv.dr.SparseLinearDRIV.marginal_effect_interval", false]], "marginal_effect_interval() (econml.iv.sieve.sievetsls method)": [[48, "econml.iv.sieve.SieveTSLS.marginal_effect_interval", false]], "marginal_effect_interval() (econml.metalearners.domainadaptationlearner method)": [[49, "econml.metalearners.DomainAdaptationLearner.marginal_effect_interval", false]], "marginal_effect_interval() (econml.metalearners.slearner method)": [[50, "econml.metalearners.SLearner.marginal_effect_interval", false]], "marginal_effect_interval() (econml.metalearners.tlearner method)": [[51, "econml.metalearners.TLearner.marginal_effect_interval", false]], "marginal_effect_interval() (econml.metalearners.xlearner method)": [[52, "econml.metalearners.XLearner.marginal_effect_interval", false]], "marginal_effect_interval() (econml.orf.dmlorthoforest method)": [[53, "econml.orf.DMLOrthoForest.marginal_effect_interval", false]], "marginal_effect_interval() (econml.orf.drorthoforest method)": [[54, "econml.orf.DROrthoForest.marginal_effect_interval", false]], "marginal_effect_interval() (econml.panel.dml.dynamicdml method)": [[55, "econml.panel.dml.DynamicDML.marginal_effect_interval", false]], "max_features_ (econml.grf._base_grftree.grftree attribute)": [[24, "econml.grf._base_grftree.GRFTree.max_features_", false]], "max_features_ (econml.policy.policytree attribute)": [[59, "econml.policy.PolicyTree.max_features_", false]], "mean_point (econml.inference.populationsummaryresults property)": [[33, "econml.inference.PopulationSummaryResults.mean_point", false]], "missingmodule (class in econml.utilities)": [[75, "econml.utilities.MissingModule", false]], "model_cate (econml.dml.causalforestdml property)": [[4, "econml.dml.CausalForestDML.model_cate", false]], "model_cate (econml.dml.dml property)": [[5, "econml.dml.DML.model_cate", false]], "model_cate (econml.dml.kerneldml property)": [[6, "econml.dml.KernelDML.model_cate", false]], "model_cate (econml.dml.lineardml property)": [[7, "econml.dml.LinearDML.model_cate", false]], "model_cate (econml.dml.nonparamdml property)": [[8, "econml.dml.NonParamDML.model_cate", false]], "model_cate (econml.dml.sparselineardml property)": [[9, "econml.dml.SparseLinearDML.model_cate", false]], "model_cate (econml.iv.dml.dmliv property)": [[37, "econml.iv.dml.DMLIV.model_cate", false]], "model_cate (econml.iv.dml.nonparamdmliv property)": [[38, "econml.iv.dml.NonParamDMLIV.model_cate", false]], "model_cate (econml.iv.dml.orthoiv property)": [[39, "econml.iv.dml.OrthoIV.model_cate", false]], "model_cate (econml.iv.dr.driv property)": [[40, "econml.iv.dr.DRIV.model_cate", false]], "model_cate (econml.iv.dr.forestdriv property)": [[41, "econml.iv.dr.ForestDRIV.model_cate", false]], "model_cate (econml.iv.dr.intenttotreatdriv property)": [[42, "econml.iv.dr.IntentToTreatDRIV.model_cate", false]], "model_cate (econml.iv.dr.lineardriv property)": [[43, "econml.iv.dr.LinearDRIV.model_cate", false]], "model_cate (econml.iv.dr.linearintenttotreatdriv property)": [[44, "econml.iv.dr.LinearIntentToTreatDRIV.model_cate", false]], "model_cate (econml.iv.dr.sparselineardriv property)": [[45, "econml.iv.dr.SparseLinearDRIV.model_cate", false]], "model_cate() (econml.dr.drlearner method)": [[12, "econml.dr.DRLearner.model_cate", false]], "model_cate() (econml.dr.forestdrlearner method)": [[13, "econml.dr.ForestDRLearner.model_cate", false]], "model_cate() (econml.dr.lineardrlearner method)": [[14, "econml.dr.LinearDRLearner.model_cate", false]], "model_cate() (econml.dr.sparselineardrlearner method)": [[15, "econml.dr.SparseLinearDRLearner.model_cate", false]], "models_nuisance_ (econml._ortho_learner._ortholearner attribute)": [[1, "econml._ortho_learner._OrthoLearner.models_nuisance_", false]], "models_prel_model_effect (econml.iv.dr.driv property)": [[40, "econml.iv.dr.DRIV.models_prel_model_effect", false]], "models_prel_model_effect (econml.iv.dr.forestdriv property)": [[41, "econml.iv.dr.ForestDRIV.models_prel_model_effect", false]], "models_prel_model_effect (econml.iv.dr.intenttotreatdriv property)": [[42, "econml.iv.dr.IntentToTreatDRIV.models_prel_model_effect", false]], "models_prel_model_effect (econml.iv.dr.lineardriv property)": [[43, "econml.iv.dr.LinearDRIV.models_prel_model_effect", false]], "models_prel_model_effect (econml.iv.dr.linearintenttotreatdriv property)": [[44, "econml.iv.dr.LinearIntentToTreatDRIV.models_prel_model_effect", false]], "models_prel_model_effect (econml.iv.dr.sparselineardriv property)": [[45, "econml.iv.dr.SparseLinearDRIV.models_prel_model_effect", false]], "models_propensity (econml.dr.drlearner property)": [[12, "econml.dr.DRLearner.models_propensity", false]], "models_propensity (econml.dr.forestdrlearner property)": [[13, "econml.dr.ForestDRLearner.models_propensity", false]], "models_propensity (econml.dr.lineardrlearner property)": [[14, "econml.dr.LinearDRLearner.models_propensity", false]], "models_propensity (econml.dr.sparselineardrlearner property)": [[15, "econml.dr.SparseLinearDRLearner.models_propensity", false]], "models_regression (econml.dr.drlearner property)": [[12, "econml.dr.DRLearner.models_regression", false]], "models_regression (econml.dr.forestdrlearner property)": [[13, "econml.dr.ForestDRLearner.models_regression", false]], "models_regression (econml.dr.lineardrlearner property)": [[14, "econml.dr.LinearDRLearner.models_regression", false]], "models_regression (econml.dr.sparselineardrlearner property)": [[15, "econml.dr.SparseLinearDRLearner.models_regression", false]], "models_t (econml.dml._rlearner._rlearner attribute)": [[10, "econml.dml._rlearner._RLearner.models_t", false]], "models_t (econml.dml.causalforestdml property)": [[4, "econml.dml.CausalForestDML.models_t", false]], "models_t (econml.dml.dml property)": [[5, "econml.dml.DML.models_t", false]], "models_t (econml.dml.kerneldml property)": [[6, "econml.dml.KernelDML.models_t", false]], "models_t (econml.dml.lineardml property)": [[7, "econml.dml.LinearDML.models_t", false]], "models_t (econml.dml.nonparamdml property)": [[8, "econml.dml.NonParamDML.models_t", false]], "models_t (econml.dml.sparselineardml property)": [[9, "econml.dml.SparseLinearDML.models_t", false]], "models_t_xw (econml.iv.dml.dmliv property)": [[37, "econml.iv.dml.DMLIV.models_t_xw", false]], "models_t_xw (econml.iv.dml.nonparamdmliv property)": [[38, "econml.iv.dml.NonParamDMLIV.models_t_xw", false]], "models_t_xw (econml.iv.dml.orthoiv property)": [[39, "econml.iv.dml.OrthoIV.models_t_xw", false]], "models_t_xw (econml.iv.dr.driv property)": [[40, "econml.iv.dr.DRIV.models_t_xw", false]], "models_t_xw (econml.iv.dr.forestdriv property)": [[41, "econml.iv.dr.ForestDRIV.models_t_xw", false]], "models_t_xw (econml.iv.dr.lineardriv property)": [[43, "econml.iv.dr.LinearDRIV.models_t_xw", false]], "models_t_xw (econml.iv.dr.sparselineardriv property)": [[45, "econml.iv.dr.SparseLinearDRIV.models_t_xw", false]], "models_t_xwz (econml.iv.dml.dmliv property)": [[37, "econml.iv.dml.DMLIV.models_t_xwz", false]], "models_t_xwz (econml.iv.dml.nonparamdmliv property)": [[38, "econml.iv.dml.NonParamDMLIV.models_t_xwz", false]], "models_t_xwz (econml.iv.dml.orthoiv property)": [[39, "econml.iv.dml.OrthoIV.models_t_xwz", false]], "models_t_xwz (econml.iv.dr.driv property)": [[40, "econml.iv.dr.DRIV.models_t_xwz", false]], "models_t_xwz (econml.iv.dr.forestdriv property)": [[41, "econml.iv.dr.ForestDRIV.models_t_xwz", false]], "models_t_xwz (econml.iv.dr.intenttotreatdriv property)": [[42, "econml.iv.dr.IntentToTreatDRIV.models_t_xwz", false]], "models_t_xwz (econml.iv.dr.lineardriv property)": [[43, "econml.iv.dr.LinearDRIV.models_t_xwz", false]], "models_t_xwz (econml.iv.dr.linearintenttotreatdriv property)": [[44, "econml.iv.dr.LinearIntentToTreatDRIV.models_t_xwz", false]], "models_t_xwz (econml.iv.dr.sparselineardriv property)": [[45, "econml.iv.dr.SparseLinearDRIV.models_t_xwz", false]], "models_tz_xw (econml.iv.dr.driv property)": [[40, "econml.iv.dr.DRIV.models_tz_xw", false]], "models_tz_xw (econml.iv.dr.forestdriv property)": [[41, "econml.iv.dr.ForestDRIV.models_tz_xw", false]], "models_tz_xw (econml.iv.dr.lineardriv property)": [[43, "econml.iv.dr.LinearDRIV.models_tz_xw", false]], "models_tz_xw (econml.iv.dr.sparselineardriv property)": [[45, "econml.iv.dr.SparseLinearDRIV.models_tz_xw", false]], "models_y (econml.dml._rlearner._rlearner attribute)": [[10, "econml.dml._rlearner._RLearner.models_y", false]], "models_y (econml.dml.causalforestdml property)": [[4, "econml.dml.CausalForestDML.models_y", false]], "models_y (econml.dml.dml property)": [[5, "econml.dml.DML.models_y", false]], "models_y (econml.dml.kerneldml property)": [[6, "econml.dml.KernelDML.models_y", false]], "models_y (econml.dml.lineardml property)": [[7, "econml.dml.LinearDML.models_y", false]], "models_y (econml.dml.nonparamdml property)": [[8, "econml.dml.NonParamDML.models_y", false]], "models_y (econml.dml.sparselineardml property)": [[9, "econml.dml.SparseLinearDML.models_y", false]], "models_y_xw (econml.iv.dml.dmliv property)": [[37, "econml.iv.dml.DMLIV.models_y_xw", false]], "models_y_xw (econml.iv.dml.nonparamdmliv property)": [[38, "econml.iv.dml.NonParamDMLIV.models_y_xw", false]], "models_y_xw (econml.iv.dml.orthoiv property)": [[39, "econml.iv.dml.OrthoIV.models_y_xw", false]], "models_y_xw (econml.iv.dr.driv property)": [[40, "econml.iv.dr.DRIV.models_y_xw", false]], "models_y_xw (econml.iv.dr.forestdriv property)": [[41, "econml.iv.dr.ForestDRIV.models_y_xw", false]], "models_y_xw (econml.iv.dr.intenttotreatdriv property)": [[42, "econml.iv.dr.IntentToTreatDRIV.models_y_xw", false]], "models_y_xw (econml.iv.dr.lineardriv property)": [[43, "econml.iv.dr.LinearDRIV.models_y_xw", false]], "models_y_xw (econml.iv.dr.linearintenttotreatdriv property)": [[44, "econml.iv.dr.LinearIntentToTreatDRIV.models_y_xw", false]], "models_y_xw (econml.iv.dr.sparselineardriv property)": [[45, "econml.iv.dr.SparseLinearDRIV.models_y_xw", false]], "models_z_xw (econml.iv.dml.orthoiv property)": [[39, "econml.iv.dml.OrthoIV.models_z_xw", false]], "models_z_xw (econml.iv.dr.driv property)": [[40, "econml.iv.dr.DRIV.models_z_xw", false]], "models_z_xw (econml.iv.dr.forestdriv property)": [[41, "econml.iv.dr.ForestDRIV.models_z_xw", false]], "models_z_xw (econml.iv.dr.lineardriv property)": [[43, "econml.iv.dr.LinearDRIV.models_z_xw", false]], "models_z_xw (econml.iv.dr.sparselineardriv property)": [[45, "econml.iv.dr.SparseLinearDRIV.models_z_xw", false]], "module": [[0, "module-econml._cate_estimator", false], [1, "module-econml._ortho_learner", false], [10, "module-econml.dml._rlearner", false], [36, "module-econml.inference._bootstrap", false], [75, "module-econml.utilities", false]], "moment_and_mean_gradient_estimator_func() (econml.orf.drorthoforest static method)": [[54, "econml.orf.DROrthoForest.moment_and_mean_gradient_estimator_func", false]], "multimodelwrapper (class in econml.utilities)": [[75, "econml.utilities.MultiModelWrapper", false]], "multioutputdebiasedlasso (class in econml.sklearn_extensions.linear_model)": [[63, "econml.sklearn_extensions.linear_model.MultiOutputDebiasedLasso", false]], "multioutputgrf (class in econml.grf)": [[21, "econml.grf.MultiOutputGRF", false]], "multitask_model_cate (econml.dr.drlearner property)": [[12, "econml.dr.DRLearner.multitask_model_cate", false]], "multitask_model_cate (econml.dr.lineardrlearner property)": [[14, "econml.dr.LinearDRLearner.multitask_model_cate", false]], "multitask_model_cate (econml.dr.sparselineardrlearner property)": [[15, "econml.dr.SparseLinearDRLearner.multitask_model_cate", false]], "multitask_model_cate() (econml.dr.forestdrlearner method)": [[13, "econml.dr.ForestDRLearner.multitask_model_cate", false]], "n_features_ (econml.grf._base_grftree.grftree attribute)": [[24, "econml.grf._base_grftree.GRFTree.n_features_", false]], "n_features_in_ (econml.policy.policytree attribute)": [[59, "econml.policy.PolicyTree.n_features_in_", false]], "n_iter_ (econml.sklearn_extensions.linear_model.debiasedlasso attribute)": [[62, "econml.sklearn_extensions.linear_model.DebiasedLasso.n_iter_", false]], "n_iter_ (econml.sklearn_extensions.linear_model.weightedlasso attribute)": [[67, "econml.sklearn_extensions.linear_model.WeightedLasso.n_iter_", false]], "n_outputs_ (econml.grf._base_grftree.grftree attribute)": [[24, "econml.grf._base_grftree.GRFTree.n_outputs_", false]], "n_relevant_outputs_ (econml.grf._base_grftree.grftree attribute)": [[24, "econml.grf._base_grftree.GRFTree.n_relevant_outputs_", false]], "n_samples_ (econml.grf._base_grftree.grftree attribute)": [[24, "econml.grf._base_grftree.GRFTree.n_samples_", false]], "n_samples_ (econml.policy.policytree attribute)": [[59, "econml.policy.PolicyTree.n_samples_", false]], "n_y_ (econml.grf._base_grftree.grftree attribute)": [[24, "econml.grf._base_grftree.GRFTree.n_y_", false]], "ndim() (in module econml.utilities)": [[75, "econml.utilities.ndim", false]], "nonparamdml (class in econml.dml)": [[8, "econml.dml.NonParamDML", false]], "nonparamdmliv (class in econml.iv.dml)": [[38, "econml.iv.dml.NonParamDMLIV", false]], "normalinferenceresults (class in econml.inference)": [[32, "econml.inference.NormalInferenceResults", false]], "nuisance_estimator_generator() (econml.orf.drorthoforest static method)": [[54, "econml.orf.DROrthoForest.nuisance_estimator_generator", false]], "nuisance_models_ (econml.solutions.causal_analysis.causalanalysis attribute)": [[74, "econml.solutions.causal_analysis.CausalAnalysis.nuisance_models_", false]], "nuisance_scores_ (econml._ortho_learner._ortholearner attribute)": [[1, "econml._ortho_learner._OrthoLearner.nuisance_scores_", false]], "nuisance_scores_prel_model_effect (econml.iv.dr.driv property)": [[40, "econml.iv.dr.DRIV.nuisance_scores_prel_model_effect", false]], "nuisance_scores_prel_model_effect (econml.iv.dr.forestdriv property)": [[41, "econml.iv.dr.ForestDRIV.nuisance_scores_prel_model_effect", false]], "nuisance_scores_prel_model_effect (econml.iv.dr.intenttotreatdriv property)": [[42, "econml.iv.dr.IntentToTreatDRIV.nuisance_scores_prel_model_effect", false]], "nuisance_scores_prel_model_effect (econml.iv.dr.lineardriv property)": [[43, "econml.iv.dr.LinearDRIV.nuisance_scores_prel_model_effect", false]], "nuisance_scores_prel_model_effect (econml.iv.dr.linearintenttotreatdriv property)": [[44, "econml.iv.dr.LinearIntentToTreatDRIV.nuisance_scores_prel_model_effect", false]], "nuisance_scores_prel_model_effect (econml.iv.dr.sparselineardriv property)": [[45, "econml.iv.dr.SparseLinearDRIV.nuisance_scores_prel_model_effect", false]], "nuisance_scores_propensity (econml.dr.drlearner property)": [[12, "econml.dr.DRLearner.nuisance_scores_propensity", false]], "nuisance_scores_propensity (econml.dr.forestdrlearner property)": [[13, "econml.dr.ForestDRLearner.nuisance_scores_propensity", false]], "nuisance_scores_propensity (econml.dr.lineardrlearner property)": [[14, "econml.dr.LinearDRLearner.nuisance_scores_propensity", false]], "nuisance_scores_propensity (econml.dr.sparselineardrlearner property)": [[15, "econml.dr.SparseLinearDRLearner.nuisance_scores_propensity", false]], "nuisance_scores_regression (econml.dr.drlearner property)": [[12, "econml.dr.DRLearner.nuisance_scores_regression", false]], "nuisance_scores_regression (econml.dr.forestdrlearner property)": [[13, "econml.dr.ForestDRLearner.nuisance_scores_regression", false]], "nuisance_scores_regression (econml.dr.lineardrlearner property)": [[14, "econml.dr.LinearDRLearner.nuisance_scores_regression", false]], "nuisance_scores_regression (econml.dr.sparselineardrlearner property)": [[15, "econml.dr.SparseLinearDRLearner.nuisance_scores_regression", false]], "nuisance_scores_t (econml.dml._rlearner._rlearner attribute)": [[10, "econml.dml._rlearner._RLearner.nuisance_scores_t", false]], "nuisance_scores_t_xw (econml.iv.dml.dmliv property)": [[37, "econml.iv.dml.DMLIV.nuisance_scores_t_xw", false]], "nuisance_scores_t_xw (econml.iv.dml.nonparamdmliv property)": [[38, "econml.iv.dml.NonParamDMLIV.nuisance_scores_t_xw", false]], "nuisance_scores_t_xw (econml.iv.dml.orthoiv property)": [[39, "econml.iv.dml.OrthoIV.nuisance_scores_t_xw", false]], "nuisance_scores_t_xw (econml.iv.dr.driv property)": [[40, "econml.iv.dr.DRIV.nuisance_scores_t_xw", false]], "nuisance_scores_t_xw (econml.iv.dr.forestdriv property)": [[41, "econml.iv.dr.ForestDRIV.nuisance_scores_t_xw", false]], "nuisance_scores_t_xw (econml.iv.dr.lineardriv property)": [[43, "econml.iv.dr.LinearDRIV.nuisance_scores_t_xw", false]], "nuisance_scores_t_xw (econml.iv.dr.sparselineardriv property)": [[45, "econml.iv.dr.SparseLinearDRIV.nuisance_scores_t_xw", false]], "nuisance_scores_t_xwz (econml.iv.dml.dmliv property)": [[37, "econml.iv.dml.DMLIV.nuisance_scores_t_xwz", false]], "nuisance_scores_t_xwz (econml.iv.dml.nonparamdmliv property)": [[38, "econml.iv.dml.NonParamDMLIV.nuisance_scores_t_xwz", false]], "nuisance_scores_t_xwz (econml.iv.dml.orthoiv property)": [[39, "econml.iv.dml.OrthoIV.nuisance_scores_t_xwz", false]], "nuisance_scores_t_xwz (econml.iv.dr.driv property)": [[40, "econml.iv.dr.DRIV.nuisance_scores_t_xwz", false]], "nuisance_scores_t_xwz (econml.iv.dr.forestdriv property)": [[41, "econml.iv.dr.ForestDRIV.nuisance_scores_t_xwz", false]], "nuisance_scores_t_xwz (econml.iv.dr.intenttotreatdriv property)": [[42, "econml.iv.dr.IntentToTreatDRIV.nuisance_scores_t_xwz", false]], "nuisance_scores_t_xwz (econml.iv.dr.lineardriv property)": [[43, "econml.iv.dr.LinearDRIV.nuisance_scores_t_xwz", false]], "nuisance_scores_t_xwz (econml.iv.dr.linearintenttotreatdriv property)": [[44, "econml.iv.dr.LinearIntentToTreatDRIV.nuisance_scores_t_xwz", false]], "nuisance_scores_t_xwz (econml.iv.dr.sparselineardriv property)": [[45, "econml.iv.dr.SparseLinearDRIV.nuisance_scores_t_xwz", false]], "nuisance_scores_tz_xw (econml.iv.dr.driv property)": [[40, "econml.iv.dr.DRIV.nuisance_scores_tz_xw", false]], "nuisance_scores_tz_xw (econml.iv.dr.forestdriv property)": [[41, "econml.iv.dr.ForestDRIV.nuisance_scores_tz_xw", false]], "nuisance_scores_tz_xw (econml.iv.dr.lineardriv property)": [[43, "econml.iv.dr.LinearDRIV.nuisance_scores_tz_xw", false]], "nuisance_scores_tz_xw (econml.iv.dr.sparselineardriv property)": [[45, "econml.iv.dr.SparseLinearDRIV.nuisance_scores_tz_xw", false]], "nuisance_scores_y (econml.dml._rlearner._rlearner attribute)": [[10, "econml.dml._rlearner._RLearner.nuisance_scores_y", false]], "nuisance_scores_y_xw (econml.iv.dml.dmliv property)": [[37, "econml.iv.dml.DMLIV.nuisance_scores_y_xw", false]], "nuisance_scores_y_xw (econml.iv.dml.nonparamdmliv property)": [[38, "econml.iv.dml.NonParamDMLIV.nuisance_scores_y_xw", false]], "nuisance_scores_y_xw (econml.iv.dml.orthoiv property)": [[39, "econml.iv.dml.OrthoIV.nuisance_scores_y_xw", false]], "nuisance_scores_y_xw (econml.iv.dr.driv property)": [[40, "econml.iv.dr.DRIV.nuisance_scores_y_xw", false]], "nuisance_scores_y_xw (econml.iv.dr.forestdriv property)": [[41, "econml.iv.dr.ForestDRIV.nuisance_scores_y_xw", false]], "nuisance_scores_y_xw (econml.iv.dr.intenttotreatdriv property)": [[42, "econml.iv.dr.IntentToTreatDRIV.nuisance_scores_y_xw", false]], "nuisance_scores_y_xw (econml.iv.dr.lineardriv property)": [[43, "econml.iv.dr.LinearDRIV.nuisance_scores_y_xw", false]], "nuisance_scores_y_xw (econml.iv.dr.linearintenttotreatdriv property)": [[44, "econml.iv.dr.LinearIntentToTreatDRIV.nuisance_scores_y_xw", false]], "nuisance_scores_y_xw (econml.iv.dr.sparselineardriv property)": [[45, "econml.iv.dr.SparseLinearDRIV.nuisance_scores_y_xw", false]], "nuisance_scores_z_xw (econml.iv.dml.orthoiv property)": [[39, "econml.iv.dml.OrthoIV.nuisance_scores_z_xw", false]], "nuisance_scores_z_xw (econml.iv.dr.driv property)": [[40, "econml.iv.dr.DRIV.nuisance_scores_z_xw", false]], "nuisance_scores_z_xw (econml.iv.dr.forestdriv property)": [[41, "econml.iv.dr.ForestDRIV.nuisance_scores_z_xw", false]], "nuisance_scores_z_xw (econml.iv.dr.lineardriv property)": [[43, "econml.iv.dr.LinearDRIV.nuisance_scores_z_xw", false]], "nuisance_scores_z_xw (econml.iv.dr.sparselineardriv property)": [[45, "econml.iv.dr.SparseLinearDRIV.nuisance_scores_z_xw", false]], "nuisances (econml._ortho_learner.cachedvalues attribute)": [[1, "econml._ortho_learner.CachedValues.nuisances", false]], "one_hot_encoder() (in module econml.utilities)": [[75, "econml.utilities.one_hot_encoder", false]], "oob_predict() (econml.grf._base_grf.basegrf method)": [[23, "econml.grf._base_grf.BaseGRF.oob_predict", false]], "oob_predict() (econml.grf.causalforest method)": [[17, "econml.grf.CausalForest.oob_predict", false]], "oob_predict() (econml.grf.causalivforest method)": [[18, "econml.grf.CausalIVForest.oob_predict", false]], "oob_predict() (econml.grf.regressionforest method)": [[22, "econml.grf.RegressionForest.oob_predict", false]], "ortho_learner_model_final_ (econml._ortho_learner._ortholearner attribute)": [[1, "econml._ortho_learner._OrthoLearner.ortho_learner_model_final_", false]], "orthoiv (class in econml.iv.dml)": [[39, "econml.iv.dml.OrthoIV", false]], "parameter_estimator_func() (econml.orf.drorthoforest static method)": [[54, "econml.orf.DROrthoForest.parameter_estimator_func", false]], "partial_fit() (econml.sklearn_extensions.linear_model.multioutputdebiasedlasso method)": [[63, "econml.sklearn_extensions.linear_model.MultiOutputDebiasedLasso.partial_fit", false]], "path() (econml.sklearn_extensions.linear_model.debiasedlasso static method)": [[62, "econml.sklearn_extensions.linear_model.DebiasedLasso.path", false]], "path() (econml.sklearn_extensions.linear_model.weightedlasso static method)": [[67, "econml.sklearn_extensions.linear_model.WeightedLasso.path", false]], "path() (econml.sklearn_extensions.linear_model.weightedlassocv static method)": [[68, "econml.sklearn_extensions.linear_model.WeightedLassoCV.path", false]], "path() (econml.sklearn_extensions.linear_model.weightedmultitasklassocv static method)": [[70, "econml.sklearn_extensions.linear_model.WeightedMultiTaskLassoCV.path", false]], "penalized_model (econml.sklearn_extensions.linear_model.selectiveregularization attribute)": [[64, "econml.sklearn_extensions.linear_model.SelectiveRegularization.penalized_model", false]], "percentile_point() (econml.inference.populationsummaryresults method)": [[33, "econml.inference.PopulationSummaryResults.percentile_point", false]], "plot() (econml.cate_interpreter.singletreecateinterpreter method)": [[2, "econml.cate_interpreter.SingleTreeCateInterpreter.plot", false]], "plot() (econml.cate_interpreter.singletreepolicyinterpreter method)": [[3, "econml.cate_interpreter.SingleTreePolicyInterpreter.plot", false]], "plot() (econml.policy.drpolicyforest method)": [[56, "econml.policy.DRPolicyForest.plot", false]], "plot() (econml.policy.drpolicytree method)": [[57, "econml.policy.DRPolicyTree.plot", false]], "plot() (econml.policy.policytree method)": [[59, "econml.policy.PolicyTree.plot", false]], "plot_cal() (econml.validate.calibrationevaluationresults method)": [[77, "econml.validate.CalibrationEvaluationResults.plot_cal", false]], "plot_cal() (econml.validate.evaluationresults method)": [[79, "econml.validate.EvaluationResults.plot_cal", false]], "plot_heterogeneity_tree() (econml.solutions.causal_analysis.causalanalysis method)": [[74, "econml.solutions.causal_analysis.CausalAnalysis.plot_heterogeneity_tree", false]], "plot_policy_tree() (econml.solutions.causal_analysis.causalanalysis method)": [[74, "econml.solutions.causal_analysis.CausalAnalysis.plot_policy_tree", false]], "plot_qini() (econml.validate.evaluationresults method)": [[79, "econml.validate.EvaluationResults.plot_qini", false]], "plot_toc() (econml.validate.evaluationresults method)": [[79, "econml.validate.EvaluationResults.plot_toc", false]], "plot_uplift() (econml.validate.upliftevaluationresults method)": [[80, "econml.validate.UpliftEvaluationResults.plot_uplift", false]], "point_estimate (econml.inference.empiricalinferenceresults property)": [[26, "econml.inference.EmpiricalInferenceResults.point_estimate", false]], "point_estimate (econml.inference.normalinferenceresults property)": [[32, "econml.inference.NormalInferenceResults.point_estimate", false]], "policy_feature_names() (econml.policy.drpolicyforest method)": [[56, "econml.policy.DRPolicyForest.policy_feature_names", false]], "policy_feature_names() (econml.policy.drpolicytree method)": [[57, "econml.policy.DRPolicyTree.policy_feature_names", false]], "policy_model_ (econml.policy.drpolicyforest property)": [[56, "econml.policy.DRPolicyForest.policy_model_", false]], "policy_model_ (econml.policy.drpolicytree property)": [[57, "econml.policy.DRPolicyTree.policy_model_", false]], "policy_treatment_names() (econml.policy.drpolicyforest method)": [[56, "econml.policy.DRPolicyForest.policy_treatment_names", false]], "policy_treatment_names() (econml.policy.drpolicytree method)": [[57, "econml.policy.DRPolicyTree.policy_treatment_names", false]], "policy_value_ (econml.cate_interpreter.singletreepolicyinterpreter attribute)": [[3, "econml.cate_interpreter.SingleTreePolicyInterpreter.policy_value_", false]], "policy_value_ (econml.policy.policytree attribute)": [[59, "econml.policy.PolicyTree.policy_value_", false]], "policyforest (class in econml.policy)": [[58, "econml.policy.PolicyForest", false]], "policytree (class in econml.policy)": [[59, "econml.policy.PolicyTree", false]], "population_summary() (econml.inference.empiricalinferenceresults method)": [[26, "econml.inference.EmpiricalInferenceResults.population_summary", false]], "population_summary() (econml.inference.normalinferenceresults method)": [[32, "econml.inference.NormalInferenceResults.population_summary", false]], "populationsummaryresults (class in econml.inference)": [[33, "econml.inference.PopulationSummaryResults", false]], "predict() (econml.grf._base_grf.basegrf method)": [[23, "econml.grf._base_grf.BaseGRF.predict", false]], "predict() (econml.grf._base_grftree.grftree method)": [[24, "econml.grf._base_grftree.GRFTree.predict", false]], "predict() (econml.grf.causalforest method)": [[17, "econml.grf.CausalForest.predict", false]], "predict() (econml.grf.causalivforest method)": [[18, "econml.grf.CausalIVForest.predict", false]], "predict() (econml.grf.regressionforest method)": [[22, "econml.grf.RegressionForest.predict", false]], "predict() (econml.policy.drpolicyforest method)": [[56, "econml.policy.DRPolicyForest.predict", false]], "predict() (econml.policy.drpolicytree method)": [[57, "econml.policy.DRPolicyTree.predict", false]], "predict() (econml.policy.policyforest method)": [[58, "econml.policy.PolicyForest.predict", false]], "predict() (econml.policy.policytree method)": [[59, "econml.policy.PolicyTree.predict", false]], "predict() (econml.sklearn_extensions.linear_model.debiasedlasso method)": [[62, "econml.sklearn_extensions.linear_model.DebiasedLasso.predict", false]], "predict() (econml.sklearn_extensions.linear_model.multioutputdebiasedlasso method)": [[63, "econml.sklearn_extensions.linear_model.MultiOutputDebiasedLasso.predict", false]], "predict() (econml.sklearn_extensions.linear_model.selectiveregularization method)": [[64, "econml.sklearn_extensions.linear_model.SelectiveRegularization.predict", false]], "predict() (econml.sklearn_extensions.linear_model.statsmodelslinearregression method)": [[65, "econml.sklearn_extensions.linear_model.StatsModelsLinearRegression.predict", false]], "predict() (econml.sklearn_extensions.linear_model.statsmodelsrlm method)": [[66, "econml.sklearn_extensions.linear_model.StatsModelsRLM.predict", false]], "predict() (econml.sklearn_extensions.linear_model.weightedlasso method)": [[67, "econml.sklearn_extensions.linear_model.WeightedLasso.predict", false]], "predict() (econml.sklearn_extensions.linear_model.weightedlassocv method)": [[68, "econml.sklearn_extensions.linear_model.WeightedLassoCV.predict", false]], "predict() (econml.sklearn_extensions.linear_model.weightedmultitasklassocv method)": [[70, "econml.sklearn_extensions.linear_model.WeightedMultiTaskLassoCV.predict", false]], "predict() (econml.utilities.multimodelwrapper method)": [[75, "econml.utilities.MultiModelWrapper.predict", false]], "predict() (econml.utilities.weightedmodelwrapper method)": [[75, "econml.utilities.WeightedModelWrapper.predict", false]], "predict_alpha_and_jac() (econml.grf._base_grf.basegrf method)": [[23, "econml.grf._base_grf.BaseGRF.predict_alpha_and_jac", false]], "predict_alpha_and_jac() (econml.grf._base_grftree.grftree method)": [[24, "econml.grf._base_grftree.GRFTree.predict_alpha_and_jac", false]], "predict_alpha_and_jac() (econml.grf.causalforest method)": [[17, "econml.grf.CausalForest.predict_alpha_and_jac", false]], "predict_alpha_and_jac() (econml.grf.causalivforest method)": [[18, "econml.grf.CausalIVForest.predict_alpha_and_jac", false]], "predict_alpha_and_jac() (econml.grf.regressionforest method)": [[22, "econml.grf.RegressionForest.predict_alpha_and_jac", false]], "predict_and_var() (econml.grf._base_grf.basegrf method)": [[23, "econml.grf._base_grf.BaseGRF.predict_and_var", false]], "predict_and_var() (econml.grf.causalforest method)": [[17, "econml.grf.CausalForest.predict_and_var", false]], "predict_and_var() (econml.grf.causalivforest method)": [[18, "econml.grf.CausalIVForest.predict_and_var", false]], "predict_and_var() (econml.grf.regressionforest method)": [[22, "econml.grf.RegressionForest.predict_and_var", false]], "predict_full() (econml.grf._base_grf.basegrf method)": [[23, "econml.grf._base_grf.BaseGRF.predict_full", false]], "predict_full() (econml.grf._base_grftree.grftree method)": [[24, "econml.grf._base_grftree.GRFTree.predict_full", false]], "predict_full() (econml.grf.causalforest method)": [[17, "econml.grf.CausalForest.predict_full", false]], "predict_full() (econml.grf.causalivforest method)": [[18, "econml.grf.CausalIVForest.predict_full", false]], "predict_full() (econml.grf.regressionforest method)": [[22, "econml.grf.RegressionForest.predict_full", false]], "predict_interval() (econml.grf._base_grf.basegrf method)": [[23, "econml.grf._base_grf.BaseGRF.predict_interval", false]], "predict_interval() (econml.grf.causalforest method)": [[17, "econml.grf.CausalForest.predict_interval", false]], "predict_interval() (econml.grf.causalivforest method)": [[18, "econml.grf.CausalIVForest.predict_interval", false]], "predict_interval() (econml.grf.regressionforest method)": [[22, "econml.grf.RegressionForest.predict_interval", false]], "predict_interval() (econml.sklearn_extensions.linear_model.debiasedlasso method)": [[62, "econml.sklearn_extensions.linear_model.DebiasedLasso.predict_interval", false]], "predict_interval() (econml.sklearn_extensions.linear_model.multioutputdebiasedlasso method)": [[63, "econml.sklearn_extensions.linear_model.MultiOutputDebiasedLasso.predict_interval", false]], "predict_interval() (econml.sklearn_extensions.linear_model.statsmodelslinearregression method)": [[65, "econml.sklearn_extensions.linear_model.StatsModelsLinearRegression.predict_interval", false]], "predict_interval() (econml.sklearn_extensions.linear_model.statsmodelsrlm method)": [[66, "econml.sklearn_extensions.linear_model.StatsModelsRLM.predict_interval", false]], "predict_moment() (econml.grf._base_grftree.grftree method)": [[24, "econml.grf._base_grftree.GRFTree.predict_moment", false]], "predict_moment_and_var() (econml.grf._base_grf.basegrf method)": [[23, "econml.grf._base_grf.BaseGRF.predict_moment_and_var", false]], "predict_moment_and_var() (econml.grf.causalforest method)": [[17, "econml.grf.CausalForest.predict_moment_and_var", false]], "predict_moment_and_var() (econml.grf.causalivforest method)": [[18, "econml.grf.CausalIVForest.predict_moment_and_var", false]], "predict_moment_and_var() (econml.grf.regressionforest method)": [[22, "econml.grf.RegressionForest.predict_moment_and_var", false]], "predict_proba() (econml.policy.drpolicyforest method)": [[56, "econml.policy.DRPolicyForest.predict_proba", false]], "predict_proba() (econml.policy.drpolicytree method)": [[57, "econml.policy.DRPolicyTree.predict_proba", false]], "predict_proba() (econml.policy.policyforest method)": [[58, "econml.policy.PolicyForest.predict_proba", false]], "predict_proba() (econml.policy.policytree method)": [[59, "econml.policy.PolicyTree.predict_proba", false]], "predict_projection() (econml.grf._base_grf.basegrf method)": [[23, "econml.grf._base_grf.BaseGRF.predict_projection", false]], "predict_projection() (econml.grf.causalforest method)": [[17, "econml.grf.CausalForest.predict_projection", false]], "predict_projection() (econml.grf.causalivforest method)": [[18, "econml.grf.CausalIVForest.predict_projection", false]], "predict_projection() (econml.grf.regressionforest method)": [[22, "econml.grf.RegressionForest.predict_projection", false]], "predict_projection_and_var() (econml.grf._base_grf.basegrf method)": [[23, "econml.grf._base_grf.BaseGRF.predict_projection_and_var", false]], "predict_projection_and_var() (econml.grf.causalforest method)": [[17, "econml.grf.CausalForest.predict_projection_and_var", false]], "predict_projection_and_var() (econml.grf.causalivforest method)": [[18, "econml.grf.CausalIVForest.predict_projection_and_var", false]], "predict_projection_and_var() (econml.grf.regressionforest method)": [[22, "econml.grf.RegressionForest.predict_projection_and_var", false]], "predict_projection_var() (econml.grf._base_grf.basegrf method)": [[23, "econml.grf._base_grf.BaseGRF.predict_projection_var", false]], "predict_projection_var() (econml.grf.causalforest method)": [[17, "econml.grf.CausalForest.predict_projection_var", false]], "predict_projection_var() (econml.grf.causalivforest method)": [[18, "econml.grf.CausalIVForest.predict_projection_var", false]], "predict_projection_var() (econml.grf.regressionforest method)": [[22, "econml.grf.RegressionForest.predict_projection_var", false]], "predict_tree_average() (econml.grf._base_grf.basegrf method)": [[23, "econml.grf._base_grf.BaseGRF.predict_tree_average", false]], "predict_tree_average() (econml.grf.causalforest method)": [[17, "econml.grf.CausalForest.predict_tree_average", false]], "predict_tree_average() (econml.grf.causalivforest method)": [[18, "econml.grf.CausalIVForest.predict_tree_average", false]], "predict_tree_average() (econml.grf.regressionforest method)": [[22, "econml.grf.RegressionForest.predict_tree_average", false]], "predict_tree_average_full() (econml.grf._base_grf.basegrf method)": [[23, "econml.grf._base_grf.BaseGRF.predict_tree_average_full", false]], "predict_tree_average_full() (econml.grf.causalforest method)": [[17, "econml.grf.CausalForest.predict_tree_average_full", false]], "predict_tree_average_full() (econml.grf.causalivforest method)": [[18, "econml.grf.CausalIVForest.predict_tree_average_full", false]], "predict_tree_average_full() (econml.grf.regressionforest method)": [[22, "econml.grf.RegressionForest.predict_tree_average_full", false]], "predict_value() (econml.policy.drpolicyforest method)": [[56, "econml.policy.DRPolicyForest.predict_value", false]], "predict_value() (econml.policy.drpolicytree method)": [[57, "econml.policy.DRPolicyTree.predict_value", false]], "predict_value() (econml.policy.policyforest method)": [[58, "econml.policy.PolicyForest.predict_value", false]], "predict_value() (econml.policy.policytree method)": [[59, "econml.policy.PolicyTree.predict_value", false]], "predict_var() (econml.grf._base_grf.basegrf method)": [[23, "econml.grf._base_grf.BaseGRF.predict_var", false]], "predict_var() (econml.grf.causalforest method)": [[17, "econml.grf.CausalForest.predict_var", false]], "predict_var() (econml.grf.causalivforest method)": [[18, "econml.grf.CausalIVForest.predict_var", false]], "predict_var() (econml.grf.regressionforest method)": [[22, "econml.grf.RegressionForest.predict_var", false]], "prediction_stderr() (econml.grf._base_grf.basegrf method)": [[23, "econml.grf._base_grf.BaseGRF.prediction_stderr", false]], "prediction_stderr() (econml.grf.causalforest method)": [[17, "econml.grf.CausalForest.prediction_stderr", false]], "prediction_stderr() (econml.grf.causalivforest method)": [[18, "econml.grf.CausalIVForest.prediction_stderr", false]], "prediction_stderr() (econml.grf.regressionforest method)": [[22, "econml.grf.RegressionForest.prediction_stderr", false]], "prediction_stderr() (econml.sklearn_extensions.linear_model.debiasedlasso method)": [[62, "econml.sklearn_extensions.linear_model.DebiasedLasso.prediction_stderr", false]], "prediction_stderr() (econml.sklearn_extensions.linear_model.multioutputdebiasedlasso method)": [[63, "econml.sklearn_extensions.linear_model.MultiOutputDebiasedLasso.prediction_stderr", false]], "prediction_stderr() (econml.sklearn_extensions.linear_model.statsmodelslinearregression method)": [[65, "econml.sklearn_extensions.linear_model.StatsModelsLinearRegression.prediction_stderr", false]], "prediction_stderr() (econml.sklearn_extensions.linear_model.statsmodelsrlm method)": [[66, "econml.sklearn_extensions.linear_model.StatsModelsRLM.prediction_stderr", false]], "prefit() (econml.inference.bootstrapinference method)": [[25, "econml.inference.BootstrapInference.prefit", false]], "prefit() (econml.inference.genericmodelfinalinference method)": [[27, "econml.inference.GenericModelFinalInference.prefit", false]], "prefit() (econml.inference.genericmodelfinalinferencediscrete method)": [[28, "econml.inference.GenericModelFinalInferenceDiscrete.prefit", false]], "prefit() (econml.inference.genericsingletreatmentmodelfinalinference method)": [[29, "econml.inference.GenericSingleTreatmentModelFinalInference.prefit", false]], "prefit() (econml.inference.linearmodelfinalinference method)": [[30, "econml.inference.LinearModelFinalInference.prefit", false]], "prefit() (econml.inference.linearmodelfinalinferencediscrete method)": [[31, "econml.inference.LinearModelFinalInferenceDiscrete.prefit", false]], "prefit() (econml.inference.statsmodelsinference method)": [[34, "econml.inference.StatsModelsInference.prefit", false]], "prefit() (econml.inference.statsmodelsinferencediscrete method)": [[35, "econml.inference.StatsModelsInferenceDiscrete.prefit", false]], "pvalue() (econml.inference.empiricalinferenceresults method)": [[26, "econml.inference.EmpiricalInferenceResults.pvalue", false]], "pvalue() (econml.inference.normalinferenceresults method)": [[32, "econml.inference.NormalInferenceResults.pvalue", false]], "pvalue() (econml.inference.populationsummaryresults method)": [[33, "econml.inference.PopulationSummaryResults.pvalue", false]], "refit_final() (econml._ortho_learner._ortholearner method)": [[1, "econml._ortho_learner._OrthoLearner.refit_final", false]], "refit_final() (econml.dml._rlearner._rlearner method)": [[10, "econml.dml._rlearner._RLearner.refit_final", false]], "refit_final() (econml.dml.causalforestdml method)": [[4, "econml.dml.CausalForestDML.refit_final", false]], "refit_final() (econml.dml.dml method)": [[5, "econml.dml.DML.refit_final", false]], "refit_final() (econml.dml.kerneldml method)": [[6, "econml.dml.KernelDML.refit_final", false]], "refit_final() (econml.dml.lineardml method)": [[7, "econml.dml.LinearDML.refit_final", false]], "refit_final() (econml.dml.nonparamdml method)": [[8, "econml.dml.NonParamDML.refit_final", false]], "refit_final() (econml.dml.sparselineardml method)": [[9, "econml.dml.SparseLinearDML.refit_final", false]], "refit_final() (econml.dr.drlearner method)": [[12, "econml.dr.DRLearner.refit_final", false]], "refit_final() (econml.dr.forestdrlearner method)": [[13, "econml.dr.ForestDRLearner.refit_final", false]], "refit_final() (econml.dr.lineardrlearner method)": [[14, "econml.dr.LinearDRLearner.refit_final", false]], "refit_final() (econml.dr.sparselineardrlearner method)": [[15, "econml.dr.SparseLinearDRLearner.refit_final", false]], "refit_final() (econml.iv.dml.dmliv method)": [[37, "econml.iv.dml.DMLIV.refit_final", false]], "refit_final() (econml.iv.dml.nonparamdmliv method)": [[38, "econml.iv.dml.NonParamDMLIV.refit_final", false]], "refit_final() (econml.iv.dml.orthoiv method)": [[39, "econml.iv.dml.OrthoIV.refit_final", false]], "refit_final() (econml.iv.dr.driv method)": [[40, "econml.iv.dr.DRIV.refit_final", false]], "refit_final() (econml.iv.dr.forestdriv method)": [[41, "econml.iv.dr.ForestDRIV.refit_final", false]], "refit_final() (econml.iv.dr.intenttotreatdriv method)": [[42, "econml.iv.dr.IntentToTreatDRIV.refit_final", false]], "refit_final() (econml.iv.dr.lineardriv method)": [[43, "econml.iv.dr.LinearDRIV.refit_final", false]], "refit_final() (econml.iv.dr.linearintenttotreatdriv method)": [[44, "econml.iv.dr.LinearIntentToTreatDRIV.refit_final", false]], "refit_final() (econml.iv.dr.sparselineardriv method)": [[45, "econml.iv.dr.SparseLinearDRIV.refit_final", false]], "refit_final() (econml.panel.dml.dynamicdml method)": [[55, "econml.panel.dml.DynamicDML.refit_final", false]], "refute_estimate() (econml.dowhy.dowhywrapper method)": [[11, "econml.dowhy.DoWhyWrapper.refute_estimate", false]], "regressionforest (class in econml.grf)": [[22, "econml.grf.RegressionForest", false]], "render() (econml.cate_interpreter.singletreecateinterpreter method)": [[2, "econml.cate_interpreter.SingleTreeCateInterpreter.render", false]], "render() (econml.cate_interpreter.singletreepolicyinterpreter method)": [[3, "econml.cate_interpreter.SingleTreePolicyInterpreter.render", false]], "render() (econml.policy.drpolicyforest method)": [[56, "econml.policy.DRPolicyForest.render", false]], "render() (econml.policy.drpolicytree method)": [[57, "econml.policy.DRPolicyTree.render", false]], "render() (econml.policy.policytree method)": [[59, "econml.policy.PolicyTree.render", false]], "reshape() (in module econml.utilities)": [[75, "econml.utilities.reshape", false]], "reshape_arrays_2dim() (in module econml.utilities)": [[75, "econml.utilities.reshape_arrays_2dim", false]], "reshape_outcomewise_effects() (in module econml.utilities)": [[75, "econml.utilities.reshape_outcomewise_effects", false]], "reshape_treatmentwise_effects() (in module econml.utilities)": [[75, "econml.utilities.reshape_treatmentwise_effects", false]], "reshape_y_t() (in module econml.utilities)": [[75, "econml.utilities.reshape_Y_T", false]], "residuals_ (econml.dml._rlearner._rlearner property)": [[10, "econml.dml._rlearner._RLearner.residuals_", false]], "residuals_ (econml.dml.causalforestdml property)": [[4, "econml.dml.CausalForestDML.residuals_", false]], "residuals_ (econml.dml.dml property)": [[5, "econml.dml.DML.residuals_", false]], "residuals_ (econml.dml.kerneldml property)": [[6, "econml.dml.KernelDML.residuals_", false]], "residuals_ (econml.dml.lineardml property)": [[7, "econml.dml.LinearDML.residuals_", false]], "residuals_ (econml.dml.nonparamdml property)": [[8, "econml.dml.NonParamDML.residuals_", false]], "residuals_ (econml.dml.sparselineardml property)": [[9, "econml.dml.SparseLinearDML.residuals_", false]], "residuals_ (econml.iv.dml.dmliv property)": [[37, "econml.iv.dml.DMLIV.residuals_", false]], "residuals_ (econml.iv.dml.nonparamdmliv property)": [[38, "econml.iv.dml.NonParamDMLIV.residuals_", false]], "residuals_ (econml.iv.dml.orthoiv property)": [[39, "econml.iv.dml.OrthoIV.residuals_", false]], "residuals_ (econml.iv.dr.driv property)": [[40, "econml.iv.dr.DRIV.residuals_", false]], "residuals_ (econml.iv.dr.forestdriv property)": [[41, "econml.iv.dr.ForestDRIV.residuals_", false]], "residuals_ (econml.iv.dr.intenttotreatdriv property)": [[42, "econml.iv.dr.IntentToTreatDRIV.residuals_", false]], "residuals_ (econml.iv.dr.lineardriv property)": [[43, "econml.iv.dr.LinearDRIV.residuals_", false]], "residuals_ (econml.iv.dr.linearintenttotreatdriv property)": [[44, "econml.iv.dr.LinearIntentToTreatDRIV.residuals_", false]], "residuals_ (econml.iv.dr.sparselineardriv property)": [[45, "econml.iv.dr.SparseLinearDRIV.residuals_", false]], "residuals_ (econml.panel.dml.dynamicdml property)": [[55, "econml.panel.dml.DynamicDML.residuals_", false]], "rlearner_model_final_ (econml.dml._rlearner._rlearner attribute)": [[10, "econml.dml._rlearner._RLearner.rlearner_model_final_", false]], "robustness_value() (econml.dml.causalforestdml method)": [[4, "econml.dml.CausalForestDML.robustness_value", false]], "robustness_value() (econml.dml.dml method)": [[5, "econml.dml.DML.robustness_value", false]], "robustness_value() (econml.dml.kerneldml method)": [[6, "econml.dml.KernelDML.robustness_value", false]], "robustness_value() (econml.dml.lineardml method)": [[7, "econml.dml.LinearDML.robustness_value", false]], "robustness_value() (econml.dml.sparselineardml method)": [[9, "econml.dml.SparseLinearDML.robustness_value", false]], "robustness_value() (econml.dr.drlearner method)": [[12, "econml.dr.DRLearner.robustness_value", false]], "robustness_value() (econml.dr.forestdrlearner method)": [[13, "econml.dr.ForestDRLearner.robustness_value", false]], "robustness_value() (econml.dr.lineardrlearner method)": [[14, "econml.dr.LinearDRLearner.robustness_value", false]], "robustness_value() (econml.dr.sparselineardrlearner method)": [[15, "econml.dr.SparseLinearDRLearner.robustness_value", false]], "rscorer (class in econml.score)": [[61, "econml.score.RScorer", false]], "sample_var (econml._ortho_learner.cachedvalues attribute)": [[1, "econml._ortho_learner.CachedValues.sample_var", false]], "sample_weight (econml._ortho_learner.cachedvalues attribute)": [[1, "econml._ortho_learner.CachedValues.sample_weight", false]], "scale() (econml.inference.empiricalinferenceresults method)": [[26, "econml.inference.EmpiricalInferenceResults.scale", false]], "scale() (econml.inference.normalinferenceresults method)": [[32, "econml.inference.NormalInferenceResults.scale", false]], "score() (econml._ortho_learner._ortholearner method)": [[1, "econml._ortho_learner._OrthoLearner.score", false]], "score() (econml.dml._rlearner._rlearner method)": [[10, "econml.dml._rlearner._RLearner.score", false]], "score() (econml.dml.causalforestdml method)": [[4, "econml.dml.CausalForestDML.score", false]], "score() (econml.dml.dml method)": [[5, "econml.dml.DML.score", false]], "score() (econml.dml.kerneldml method)": [[6, "econml.dml.KernelDML.score", false]], "score() (econml.dml.lineardml method)": [[7, "econml.dml.LinearDML.score", false]], "score() (econml.dml.nonparamdml method)": [[8, "econml.dml.NonParamDML.score", false]], "score() (econml.dml.sparselineardml method)": [[9, "econml.dml.SparseLinearDML.score", false]], "score() (econml.dr.drlearner method)": [[12, "econml.dr.DRLearner.score", false]], "score() (econml.dr.forestdrlearner method)": [[13, "econml.dr.ForestDRLearner.score", false]], "score() (econml.dr.lineardrlearner method)": [[14, "econml.dr.LinearDRLearner.score", false]], "score() (econml.dr.sparselineardrlearner method)": [[15, "econml.dr.SparseLinearDRLearner.score", false]], "score() (econml.iv.dml.dmliv method)": [[37, "econml.iv.dml.DMLIV.score", false]], "score() (econml.iv.dml.nonparamdmliv method)": [[38, "econml.iv.dml.NonParamDMLIV.score", false]], "score() (econml.iv.dml.orthoiv method)": [[39, "econml.iv.dml.OrthoIV.score", false]], "score() (econml.iv.dr.driv method)": [[40, "econml.iv.dr.DRIV.score", false]], "score() (econml.iv.dr.forestdriv method)": [[41, "econml.iv.dr.ForestDRIV.score", false]], "score() (econml.iv.dr.intenttotreatdriv method)": [[42, "econml.iv.dr.IntentToTreatDRIV.score", false]], "score() (econml.iv.dr.lineardriv method)": [[43, "econml.iv.dr.LinearDRIV.score", false]], "score() (econml.iv.dr.linearintenttotreatdriv method)": [[44, "econml.iv.dr.LinearIntentToTreatDRIV.score", false]], "score() (econml.iv.dr.sparselineardriv method)": [[45, "econml.iv.dr.SparseLinearDRIV.score", false]], "score() (econml.panel.dml.dynamicdml method)": [[55, "econml.panel.dml.DynamicDML.score", false]], "score() (econml.score.rscorer method)": [[61, "econml.score.RScorer.score", false]], "score() (econml.sklearn_extensions.linear_model.debiasedlasso method)": [[62, "econml.sklearn_extensions.linear_model.DebiasedLasso.score", false]], "score() (econml.sklearn_extensions.linear_model.multioutputdebiasedlasso method)": [[63, "econml.sklearn_extensions.linear_model.MultiOutputDebiasedLasso.score", false]], "score() (econml.sklearn_extensions.linear_model.selectiveregularization method)": [[64, "econml.sklearn_extensions.linear_model.SelectiveRegularization.score", false]], "score() (econml.sklearn_extensions.linear_model.weightedlasso method)": [[67, "econml.sklearn_extensions.linear_model.WeightedLasso.score", false]], "score() (econml.sklearn_extensions.linear_model.weightedlassocv method)": [[68, "econml.sklearn_extensions.linear_model.WeightedLassoCV.score", false]], "score() (econml.sklearn_extensions.linear_model.weightedmultitasklassocv method)": [[70, "econml.sklearn_extensions.linear_model.WeightedMultiTaskLassoCV.score", false]], "score_ (econml._ortho_learner._ortholearner attribute)": [[1, "econml._ortho_learner._OrthoLearner.score_", false]], "score_ (econml.dml._rlearner._rlearner attribute)": [[10, "econml.dml._rlearner._RLearner.score_", false]], "score_ (econml.dr.drlearner attribute)": [[12, "econml.dr.DRLearner.score_", false]], "score_ (econml.dr.lineardrlearner attribute)": [[14, "econml.dr.LinearDRLearner.score_", false]], "score_ (econml.dr.sparselineardrlearner attribute)": [[15, "econml.dr.SparseLinearDRLearner.score_", false]], "score_nuisances() (econml.dml._rlearner._rlearner method)": [[10, "econml.dml._rlearner._RLearner.score_nuisances", false]], "score_nuisances() (econml.dml.causalforestdml method)": [[4, "econml.dml.CausalForestDML.score_nuisances", false]], "score_nuisances() (econml.dml.dml method)": [[5, "econml.dml.DML.score_nuisances", false]], "score_nuisances() (econml.dml.kerneldml method)": [[6, "econml.dml.KernelDML.score_nuisances", false]], "score_nuisances() (econml.dml.lineardml method)": [[7, "econml.dml.LinearDML.score_nuisances", false]], "score_nuisances() (econml.dml.nonparamdml method)": [[8, "econml.dml.NonParamDML.score_nuisances", false]], "score_nuisances() (econml.dml.sparselineardml method)": [[9, "econml.dml.SparseLinearDML.score_nuisances", false]], "second_stage_parameter_estimator_gen() (econml.orf.drorthoforest static method)": [[54, "econml.orf.DROrthoForest.second_stage_parameter_estimator_gen", false]], "selected_alpha_ (econml.sklearn_extensions.linear_model.debiasedlasso attribute)": [[62, "econml.sklearn_extensions.linear_model.DebiasedLasso.selected_alpha_", false]], "selected_alpha_ (econml.sklearn_extensions.linear_model.multioutputdebiasedlasso attribute)": [[63, "econml.sklearn_extensions.linear_model.MultiOutputDebiasedLasso.selected_alpha_", false]], "selectiveregularization (class in econml.sklearn_extensions.linear_model)": [[64, "econml.sklearn_extensions.linear_model.SelectiveRegularization", false]], "sensitivity_interval() (econml.dml.causalforestdml method)": [[4, "econml.dml.CausalForestDML.sensitivity_interval", false]], "sensitivity_interval() (econml.dml.dml method)": [[5, "econml.dml.DML.sensitivity_interval", false]], "sensitivity_interval() (econml.dml.kerneldml method)": [[6, "econml.dml.KernelDML.sensitivity_interval", false]], "sensitivity_interval() (econml.dml.lineardml method)": [[7, "econml.dml.LinearDML.sensitivity_interval", false]], "sensitivity_interval() (econml.dml.sparselineardml method)": [[9, "econml.dml.SparseLinearDML.sensitivity_interval", false]], "sensitivity_interval() (econml.dr.drlearner method)": [[12, "econml.dr.DRLearner.sensitivity_interval", false]], "sensitivity_interval() (econml.dr.forestdrlearner method)": [[13, "econml.dr.ForestDRLearner.sensitivity_interval", false]], "sensitivity_interval() (econml.dr.lineardrlearner method)": [[14, "econml.dr.LinearDRLearner.sensitivity_interval", false]], "sensitivity_interval() (econml.dr.sparselineardrlearner method)": [[15, "econml.dr.SparseLinearDRLearner.sensitivity_interval", false]], "sensitivity_summary() (econml.dml.causalforestdml method)": [[4, "econml.dml.CausalForestDML.sensitivity_summary", false]], "sensitivity_summary() (econml.dml.dml method)": [[5, "econml.dml.DML.sensitivity_summary", false]], "sensitivity_summary() (econml.dml.kerneldml method)": [[6, "econml.dml.KernelDML.sensitivity_summary", false]], "sensitivity_summary() (econml.dml.lineardml method)": [[7, "econml.dml.LinearDML.sensitivity_summary", false]], "sensitivity_summary() (econml.dml.sparselineardml method)": [[9, "econml.dml.SparseLinearDML.sensitivity_summary", false]], "sensitivity_summary() (econml.dr.drlearner method)": [[12, "econml.dr.DRLearner.sensitivity_summary", false]], "sensitivity_summary() (econml.dr.forestdrlearner method)": [[13, "econml.dr.ForestDRLearner.sensitivity_summary", false]], "sensitivity_summary() (econml.dr.lineardrlearner method)": [[14, "econml.dr.LinearDRLearner.sensitivity_summary", false]], "sensitivity_summary() (econml.dr.sparselineardrlearner method)": [[15, "econml.dr.SparseLinearDRLearner.sensitivity_summary", false]], "separatemodel (class in econml.utilities)": [[75, "econml.utilities.SeparateModel", false]], "set z to intended treatment": [[99, "term-Set-Z-to-intended-treatment", true]], "set_fit_request() (econml.grf._base_grf.basegrf method)": [[23, "econml.grf._base_grf.BaseGRF.set_fit_request", false]], "set_fit_request() (econml.grf._base_grftree.grftree method)": [[24, "econml.grf._base_grftree.GRFTree.set_fit_request", false]], "set_fit_request() (econml.grf.causalforest method)": [[17, "econml.grf.CausalForest.set_fit_request", false]], "set_fit_request() (econml.grf.causalivforest method)": [[18, "econml.grf.CausalIVForest.set_fit_request", false]], "set_fit_request() (econml.grf.multioutputgrf method)": [[21, "econml.grf.MultiOutputGRF.set_fit_request", false]], "set_fit_request() (econml.grf.regressionforest method)": [[22, "econml.grf.RegressionForest.set_fit_request", false]], "set_fit_request() (econml.policy.policyforest method)": [[58, "econml.policy.PolicyForest.set_fit_request", false]], "set_fit_request() (econml.policy.policytree method)": [[59, "econml.policy.PolicyTree.set_fit_request", false]], "set_fit_request() (econml.sklearn_extensions.linear_model.debiasedlasso method)": [[62, "econml.sklearn_extensions.linear_model.DebiasedLasso.set_fit_request", false]], "set_fit_request() (econml.sklearn_extensions.linear_model.multioutputdebiasedlasso method)": [[63, "econml.sklearn_extensions.linear_model.MultiOutputDebiasedLasso.set_fit_request", false]], "set_fit_request() (econml.sklearn_extensions.linear_model.statsmodelslinearregression method)": [[65, "econml.sklearn_extensions.linear_model.StatsModelsLinearRegression.set_fit_request", false]], "set_fit_request() (econml.sklearn_extensions.linear_model.weightedlasso method)": [[67, "econml.sklearn_extensions.linear_model.WeightedLasso.set_fit_request", false]], "set_fit_request() (econml.sklearn_extensions.linear_model.weightedlassocv method)": [[68, "econml.sklearn_extensions.linear_model.WeightedLassoCV.set_fit_request", false]], "set_fit_request() (econml.sklearn_extensions.linear_model.weightedmultitasklassocv method)": [[70, "econml.sklearn_extensions.linear_model.WeightedMultiTaskLassoCV.set_fit_request", false]], "set_output() (econml.iv.sieve.dpolynomialfeatures method)": [[46, "econml.iv.sieve.DPolynomialFeatures.set_output", false]], "set_output() (econml.iv.sieve.hermitefeatures method)": [[47, "econml.iv.sieve.HermiteFeatures.set_output", false]], "set_output() (econml.utilities.identityfeatures method)": [[75, "econml.utilities.IdentityFeatures.set_output", false]], "set_params() (econml.grf._base_grf.basegrf method)": [[23, "econml.grf._base_grf.BaseGRF.set_params", false]], "set_params() (econml.grf._base_grftree.grftree method)": [[24, "econml.grf._base_grftree.GRFTree.set_params", false]], "set_params() (econml.grf.causalforest method)": [[17, "econml.grf.CausalForest.set_params", false]], "set_params() (econml.grf.causalivforest method)": [[18, "econml.grf.CausalIVForest.set_params", false]], "set_params() (econml.grf.multioutputgrf method)": [[21, "econml.grf.MultiOutputGRF.set_params", false]], "set_params() (econml.grf.regressionforest method)": [[22, "econml.grf.RegressionForest.set_params", false]], "set_params() (econml.policy.policyforest method)": [[58, "econml.policy.PolicyForest.set_params", false]], "set_params() (econml.policy.policytree method)": [[59, "econml.policy.PolicyTree.set_params", false]], "set_params() (econml.sklearn_extensions.linear_model.debiasedlasso method)": [[62, "econml.sklearn_extensions.linear_model.DebiasedLasso.set_params", false]], "set_params() (econml.sklearn_extensions.linear_model.multioutputdebiasedlasso method)": [[63, "econml.sklearn_extensions.linear_model.MultiOutputDebiasedLasso.set_params", false]], "set_params() (econml.sklearn_extensions.linear_model.statsmodelslinearregression method)": [[65, "econml.sklearn_extensions.linear_model.StatsModelsLinearRegression.set_params", false]], "set_params() (econml.sklearn_extensions.linear_model.statsmodelsrlm method)": [[66, "econml.sklearn_extensions.linear_model.StatsModelsRLM.set_params", false]], "set_params() (econml.sklearn_extensions.linear_model.weightedlasso method)": [[67, "econml.sklearn_extensions.linear_model.WeightedLasso.set_params", false]], "set_params() (econml.sklearn_extensions.linear_model.weightedlassocv method)": [[68, "econml.sklearn_extensions.linear_model.WeightedLassoCV.set_params", false]], "set_params() (econml.sklearn_extensions.linear_model.weightedlassocvwrapper method)": [[69, "econml.sklearn_extensions.linear_model.WeightedLassoCVWrapper.set_params", false]], "set_params() (econml.sklearn_extensions.linear_model.weightedmultitasklassocv method)": [[70, "econml.sklearn_extensions.linear_model.WeightedMultiTaskLassoCV.set_params", false]], "set_params() (econml.sklearn_extensions.model_selection.gridsearchcvlist method)": [[71, "econml.sklearn_extensions.model_selection.GridSearchCVList.set_params", false]], "set_partial_fit_request() (econml.sklearn_extensions.linear_model.multioutputdebiasedlasso method)": [[63, "econml.sklearn_extensions.linear_model.MultiOutputDebiasedLasso.set_partial_fit_request", false]], "set_predict_proba_request() (econml.policy.policytree method)": [[59, "econml.policy.PolicyTree.set_predict_proba_request", false]], "set_predict_request() (econml.grf._base_grf.basegrf method)": [[23, "econml.grf._base_grf.BaseGRF.set_predict_request", false]], "set_predict_request() (econml.grf._base_grftree.grftree method)": [[24, "econml.grf._base_grftree.GRFTree.set_predict_request", false]], "set_predict_request() (econml.grf.causalforest method)": [[17, "econml.grf.CausalForest.set_predict_request", false]], "set_predict_request() (econml.grf.causalivforest method)": [[18, "econml.grf.CausalIVForest.set_predict_request", false]], "set_predict_request() (econml.grf.multioutputgrf method)": [[21, "econml.grf.MultiOutputGRF.set_predict_request", false]], "set_predict_request() (econml.grf.regressionforest method)": [[22, "econml.grf.RegressionForest.set_predict_request", false]], "set_predict_request() (econml.policy.policytree method)": [[59, "econml.policy.PolicyTree.set_predict_request", false]], "set_score_request() (econml.sklearn_extensions.linear_model.debiasedlasso method)": [[62, "econml.sklearn_extensions.linear_model.DebiasedLasso.set_score_request", false]], "set_score_request() (econml.sklearn_extensions.linear_model.multioutputdebiasedlasso method)": [[63, "econml.sklearn_extensions.linear_model.MultiOutputDebiasedLasso.set_score_request", false]], "set_score_request() (econml.sklearn_extensions.linear_model.weightedlasso method)": [[67, "econml.sklearn_extensions.linear_model.WeightedLasso.set_score_request", false]], "set_score_request() (econml.sklearn_extensions.linear_model.weightedlassocv method)": [[68, "econml.sklearn_extensions.linear_model.WeightedLassoCV.set_score_request", false]], "set_score_request() (econml.sklearn_extensions.linear_model.weightedmultitasklassocv method)": [[70, "econml.sklearn_extensions.linear_model.WeightedMultiTaskLassoCV.set_score_request", false]], "shap_values() (econml._cate_estimator.debiasedlassocateestimatormixin method)": [[0, "econml._cate_estimator.DebiasedLassoCateEstimatorMixin.shap_values", false]], "shap_values() (econml._cate_estimator.linearcateestimator method)": [[0, "econml._cate_estimator.LinearCateEstimator.shap_values", false]], "shap_values() (econml._cate_estimator.linearmodelfinalcateestimatormixin method)": [[0, "econml._cate_estimator.LinearModelFinalCateEstimatorMixin.shap_values", false]], "shap_values() (econml._cate_estimator.statsmodelscateestimatormixin method)": [[0, "econml._cate_estimator.StatsModelsCateEstimatorMixin.shap_values", false]], "shap_values() (econml._ortho_learner._ortholearner method)": [[1, "econml._ortho_learner._OrthoLearner.shap_values", false]], "shap_values() (econml.dml._rlearner._rlearner method)": [[10, "econml.dml._rlearner._RLearner.shap_values", false]], "shap_values() (econml.dml.causalforestdml method)": [[4, "econml.dml.CausalForestDML.shap_values", false]], "shap_values() (econml.dml.dml method)": [[5, "econml.dml.DML.shap_values", false]], "shap_values() (econml.dml.kerneldml method)": [[6, "econml.dml.KernelDML.shap_values", false]], "shap_values() (econml.dml.lineardml method)": [[7, "econml.dml.LinearDML.shap_values", false]], "shap_values() (econml.dml.nonparamdml method)": [[8, "econml.dml.NonParamDML.shap_values", false]], "shap_values() (econml.dml.sparselineardml method)": [[9, "econml.dml.SparseLinearDML.shap_values", false]], "shap_values() (econml.dr.drlearner method)": [[12, "econml.dr.DRLearner.shap_values", false]], "shap_values() (econml.dr.forestdrlearner method)": [[13, "econml.dr.ForestDRLearner.shap_values", false]], "shap_values() (econml.dr.lineardrlearner method)": [[14, "econml.dr.LinearDRLearner.shap_values", false]], "shap_values() (econml.dr.sparselineardrlearner method)": [[15, "econml.dr.SparseLinearDRLearner.shap_values", false]], "shap_values() (econml.federated_learning.federatedestimator method)": [[16, "econml.federated_learning.FederatedEstimator.shap_values", false]], "shap_values() (econml.iv.dml.dmliv method)": [[37, "econml.iv.dml.DMLIV.shap_values", false]], "shap_values() (econml.iv.dml.nonparamdmliv method)": [[38, "econml.iv.dml.NonParamDMLIV.shap_values", false]], "shap_values() (econml.iv.dml.orthoiv method)": [[39, "econml.iv.dml.OrthoIV.shap_values", false]], "shap_values() (econml.iv.dr.driv method)": [[40, "econml.iv.dr.DRIV.shap_values", false]], "shap_values() (econml.iv.dr.forestdriv method)": [[41, "econml.iv.dr.ForestDRIV.shap_values", false]], "shap_values() (econml.iv.dr.intenttotreatdriv method)": [[42, "econml.iv.dr.IntentToTreatDRIV.shap_values", false]], "shap_values() (econml.iv.dr.lineardriv method)": [[43, "econml.iv.dr.LinearDRIV.shap_values", false]], "shap_values() (econml.iv.dr.linearintenttotreatdriv method)": [[44, "econml.iv.dr.LinearIntentToTreatDRIV.shap_values", false]], "shap_values() (econml.iv.dr.sparselineardriv method)": [[45, "econml.iv.dr.SparseLinearDRIV.shap_values", false]], "shap_values() (econml.metalearners.domainadaptationlearner method)": [[49, "econml.metalearners.DomainAdaptationLearner.shap_values", false]], "shap_values() (econml.metalearners.slearner method)": [[50, "econml.metalearners.SLearner.shap_values", false]], "shap_values() (econml.metalearners.tlearner method)": [[51, "econml.metalearners.TLearner.shap_values", false]], "shap_values() (econml.metalearners.xlearner method)": [[52, "econml.metalearners.XLearner.shap_values", false]], "shap_values() (econml.orf.dmlorthoforest method)": [[53, "econml.orf.DMLOrthoForest.shap_values", false]], "shap_values() (econml.orf.drorthoforest method)": [[54, "econml.orf.DROrthoForest.shap_values", false]], "shap_values() (econml.panel.dml.dynamicdml method)": [[55, "econml.panel.dml.DynamicDML.shap_values", false]], "shape() (in module econml.utilities)": [[75, "econml.utilities.shape", false]], "sievetsls (class in econml.iv.sieve)": [[48, "econml.iv.sieve.SieveTSLS", false]], "singletreecateinterpreter (class in econml.cate_interpreter)": [[2, "econml.cate_interpreter.SingleTreeCateInterpreter", false]], "singletreepolicyinterpreter (class in econml.cate_interpreter)": [[3, "econml.cate_interpreter.SingleTreePolicyInterpreter", false]], "size() (in module econml.utilities)": [[75, "econml.utilities.size", false]], "slearner (class in econml.metalearners)": [[50, "econml.metalearners.SLearner", false]], "sparse_coef_ (econml.sklearn_extensions.linear_model.debiasedlasso property)": [[62, "econml.sklearn_extensions.linear_model.DebiasedLasso.sparse_coef_", false]], "sparse_coef_ (econml.sklearn_extensions.linear_model.weightedlasso property)": [[67, "econml.sklearn_extensions.linear_model.WeightedLasso.sparse_coef_", false]], "sparselineardml (class in econml.dml)": [[9, "econml.dml.SparseLinearDML", false]], "sparselineardriv (class in econml.iv.dr)": [[45, "econml.iv.dr.SparseLinearDRIV", false]], "sparselineardrlearner (class in econml.dr)": [[15, "econml.dr.SparseLinearDRLearner", false]], "split() (econml.sklearn_extensions.model_selection.weightedkfold method)": [[72, "econml.sklearn_extensions.model_selection.WeightedKFold.split", false]], "split() (econml.sklearn_extensions.model_selection.weightedstratifiedkfold method)": [[73, "econml.sklearn_extensions.model_selection.WeightedStratifiedKFold.split", false]], "stack() (in module econml.utilities)": [[75, "econml.utilities.stack", false]], "statsmodelscateestimatordiscretemixin (class in econml._cate_estimator)": [[0, "econml._cate_estimator.StatsModelsCateEstimatorDiscreteMixin", false]], "statsmodelscateestimatormixin (class in econml._cate_estimator)": [[0, "econml._cate_estimator.StatsModelsCateEstimatorMixin", false]], "statsmodelsinference (class in econml.inference)": [[34, "econml.inference.StatsModelsInference", false]], "statsmodelsinferencediscrete (class in econml.inference)": [[35, "econml.inference.StatsModelsInferenceDiscrete", false]], "statsmodelslinearregression (class in econml.sklearn_extensions.linear_model)": [[65, "econml.sklearn_extensions.linear_model.StatsModelsLinearRegression", false]], "statsmodelsrlm (class in econml.sklearn_extensions.linear_model)": [[66, "econml.sklearn_extensions.linear_model.StatsModelsRLM", false]], "std_point (econml.inference.populationsummaryresults property)": [[33, "econml.inference.PopulationSummaryResults.std_point", false]], "stderr (econml.inference.empiricalinferenceresults property)": [[26, "econml.inference.EmpiricalInferenceResults.stderr", false]], "stderr (econml.inference.normalinferenceresults property)": [[32, "econml.inference.NormalInferenceResults.stderr", false]], "stderr_mean (econml.inference.populationsummaryresults property)": [[33, "econml.inference.PopulationSummaryResults.stderr_mean", false]], "stderr_point (econml.inference.populationsummaryresults property)": [[33, "econml.inference.PopulationSummaryResults.stderr_point", false]], "strata_from_discrete_arrays() (in module econml.utilities)": [[75, "econml.utilities.strata_from_discrete_arrays", false]], "summary (class in econml.utilities)": [[75, "econml.utilities.Summary", false]], "summary() (econml._cate_estimator.debiasedlassocateestimatordiscretemixin method)": [[0, "econml._cate_estimator.DebiasedLassoCateEstimatorDiscreteMixin.summary", false]], "summary() (econml._cate_estimator.debiasedlassocateestimatormixin method)": [[0, "econml._cate_estimator.DebiasedLassoCateEstimatorMixin.summary", false]], "summary() (econml._cate_estimator.linearmodelfinalcateestimatordiscretemixin method)": [[0, "econml._cate_estimator.LinearModelFinalCateEstimatorDiscreteMixin.summary", false]], "summary() (econml._cate_estimator.linearmodelfinalcateestimatormixin method)": [[0, "econml._cate_estimator.LinearModelFinalCateEstimatorMixin.summary", false]], "summary() (econml._cate_estimator.statsmodelscateestimatordiscretemixin method)": [[0, "econml._cate_estimator.StatsModelsCateEstimatorDiscreteMixin.summary", false]], "summary() (econml._cate_estimator.statsmodelscateestimatormixin method)": [[0, "econml._cate_estimator.StatsModelsCateEstimatorMixin.summary", false]], "summary() (econml.dml.causalforestdml method)": [[4, "econml.dml.CausalForestDML.summary", false]], "summary() (econml.dml.dml method)": [[5, "econml.dml.DML.summary", false]], "summary() (econml.dml.kerneldml method)": [[6, "econml.dml.KernelDML.summary", false]], "summary() (econml.dml.lineardml method)": [[7, "econml.dml.LinearDML.summary", false]], "summary() (econml.dml.sparselineardml method)": [[9, "econml.dml.SparseLinearDML.summary", false]], "summary() (econml.dr.lineardrlearner method)": [[14, "econml.dr.LinearDRLearner.summary", false]], "summary() (econml.dr.sparselineardrlearner method)": [[15, "econml.dr.SparseLinearDRLearner.summary", false]], "summary() (econml.inference.populationsummaryresults method)": [[33, "econml.inference.PopulationSummaryResults.summary", false]], "summary() (econml.iv.dml.dmliv method)": [[37, "econml.iv.dml.DMLIV.summary", false]], "summary() (econml.iv.dml.orthoiv method)": [[39, "econml.iv.dml.OrthoIV.summary", false]], "summary() (econml.iv.dr.lineardriv method)": [[43, "econml.iv.dr.LinearDRIV.summary", false]], "summary() (econml.iv.dr.linearintenttotreatdriv method)": [[44, "econml.iv.dr.LinearIntentToTreatDRIV.summary", false]], "summary() (econml.iv.dr.sparselineardriv method)": [[45, "econml.iv.dr.SparseLinearDRIV.summary", false]], "summary() (econml.panel.dml.dynamicdml method)": [[55, "econml.panel.dml.DynamicDML.summary", false]], "summary() (econml.validate.blpevaluationresults method)": [[76, "econml.validate.BLPEvaluationResults.summary", false]], "summary() (econml.validate.calibrationevaluationresults method)": [[77, "econml.validate.CalibrationEvaluationResults.summary", false]], "summary() (econml.validate.evaluationresults method)": [[79, "econml.validate.EvaluationResults.summary", false]], "summary() (econml.validate.upliftevaluationresults method)": [[80, "econml.validate.UpliftEvaluationResults.summary", false]], "summary_frame() (econml.inference.empiricalinferenceresults method)": [[26, "econml.inference.EmpiricalInferenceResults.summary_frame", false]], "summary_frame() (econml.inference.normalinferenceresults method)": [[32, "econml.inference.NormalInferenceResults.summary_frame", false]], "t (econml._ortho_learner.cachedvalues attribute)": [[1, "econml._ortho_learner.CachedValues.T", false]], "tables (econml.utilities.summary attribute)": [[75, "econml.utilities.Summary.tables", false]], "tensordot() (in module econml.utilities)": [[75, "econml.utilities.tensordot", false]], "tlearner (class in econml.metalearners)": [[51, "econml.metalearners.TLearner", false]], "tocoo() (in module econml.utilities)": [[75, "econml.utilities.tocoo", false]], "todense() (in module econml.utilities)": [[75, "econml.utilities.todense", false]], "trained_feature_indices_ (econml.solutions.causal_analysis.causalanalysis attribute)": [[74, "econml.solutions.causal_analysis.CausalAnalysis.trained_feature_indices_", false]], "transform() (econml.iv.sieve.dpolynomialfeatures method)": [[46, "econml.iv.sieve.DPolynomialFeatures.transform", false]], "transform() (econml.iv.sieve.hermitefeatures method)": [[47, "econml.iv.sieve.HermiteFeatures.transform", false]], "transform() (econml.utilities.identityfeatures method)": [[75, "econml.utilities.IdentityFeatures.transform", false]], "translate() (econml.inference.empiricalinferenceresults method)": [[26, "econml.inference.EmpiricalInferenceResults.translate", false]], "translate() (econml.inference.normalinferenceresults method)": [[32, "econml.inference.NormalInferenceResults.translate", false]], "transpose() (in module econml.utilities)": [[75, "econml.utilities.transpose", false]], "transpose_dictionary() (in module econml.utilities)": [[75, "econml.utilities.transpose_dictionary", false]], "treat() (econml.cate_interpreter.singletreepolicyinterpreter method)": [[3, "econml.cate_interpreter.SingleTreePolicyInterpreter.treat", false]], "treatment assignment": [[99, "term-TREATMENT-ASSIGNMENT", true]], "treatment responsiveness": [[99, "term-TREATMENT-RESPONSIVENESS", true]], "treatmentexpansionmixin (class in econml._cate_estimator)": [[0, "econml._cate_estimator.TreatmentExpansionMixin", false]], "tree_ (econml.grf._base_grftree.grftree attribute)": [[24, "econml.grf._base_grftree.GRFTree.tree_", false]], "tree_ (econml.policy.policytree attribute)": [[59, "econml.policy.PolicyTree.tree_", false]], "tree_model_ (econml.cate_interpreter.singletreepolicyinterpreter attribute)": [[3, "econml.cate_interpreter.SingleTreePolicyInterpreter.tree_model_", false]], "tune() (econml.dml.causalforestdml method)": [[4, "econml.dml.CausalForestDML.tune", false]], "typical_treatment_value() (econml.solutions.causal_analysis.causalanalysis method)": [[74, "econml.solutions.causal_analysis.CausalAnalysis.typical_treatment_value", false]], "untrained_feature_indices_ (econml.solutions.causal_analysis.causalanalysis attribute)": [[74, "econml.solutions.causal_analysis.CausalAnalysis.untrained_feature_indices_", false]], "upliftevaluationresults (class in econml.validate)": [[80, "econml.validate.UpliftEvaluationResults", false]], "var (econml.inference.empiricalinferenceresults property)": [[26, "econml.inference.EmpiricalInferenceResults.var", false]], "var (econml.inference.normalinferenceresults property)": [[32, "econml.inference.NormalInferenceResults.var", false]], "vstack() (in module econml.utilities)": [[75, "econml.utilities.vstack", false]], "w (econml._ortho_learner.cachedvalues attribute)": [[1, "econml._ortho_learner.CachedValues.W", false]], "weightedkfold (class in econml.sklearn_extensions.model_selection)": [[72, "econml.sklearn_extensions.model_selection.WeightedKFold", false]], "weightedlasso (class in econml.sklearn_extensions.linear_model)": [[67, "econml.sklearn_extensions.linear_model.WeightedLasso", false]], "weightedlassocv (class in econml.sklearn_extensions.linear_model)": [[68, "econml.sklearn_extensions.linear_model.WeightedLassoCV", false]], "weightedlassocvwrapper (class in econml.sklearn_extensions.linear_model)": [[69, "econml.sklearn_extensions.linear_model.WeightedLassoCVWrapper", false]], "weightedmodelwrapper (class in econml.utilities)": [[75, "econml.utilities.WeightedModelWrapper", false]], "weightedmultitasklassocv (class in econml.sklearn_extensions.linear_model)": [[70, "econml.sklearn_extensions.linear_model.WeightedMultiTaskLassoCV", false]], "weightedstratifiedkfold (class in econml.sklearn_extensions.model_selection)": [[73, "econml.sklearn_extensions.model_selection.WeightedStratifiedKFold", false]], "whatif() (econml.solutions.causal_analysis.causalanalysis method)": [[74, "econml.solutions.causal_analysis.CausalAnalysis.whatif", false]], "x (econml._ortho_learner.cachedvalues attribute)": [[1, "econml._ortho_learner.CachedValues.X", false]], "xlearner (class in econml.metalearners)": [[52, "econml.metalearners.XLearner", false]], "y (econml._ortho_learner.cachedvalues attribute)": [[1, "econml._ortho_learner.CachedValues.Y", false]], "z (econml._ortho_learner.cachedvalues attribute)": [[1, "econml._ortho_learner.CachedValues.Z", false]], "zstat() (econml.inference.empiricalinferenceresults method)": [[26, "econml.inference.EmpiricalInferenceResults.zstat", false]], "zstat() (econml.inference.normalinferenceresults method)": [[32, "econml.inference.NormalInferenceResults.zstat", false]], "zstat() (econml.inference.populationsummaryresults method)": [[33, "econml.inference.PopulationSummaryResults.zstat", false]]}, "objects": {"econml": [[0, 0, 0, "-", "_cate_estimator"], [1, 0, 0, "-", "_ortho_learner"], [75, 0, 0, "-", "utilities"]], "econml._cate_estimator": [[0, 1, 1, "", "BaseCateEstimator"], [0, 1, 1, "", "DebiasedLassoCateEstimatorDiscreteMixin"], [0, 1, 1, "", "DebiasedLassoCateEstimatorMixin"], [0, 1, 1, "", "ForestModelFinalCateEstimatorDiscreteMixin"], [0, 1, 1, "", "ForestModelFinalCateEstimatorMixin"], [0, 1, 1, "", "LinearCateEstimator"], [0, 1, 1, "", "LinearModelFinalCateEstimatorDiscreteMixin"], [0, 1, 1, "", "LinearModelFinalCateEstimatorMixin"], [0, 1, 1, "", "StatsModelsCateEstimatorDiscreteMixin"], [0, 1, 1, "", "StatsModelsCateEstimatorMixin"], [0, 1, 1, "", "TreatmentExpansionMixin"]], "econml._cate_estimator.BaseCateEstimator": [[0, 2, 1, "", "ate"], [0, 2, 1, "", "ate_inference"], [0, 2, 1, "", "ate_interval"], [0, 2, 1, "", "cate_feature_names"], [0, 2, 1, "", "cate_output_names"], [0, 2, 1, "", "cate_treatment_names"], [0, 3, 1, "", "dowhy"], [0, 2, 1, "", "effect"], [0, 2, 1, "", "effect_inference"], [0, 2, 1, "", "effect_interval"], [0, 2, 1, "", "fit"], [0, 2, 1, "", "marginal_ate"], [0, 2, 1, "", "marginal_ate_inference"], [0, 2, 1, "", "marginal_ate_interval"], [0, 2, 1, "", "marginal_effect"], [0, 2, 1, "", "marginal_effect_inference"], [0, 2, 1, "", "marginal_effect_interval"]], "econml._cate_estimator.DebiasedLassoCateEstimatorDiscreteMixin": [[0, 2, 1, "", "ate"], [0, 2, 1, "", "ate_inference"], [0, 2, 1, "", "ate_interval"], [0, 2, 1, "", "cate_feature_names"], [0, 2, 1, "", "cate_output_names"], [0, 2, 1, "", "cate_treatment_names"], [0, 2, 1, "", "coef_"], [0, 2, 1, "", "coef__inference"], [0, 2, 1, "", "coef__interval"], [0, 3, 1, "", "dowhy"], [0, 2, 1, "", "effect"], [0, 2, 1, "", "effect_inference"], [0, 2, 1, "", "effect_interval"], [0, 2, 1, "", "fit"], [0, 2, 1, "", "intercept_"], [0, 2, 1, "", "intercept__inference"], [0, 2, 1, "", "intercept__interval"], [0, 2, 1, "", "marginal_ate"], [0, 2, 1, "", "marginal_ate_inference"], [0, 2, 1, "", "marginal_ate_interval"], [0, 2, 1, "", "marginal_effect"], [0, 2, 1, "", "marginal_effect_inference"], [0, 2, 1, "", "marginal_effect_interval"], [0, 2, 1, "", "summary"]], "econml._cate_estimator.DebiasedLassoCateEstimatorMixin": [[0, 2, 1, "", "ate"], [0, 2, 1, "", "ate_inference"], [0, 2, 1, "", "ate_interval"], [0, 2, 1, "", "cate_feature_names"], [0, 2, 1, "", "cate_output_names"], [0, 2, 1, "", "cate_treatment_names"], [0, 3, 1, "", "coef_"], [0, 2, 1, "", "coef__inference"], [0, 2, 1, "", "coef__interval"], [0, 3, 1, "", "dowhy"], [0, 2, 1, "", "effect"], [0, 2, 1, "", "effect_inference"], [0, 2, 1, "", "effect_interval"], [0, 2, 1, "", "fit"], [0, 3, 1, "", "intercept_"], [0, 2, 1, "", "intercept__inference"], [0, 2, 1, "", "intercept__interval"], [0, 2, 1, "", "marginal_ate"], [0, 2, 1, "", "marginal_ate_inference"], [0, 2, 1, "", "marginal_ate_interval"], [0, 2, 1, "", "marginal_effect"], [0, 2, 1, "", "marginal_effect_inference"], [0, 2, 1, "", "marginal_effect_interval"], [0, 2, 1, "", "shap_values"], [0, 2, 1, "", "summary"]], "econml._cate_estimator.ForestModelFinalCateEstimatorDiscreteMixin": [[0, 2, 1, "", "ate"], [0, 2, 1, "", "ate_inference"], [0, 2, 1, "", "ate_interval"], [0, 2, 1, "", "cate_feature_names"], [0, 2, 1, "", "cate_output_names"], [0, 2, 1, "", "cate_treatment_names"], [0, 3, 1, "", "dowhy"], [0, 2, 1, "", "effect"], [0, 2, 1, "", "effect_inference"], [0, 2, 1, "", "effect_interval"], [0, 2, 1, "", "fit"], [0, 2, 1, "", "marginal_ate"], [0, 2, 1, "", "marginal_ate_inference"], [0, 2, 1, "", "marginal_ate_interval"], [0, 2, 1, "", "marginal_effect"], [0, 2, 1, "", "marginal_effect_inference"], [0, 2, 1, "", "marginal_effect_interval"]], "econml._cate_estimator.ForestModelFinalCateEstimatorMixin": [[0, 2, 1, "", "ate"], [0, 2, 1, "", "ate_inference"], [0, 2, 1, "", "ate_interval"], [0, 2, 1, "", "cate_feature_names"], [0, 2, 1, "", "cate_output_names"], [0, 2, 1, "", "cate_treatment_names"], [0, 3, 1, "", "dowhy"], [0, 2, 1, "", "effect"], [0, 2, 1, "", "effect_inference"], [0, 2, 1, "", "effect_interval"], [0, 2, 1, "", "fit"], [0, 2, 1, "", "marginal_ate"], [0, 2, 1, "", "marginal_ate_inference"], [0, 2, 1, "", "marginal_ate_interval"], [0, 2, 1, "", "marginal_effect"], [0, 2, 1, "", "marginal_effect_inference"], [0, 2, 1, "", "marginal_effect_interval"]], "econml._cate_estimator.LinearCateEstimator": [[0, 2, 1, "", "ate"], [0, 2, 1, "", "ate_inference"], [0, 2, 1, "", "ate_interval"], [0, 2, 1, "", "cate_feature_names"], [0, 2, 1, "", "cate_output_names"], [0, 2, 1, "", "cate_treatment_names"], [0, 2, 1, "", "const_marginal_ate"], [0, 2, 1, "", "const_marginal_ate_inference"], [0, 2, 1, "", "const_marginal_ate_interval"], [0, 2, 1, "", "const_marginal_effect"], [0, 2, 1, "", "const_marginal_effect_inference"], [0, 2, 1, "", "const_marginal_effect_interval"], [0, 3, 1, "", "dowhy"], [0, 2, 1, "", "effect"], [0, 2, 1, "", "effect_inference"], [0, 2, 1, "", "effect_interval"], [0, 2, 1, "", "fit"], [0, 2, 1, "", "marginal_ate"], [0, 2, 1, "", "marginal_ate_inference"], [0, 2, 1, "", "marginal_ate_interval"], [0, 2, 1, "", "marginal_effect"], [0, 2, 1, "", "marginal_effect_inference"], [0, 2, 1, "", "marginal_effect_interval"], [0, 2, 1, "", "shap_values"]], "econml._cate_estimator.LinearModelFinalCateEstimatorDiscreteMixin": [[0, 2, 1, "", "ate"], [0, 2, 1, "", "ate_inference"], [0, 2, 1, "", "ate_interval"], [0, 2, 1, "", "cate_feature_names"], [0, 2, 1, "", "cate_output_names"], [0, 2, 1, "", "cate_treatment_names"], [0, 2, 1, "", "coef_"], [0, 2, 1, "", "coef__inference"], [0, 2, 1, "", "coef__interval"], [0, 3, 1, "", "dowhy"], [0, 2, 1, "", "effect"], [0, 2, 1, "", "effect_inference"], [0, 2, 1, "", "effect_interval"], [0, 2, 1, "", "fit"], [0, 2, 1, "", "intercept_"], [0, 2, 1, "", "intercept__inference"], [0, 2, 1, "", "intercept__interval"], [0, 2, 1, "", "marginal_ate"], [0, 2, 1, "", "marginal_ate_inference"], [0, 2, 1, "", "marginal_ate_interval"], [0, 2, 1, "", "marginal_effect"], [0, 2, 1, "", "marginal_effect_inference"], [0, 2, 1, "", "marginal_effect_interval"], [0, 2, 1, "", "summary"]], "econml._cate_estimator.LinearModelFinalCateEstimatorMixin": [[0, 2, 1, "", "ate"], [0, 2, 1, "", "ate_inference"], [0, 2, 1, "", "ate_interval"], [0, 4, 1, "", "bias_part_of_coef"], [0, 2, 1, "", "cate_feature_names"], [0, 2, 1, "", "cate_output_names"], [0, 2, 1, "", "cate_treatment_names"], [0, 3, 1, "", "coef_"], [0, 2, 1, "", "coef__inference"], [0, 2, 1, "", "coef__interval"], [0, 3, 1, "", "dowhy"], [0, 2, 1, "", "effect"], [0, 2, 1, "", "effect_inference"], [0, 2, 1, "", "effect_interval"], [0, 2, 1, "", "fit"], [0, 3, 1, "", "intercept_"], [0, 2, 1, "", "intercept__inference"], [0, 2, 1, "", "intercept__interval"], [0, 2, 1, "", "marginal_ate"], [0, 2, 1, "", "marginal_ate_inference"], [0, 2, 1, "", "marginal_ate_interval"], [0, 2, 1, "", "marginal_effect"], [0, 2, 1, "", "marginal_effect_inference"], [0, 2, 1, "", "marginal_effect_interval"], [0, 2, 1, "", "shap_values"], [0, 2, 1, "", "summary"]], "econml._cate_estimator.StatsModelsCateEstimatorDiscreteMixin": [[0, 2, 1, "", "ate"], [0, 2, 1, "", "ate_inference"], [0, 2, 1, "", "ate_interval"], [0, 2, 1, "", "cate_feature_names"], [0, 2, 1, "", "cate_output_names"], [0, 2, 1, "", "cate_treatment_names"], [0, 2, 1, "", "coef_"], [0, 2, 1, "", "coef__inference"], [0, 2, 1, "", "coef__interval"], [0, 3, 1, "", "dowhy"], [0, 2, 1, "", "effect"], [0, 2, 1, "", "effect_inference"], [0, 2, 1, "", "effect_interval"], [0, 2, 1, "", "fit"], [0, 2, 1, "", "intercept_"], [0, 2, 1, "", "intercept__inference"], [0, 2, 1, "", "intercept__interval"], [0, 2, 1, "", "marginal_ate"], [0, 2, 1, "", "marginal_ate_inference"], [0, 2, 1, "", "marginal_ate_interval"], [0, 2, 1, "", "marginal_effect"], [0, 2, 1, "", "marginal_effect_inference"], [0, 2, 1, "", "marginal_effect_interval"], [0, 2, 1, "", "summary"]], "econml._cate_estimator.StatsModelsCateEstimatorMixin": [[0, 2, 1, "", "ate"], [0, 2, 1, "", "ate_inference"], [0, 2, 1, "", "ate_interval"], [0, 2, 1, "", "cate_feature_names"], [0, 2, 1, "", "cate_output_names"], [0, 2, 1, "", "cate_treatment_names"], [0, 3, 1, "", "coef_"], [0, 2, 1, "", "coef__inference"], [0, 2, 1, "", "coef__interval"], [0, 3, 1, "", "dowhy"], [0, 2, 1, "", "effect"], [0, 2, 1, "", "effect_inference"], [0, 2, 1, "", "effect_interval"], [0, 2, 1, "", "fit"], [0, 3, 1, "", "intercept_"], [0, 2, 1, "", "intercept__inference"], [0, 2, 1, "", "intercept__interval"], [0, 2, 1, "", "marginal_ate"], [0, 2, 1, "", "marginal_ate_inference"], [0, 2, 1, "", "marginal_ate_interval"], [0, 2, 1, "", "marginal_effect"], [0, 2, 1, "", "marginal_effect_inference"], [0, 2, 1, "", "marginal_effect_interval"], [0, 2, 1, "", "shap_values"], [0, 2, 1, "", "summary"]], "econml._cate_estimator.TreatmentExpansionMixin": [[0, 2, 1, "", "ate"], [0, 2, 1, "", "ate_inference"], [0, 2, 1, "", "ate_interval"], [0, 2, 1, "", "cate_feature_names"], [0, 2, 1, "", "cate_output_names"], [0, 2, 1, "", "cate_treatment_names"], [0, 3, 1, "", "dowhy"], [0, 2, 1, "", "effect"], [0, 2, 1, "", "effect_inference"], [0, 2, 1, "", "effect_interval"], [0, 2, 1, "", "fit"], [0, 2, 1, "", "marginal_ate"], [0, 2, 1, "", "marginal_ate_inference"], [0, 2, 1, "", "marginal_ate_interval"], [0, 2, 1, "", "marginal_effect"], [0, 2, 1, "", "marginal_effect_inference"], [0, 2, 1, "", "marginal_effect_interval"]], "econml._ortho_learner": [[1, 1, 1, "", "CachedValues"], [1, 1, 1, "", "_OrthoLearner"], [1, 5, 1, "", "_crossfit"]], "econml._ortho_learner.CachedValues": [[1, 4, 1, "", "T"], [1, 4, 1, "", "W"], [1, 4, 1, "", "X"], [1, 4, 1, "", "Y"], [1, 4, 1, "", "Z"], [1, 2, 1, "", "count"], [1, 4, 1, "", "freq_weight"], [1, 4, 1, "", "groups"], [1, 2, 1, "", "index"], [1, 4, 1, "", "nuisances"], [1, 4, 1, "", "sample_var"], [1, 4, 1, "", "sample_weight"]], "econml._ortho_learner._OrthoLearner": [[1, 2, 1, "", "ate"], [1, 2, 1, "", "ate_inference"], [1, 2, 1, "", "ate_interval"], [1, 2, 1, "", "cate_feature_names"], [1, 2, 1, "", "cate_output_names"], [1, 2, 1, "", "cate_treatment_names"], [1, 2, 1, "", "const_marginal_ate"], [1, 2, 1, "", "const_marginal_ate_inference"], [1, 2, 1, "", "const_marginal_ate_interval"], [1, 2, 1, "", "const_marginal_effect"], [1, 2, 1, "", "const_marginal_effect_inference"], [1, 2, 1, "", "const_marginal_effect_interval"], [1, 3, 1, "", "dowhy"], [1, 2, 1, "", "effect"], [1, 2, 1, "", "effect_inference"], [1, 2, 1, "", "effect_interval"], [1, 2, 1, "", "fit"], [1, 2, 1, "", "marginal_ate"], [1, 2, 1, "", "marginal_ate_inference"], [1, 2, 1, "", "marginal_ate_interval"], [1, 2, 1, "", "marginal_effect"], [1, 2, 1, "", "marginal_effect_inference"], [1, 2, 1, "", "marginal_effect_interval"], [1, 4, 1, "", "models_nuisance_"], [1, 4, 1, "", "nuisance_scores_"], [1, 4, 1, "", "ortho_learner_model_final_"], [1, 2, 1, "", "refit_final"], [1, 2, 1, "", "score"], [1, 4, 1, "", "score_"], [1, 2, 1, "", "shap_values"]], "econml.cate_interpreter": [[2, 1, 1, "", "SingleTreeCateInterpreter"], [3, 1, 1, "", "SingleTreePolicyInterpreter"]], "econml.cate_interpreter.SingleTreeCateInterpreter": [[2, 2, 1, "", "__init__"], [2, 2, 1, "", "export_graphviz"], [2, 2, 1, "", "interpret"], [2, 2, 1, "", "plot"], [2, 2, 1, "", "render"]], "econml.cate_interpreter.SingleTreePolicyInterpreter": [[3, 2, 1, "", "__init__"], [3, 4, 1, "", "always_treat_value_"], [3, 2, 1, "", "export_graphviz"], [3, 2, 1, "", "interpret"], [3, 2, 1, "", "plot"], [3, 4, 1, "", "policy_value_"], [3, 2, 1, "", "render"], [3, 2, 1, "", "treat"], [3, 4, 1, "", "tree_model_"]], "econml.dml": [[4, 1, 1, "", "CausalForestDML"], [5, 1, 1, "", "DML"], [6, 1, 1, "", "KernelDML"], [7, 1, 1, "", "LinearDML"], [8, 1, 1, "", "NonParamDML"], [9, 1, 1, "", "SparseLinearDML"], [10, 0, 0, "-", "_rlearner"]], "econml.dml.CausalForestDML": [[4, 2, 1, "", "__init__"], [4, 2, 1, "", "ate"], [4, 4, 1, "", "ate_"], [4, 2, 1, "", "ate__inference"], [4, 2, 1, "", "ate_inference"], [4, 2, 1, "", "ate_interval"], [4, 4, 1, "", "ate_stderr_"], [4, 2, 1, "", "att_"], [4, 2, 1, "", "att__inference"], [4, 2, 1, "", "att_stderr_"], [4, 2, 1, "", "cate_feature_names"], [4, 2, 1, "", "cate_output_names"], [4, 2, 1, "", "cate_treatment_names"], [4, 2, 1, "", "const_marginal_ate"], [4, 2, 1, "", "const_marginal_ate_inference"], [4, 2, 1, "", "const_marginal_ate_interval"], [4, 2, 1, "", "const_marginal_effect"], [4, 2, 1, "", "const_marginal_effect_inference"], [4, 2, 1, "", "const_marginal_effect_interval"], [4, 3, 1, "", "dowhy"], [4, 2, 1, "", "effect"], [4, 2, 1, "", "effect_inference"], [4, 2, 1, "", "effect_interval"], [4, 4, 1, "", "feature_importances_"], [4, 2, 1, "", "fit"], [4, 2, 1, "", "marginal_ate"], [4, 2, 1, "", "marginal_ate_inference"], [4, 2, 1, "", "marginal_ate_interval"], [4, 2, 1, "", "marginal_effect"], [4, 2, 1, "", "marginal_effect_inference"], [4, 2, 1, "", "marginal_effect_interval"], [4, 3, 1, "", "model_cate"], [4, 3, 1, "", "models_t"], [4, 3, 1, "", "models_y"], [4, 2, 1, "", "refit_final"], [4, 3, 1, "", "residuals_"], [4, 2, 1, "", "robustness_value"], [4, 2, 1, "", "score"], [4, 2, 1, "", "score_nuisances"], [4, 2, 1, "", "sensitivity_interval"], [4, 2, 1, "", "sensitivity_summary"], [4, 2, 1, "", "shap_values"], [4, 2, 1, "", "summary"], [4, 2, 1, "", "tune"]], "econml.dml.DML": [[5, 2, 1, "", "__init__"], [5, 2, 1, "", "ate"], [5, 2, 1, "", "ate_inference"], [5, 2, 1, "", "ate_interval"], [5, 2, 1, "", "cate_feature_names"], [5, 2, 1, "", "cate_output_names"], [5, 2, 1, "", "cate_treatment_names"], [5, 3, 1, "", "coef_"], [5, 2, 1, "", "coef__inference"], [5, 2, 1, "", "coef__interval"], [5, 2, 1, "", "const_marginal_ate"], [5, 2, 1, "", "const_marginal_ate_inference"], [5, 2, 1, "", "const_marginal_ate_interval"], [5, 2, 1, "", "const_marginal_effect"], [5, 2, 1, "", "const_marginal_effect_inference"], [5, 2, 1, "", "const_marginal_effect_interval"], [5, 3, 1, "", "dowhy"], [5, 2, 1, "", "effect"], [5, 2, 1, "", "effect_inference"], [5, 2, 1, "", "effect_interval"], [5, 2, 1, "", "fit"], [5, 3, 1, "", "intercept_"], [5, 2, 1, "", "intercept__inference"], [5, 2, 1, "", "intercept__interval"], [5, 2, 1, "", "marginal_ate"], [5, 2, 1, "", "marginal_ate_inference"], [5, 2, 1, "", "marginal_ate_interval"], [5, 2, 1, "", "marginal_effect"], [5, 2, 1, "", "marginal_effect_inference"], [5, 2, 1, "", "marginal_effect_interval"], [5, 3, 1, "", "model_cate"], [5, 3, 1, "", "models_t"], [5, 3, 1, "", "models_y"], [5, 2, 1, "", "refit_final"], [5, 3, 1, "", "residuals_"], [5, 2, 1, "", "robustness_value"], [5, 2, 1, "", "score"], [5, 2, 1, "", "score_nuisances"], [5, 2, 1, "", "sensitivity_interval"], [5, 2, 1, "", "sensitivity_summary"], [5, 2, 1, "", "shap_values"], [5, 2, 1, "", "summary"]], "econml.dml.KernelDML": [[6, 2, 1, "", "__init__"], [6, 2, 1, "", "ate"], [6, 2, 1, "", "ate_inference"], [6, 2, 1, "", "ate_interval"], [6, 2, 1, "", "cate_feature_names"], [6, 2, 1, "", "cate_output_names"], [6, 2, 1, "", "cate_treatment_names"], [6, 3, 1, "", "coef_"], [6, 2, 1, "", "coef__inference"], [6, 2, 1, "", "coef__interval"], [6, 2, 1, "", "const_marginal_ate"], [6, 2, 1, "", "const_marginal_ate_inference"], [6, 2, 1, "", "const_marginal_ate_interval"], [6, 2, 1, "", "const_marginal_effect"], [6, 2, 1, "", "const_marginal_effect_inference"], [6, 2, 1, "", "const_marginal_effect_interval"], [6, 3, 1, "", "dowhy"], [6, 2, 1, "", "effect"], [6, 2, 1, "", "effect_inference"], [6, 2, 1, "", "effect_interval"], [6, 2, 1, "", "fit"], [6, 3, 1, "", "intercept_"], [6, 2, 1, "", "intercept__inference"], [6, 2, 1, "", "intercept__interval"], [6, 2, 1, "", "marginal_ate"], [6, 2, 1, "", "marginal_ate_inference"], [6, 2, 1, "", "marginal_ate_interval"], [6, 2, 1, "", "marginal_effect"], [6, 2, 1, "", "marginal_effect_inference"], [6, 2, 1, "", "marginal_effect_interval"], [6, 3, 1, "", "model_cate"], [6, 3, 1, "", "models_t"], [6, 3, 1, "", "models_y"], [6, 2, 1, "", "refit_final"], [6, 3, 1, "", "residuals_"], [6, 2, 1, "", "robustness_value"], [6, 2, 1, "", "score"], [6, 2, 1, "", "score_nuisances"], [6, 2, 1, "", "sensitivity_interval"], [6, 2, 1, "", "sensitivity_summary"], [6, 2, 1, "", "shap_values"], [6, 2, 1, "", "summary"]], "econml.dml.LinearDML": [[7, 2, 1, "", "__init__"], [7, 2, 1, "", "ate"], [7, 2, 1, "", "ate_inference"], [7, 2, 1, "", "ate_interval"], [7, 2, 1, "", "cate_feature_names"], [7, 2, 1, "", "cate_output_names"], [7, 2, 1, "", "cate_treatment_names"], [7, 3, 1, "", "coef_"], [7, 2, 1, "", "coef__inference"], [7, 2, 1, "", "coef__interval"], [7, 2, 1, "", "const_marginal_ate"], [7, 2, 1, "", "const_marginal_ate_inference"], [7, 2, 1, "", "const_marginal_ate_interval"], [7, 2, 1, "", "const_marginal_effect"], [7, 2, 1, "", "const_marginal_effect_inference"], [7, 2, 1, "", "const_marginal_effect_interval"], [7, 3, 1, "", "dowhy"], [7, 2, 1, "", "effect"], [7, 2, 1, "", "effect_inference"], [7, 2, 1, "", "effect_interval"], [7, 2, 1, "", "fit"], [7, 3, 1, "", "intercept_"], [7, 2, 1, "", "intercept__inference"], [7, 2, 1, "", "intercept__interval"], [7, 2, 1, "", "marginal_ate"], [7, 2, 1, "", "marginal_ate_inference"], [7, 2, 1, "", "marginal_ate_interval"], [7, 2, 1, "", "marginal_effect"], [7, 2, 1, "", "marginal_effect_inference"], [7, 2, 1, "", "marginal_effect_interval"], [7, 3, 1, "", "model_cate"], [7, 3, 1, "", "models_t"], [7, 3, 1, "", "models_y"], [7, 2, 1, "", "refit_final"], [7, 3, 1, "", "residuals_"], [7, 2, 1, "", "robustness_value"], [7, 2, 1, "", "score"], [7, 2, 1, "", "score_nuisances"], [7, 2, 1, "", "sensitivity_interval"], [7, 2, 1, "", "sensitivity_summary"], [7, 2, 1, "", "shap_values"], [7, 2, 1, "", "summary"]], "econml.dml.NonParamDML": [[8, 2, 1, "", "__init__"], [8, 2, 1, "", "ate"], [8, 2, 1, "", "ate_inference"], [8, 2, 1, "", "ate_interval"], [8, 2, 1, "", "cate_feature_names"], [8, 2, 1, "", "cate_output_names"], [8, 2, 1, "", "cate_treatment_names"], [8, 2, 1, "", "const_marginal_ate"], [8, 2, 1, "", "const_marginal_ate_inference"], [8, 2, 1, "", "const_marginal_ate_interval"], [8, 2, 1, "", "const_marginal_effect"], [8, 2, 1, "", "const_marginal_effect_inference"], [8, 2, 1, "", "const_marginal_effect_interval"], [8, 3, 1, "", "dowhy"], [8, 2, 1, "", "effect"], [8, 2, 1, "", "effect_inference"], [8, 2, 1, "", "effect_interval"], [8, 2, 1, "", "fit"], [8, 2, 1, "", "marginal_ate"], [8, 2, 1, "", "marginal_ate_inference"], [8, 2, 1, "", "marginal_ate_interval"], [8, 2, 1, "", "marginal_effect"], [8, 2, 1, "", "marginal_effect_inference"], [8, 2, 1, "", "marginal_effect_interval"], [8, 3, 1, "", "model_cate"], [8, 3, 1, "", "models_t"], [8, 3, 1, "", "models_y"], [8, 2, 1, "", "refit_final"], [8, 3, 1, "", "residuals_"], [8, 2, 1, "", "score"], [8, 2, 1, "", "score_nuisances"], [8, 2, 1, "", "shap_values"]], "econml.dml.SparseLinearDML": [[9, 2, 1, "", "__init__"], [9, 2, 1, "", "ate"], [9, 2, 1, "", "ate_inference"], [9, 2, 1, "", "ate_interval"], [9, 2, 1, "", "cate_feature_names"], [9, 2, 1, "", "cate_output_names"], [9, 2, 1, "", "cate_treatment_names"], [9, 3, 1, "", "coef_"], [9, 2, 1, "", "coef__inference"], [9, 2, 1, "", "coef__interval"], [9, 2, 1, "", "const_marginal_ate"], [9, 2, 1, "", "const_marginal_ate_inference"], [9, 2, 1, "", "const_marginal_ate_interval"], [9, 2, 1, "", "const_marginal_effect"], [9, 2, 1, "", "const_marginal_effect_inference"], [9, 2, 1, "", "const_marginal_effect_interval"], [9, 3, 1, "", "dowhy"], [9, 2, 1, "", "effect"], [9, 2, 1, "", "effect_inference"], [9, 2, 1, "", "effect_interval"], [9, 2, 1, "", "fit"], [9, 3, 1, "", "intercept_"], [9, 2, 1, "", "intercept__inference"], [9, 2, 1, "", "intercept__interval"], [9, 2, 1, "", "marginal_ate"], [9, 2, 1, "", "marginal_ate_inference"], [9, 2, 1, "", "marginal_ate_interval"], [9, 2, 1, "", "marginal_effect"], [9, 2, 1, "", "marginal_effect_inference"], [9, 2, 1, "", "marginal_effect_interval"], [9, 3, 1, "", "model_cate"], [9, 3, 1, "", "models_t"], [9, 3, 1, "", "models_y"], [9, 2, 1, "", "refit_final"], [9, 3, 1, "", "residuals_"], [9, 2, 1, "", "robustness_value"], [9, 2, 1, "", "score"], [9, 2, 1, "", "score_nuisances"], [9, 2, 1, "", "sensitivity_interval"], [9, 2, 1, "", "sensitivity_summary"], [9, 2, 1, "", "shap_values"], [9, 2, 1, "", "summary"]], "econml.dml._rlearner": [[10, 1, 1, "", "_RLearner"]], "econml.dml._rlearner._RLearner": [[10, 2, 1, "", "ate"], [10, 2, 1, "", "ate_inference"], [10, 2, 1, "", "ate_interval"], [10, 2, 1, "", "cate_feature_names"], [10, 2, 1, "", "cate_output_names"], [10, 2, 1, "", "cate_treatment_names"], [10, 2, 1, "", "const_marginal_ate"], [10, 2, 1, "", "const_marginal_ate_inference"], [10, 2, 1, "", "const_marginal_ate_interval"], [10, 2, 1, "", "const_marginal_effect"], [10, 2, 1, "", "const_marginal_effect_inference"], [10, 2, 1, "", "const_marginal_effect_interval"], [10, 3, 1, "", "dowhy"], [10, 2, 1, "", "effect"], [10, 2, 1, "", "effect_inference"], [10, 2, 1, "", "effect_interval"], [10, 2, 1, "", "fit"], [10, 2, 1, "", "marginal_ate"], [10, 2, 1, "", "marginal_ate_inference"], [10, 2, 1, "", "marginal_ate_interval"], [10, 2, 1, "", "marginal_effect"], [10, 2, 1, "", "marginal_effect_inference"], [10, 2, 1, "", "marginal_effect_interval"], [10, 4, 1, "", "models_t"], [10, 4, 1, "", "models_y"], [10, 4, 1, "", "nuisance_scores_t"], [10, 4, 1, "", "nuisance_scores_y"], [10, 2, 1, "", "refit_final"], [10, 3, 1, "", "residuals_"], [10, 4, 1, "", "rlearner_model_final_"], [10, 2, 1, "", "score"], [10, 4, 1, "", "score_"], [10, 2, 1, "", "score_nuisances"], [10, 2, 1, "", "shap_values"]], "econml.dowhy": [[11, 1, 1, "", "DoWhyWrapper"]], "econml.dowhy.DoWhyWrapper": [[11, 2, 1, "", "__init__"], [11, 2, 1, "", "fit"], [11, 2, 1, "", "refute_estimate"]], "econml.dr": [[12, 1, 1, "", "DRLearner"], [13, 1, 1, "", "ForestDRLearner"], [14, 1, 1, "", "LinearDRLearner"], [15, 1, 1, "", "SparseLinearDRLearner"]], "econml.dr.DRLearner": [[12, 2, 1, "", "__init__"], [12, 2, 1, "", "ate"], [12, 2, 1, "", "ate_inference"], [12, 2, 1, "", "ate_interval"], [12, 2, 1, "", "cate_feature_names"], [12, 2, 1, "", "cate_output_names"], [12, 2, 1, "", "cate_treatment_names"], [12, 2, 1, "", "const_marginal_ate"], [12, 2, 1, "", "const_marginal_ate_inference"], [12, 2, 1, "", "const_marginal_ate_interval"], [12, 2, 1, "", "const_marginal_effect"], [12, 2, 1, "", "const_marginal_effect_inference"], [12, 2, 1, "", "const_marginal_effect_interval"], [12, 3, 1, "", "dowhy"], [12, 2, 1, "", "effect"], [12, 2, 1, "", "effect_inference"], [12, 2, 1, "", "effect_interval"], [12, 3, 1, "", "featurizer_"], [12, 2, 1, "", "fit"], [12, 2, 1, "", "marginal_ate"], [12, 2, 1, "", "marginal_ate_inference"], [12, 2, 1, "", "marginal_ate_interval"], [12, 2, 1, "", "marginal_effect"], [12, 2, 1, "", "marginal_effect_inference"], [12, 2, 1, "", "marginal_effect_interval"], [12, 2, 1, "", "model_cate"], [12, 3, 1, "", "models_propensity"], [12, 3, 1, "", "models_regression"], [12, 3, 1, "", "multitask_model_cate"], [12, 3, 1, "", "nuisance_scores_propensity"], [12, 3, 1, "", "nuisance_scores_regression"], [12, 2, 1, "", "refit_final"], [12, 2, 1, "", "robustness_value"], [12, 2, 1, "", "score"], [12, 4, 1, "", "score_"], [12, 2, 1, "", "sensitivity_interval"], [12, 2, 1, "", "sensitivity_summary"], [12, 2, 1, "", "shap_values"]], "econml.dr.ForestDRLearner": [[13, 2, 1, "", "__init__"], [13, 2, 1, "", "ate"], [13, 2, 1, "", "ate_inference"], [13, 2, 1, "", "ate_interval"], [13, 2, 1, "", "cate_feature_names"], [13, 2, 1, "", "cate_output_names"], [13, 2, 1, "", "cate_treatment_names"], [13, 2, 1, "", "const_marginal_ate"], [13, 2, 1, "", "const_marginal_ate_inference"], [13, 2, 1, "", "const_marginal_ate_interval"], [13, 2, 1, "", "const_marginal_effect"], [13, 2, 1, "", "const_marginal_effect_inference"], [13, 2, 1, "", "const_marginal_effect_interval"], [13, 3, 1, "", "dowhy"], [13, 2, 1, "", "effect"], [13, 2, 1, "", "effect_inference"], [13, 2, 1, "", "effect_interval"], [13, 3, 1, "", "featurizer_"], [13, 2, 1, "", "fit"], [13, 2, 1, "", "marginal_ate"], [13, 2, 1, "", "marginal_ate_inference"], [13, 2, 1, "", "marginal_ate_interval"], [13, 2, 1, "", "marginal_effect"], [13, 2, 1, "", "marginal_effect_inference"], [13, 2, 1, "", "marginal_effect_interval"], [13, 2, 1, "", "model_cate"], [13, 3, 1, "", "models_propensity"], [13, 3, 1, "", "models_regression"], [13, 2, 1, "", "multitask_model_cate"], [13, 3, 1, "", "nuisance_scores_propensity"], [13, 3, 1, "", "nuisance_scores_regression"], [13, 2, 1, "", "refit_final"], [13, 2, 1, "", "robustness_value"], [13, 2, 1, "", "score"], [13, 2, 1, "", "sensitivity_interval"], [13, 2, 1, "", "sensitivity_summary"], [13, 2, 1, "", "shap_values"]], "econml.dr.LinearDRLearner": [[14, 2, 1, "", "__init__"], [14, 2, 1, "", "ate"], [14, 2, 1, "", "ate_inference"], [14, 2, 1, "", "ate_interval"], [14, 2, 1, "", "cate_feature_names"], [14, 2, 1, "", "cate_output_names"], [14, 2, 1, "", "cate_treatment_names"], [14, 2, 1, "", "coef_"], [14, 2, 1, "", "coef__inference"], [14, 2, 1, "", "coef__interval"], [14, 2, 1, "", "const_marginal_ate"], [14, 2, 1, "", "const_marginal_ate_inference"], [14, 2, 1, "", "const_marginal_ate_interval"], [14, 2, 1, "", "const_marginal_effect"], [14, 2, 1, "", "const_marginal_effect_inference"], [14, 2, 1, "", "const_marginal_effect_interval"], [14, 3, 1, "", "dowhy"], [14, 2, 1, "", "effect"], [14, 2, 1, "", "effect_inference"], [14, 2, 1, "", "effect_interval"], [14, 3, 1, "", "featurizer_"], [14, 2, 1, "", "fit"], [14, 2, 1, "", "intercept_"], [14, 2, 1, "", "intercept__inference"], [14, 2, 1, "", "intercept__interval"], [14, 2, 1, "", "marginal_ate"], [14, 2, 1, "", "marginal_ate_inference"], [14, 2, 1, "", "marginal_ate_interval"], [14, 2, 1, "", "marginal_effect"], [14, 2, 1, "", "marginal_effect_inference"], [14, 2, 1, "", "marginal_effect_interval"], [14, 2, 1, "", "model_cate"], [14, 3, 1, "", "models_propensity"], [14, 3, 1, "", "models_regression"], [14, 3, 1, "", "multitask_model_cate"], [14, 3, 1, "", "nuisance_scores_propensity"], [14, 3, 1, "", "nuisance_scores_regression"], [14, 2, 1, "", "refit_final"], [14, 2, 1, "", "robustness_value"], [14, 2, 1, "", "score"], [14, 4, 1, "", "score_"], [14, 2, 1, "", "sensitivity_interval"], [14, 2, 1, "", "sensitivity_summary"], [14, 2, 1, "", "shap_values"], [14, 2, 1, "", "summary"]], "econml.dr.SparseLinearDRLearner": [[15, 2, 1, "", "__init__"], [15, 2, 1, "", "ate"], [15, 2, 1, "", "ate_inference"], [15, 2, 1, "", "ate_interval"], [15, 2, 1, "", "cate_feature_names"], [15, 2, 1, "", "cate_output_names"], [15, 2, 1, "", "cate_treatment_names"], [15, 2, 1, "", "coef_"], [15, 2, 1, "", "coef__inference"], [15, 2, 1, "", "coef__interval"], [15, 2, 1, "", "const_marginal_ate"], [15, 2, 1, "", "const_marginal_ate_inference"], [15, 2, 1, "", "const_marginal_ate_interval"], [15, 2, 1, "", "const_marginal_effect"], [15, 2, 1, "", "const_marginal_effect_inference"], [15, 2, 1, "", "const_marginal_effect_interval"], [15, 3, 1, "", "dowhy"], [15, 2, 1, "", "effect"], [15, 2, 1, "", "effect_inference"], [15, 2, 1, "", "effect_interval"], [15, 3, 1, "", "featurizer_"], [15, 2, 1, "", "fit"], [15, 2, 1, "", "intercept_"], [15, 2, 1, "", "intercept__inference"], [15, 2, 1, "", "intercept__interval"], [15, 2, 1, "", "marginal_ate"], [15, 2, 1, "", "marginal_ate_inference"], [15, 2, 1, "", "marginal_ate_interval"], [15, 2, 1, "", "marginal_effect"], [15, 2, 1, "", "marginal_effect_inference"], [15, 2, 1, "", "marginal_effect_interval"], [15, 2, 1, "", "model_cate"], [15, 3, 1, "", "models_propensity"], [15, 3, 1, "", "models_regression"], [15, 3, 1, "", "multitask_model_cate"], [15, 3, 1, "", "nuisance_scores_propensity"], [15, 3, 1, "", "nuisance_scores_regression"], [15, 2, 1, "", "refit_final"], [15, 2, 1, "", "robustness_value"], [15, 2, 1, "", "score"], [15, 4, 1, "", "score_"], [15, 2, 1, "", "sensitivity_interval"], [15, 2, 1, "", "sensitivity_summary"], [15, 2, 1, "", "shap_values"], [15, 2, 1, "", "summary"]], "econml.federated_learning": [[16, 1, 1, "", "FederatedEstimator"]], "econml.federated_learning.FederatedEstimator": [[16, 2, 1, "", "__init__"], [16, 2, 1, "", "ate"], [16, 2, 1, "", "ate_inference"], [16, 2, 1, "", "ate_interval"], [16, 2, 1, "", "cate_feature_names"], [16, 2, 1, "", "cate_output_names"], [16, 2, 1, "", "cate_treatment_names"], [16, 2, 1, "", "const_marginal_ate"], [16, 2, 1, "", "const_marginal_ate_inference"], [16, 2, 1, "", "const_marginal_ate_interval"], [16, 2, 1, "", "const_marginal_effect"], [16, 2, 1, "", "const_marginal_effect_inference"], [16, 2, 1, "", "const_marginal_effect_interval"], [16, 3, 1, "", "dowhy"], [16, 2, 1, "", "effect"], [16, 2, 1, "", "effect_inference"], [16, 2, 1, "", "effect_interval"], [16, 2, 1, "", "fit"], [16, 2, 1, "", "marginal_ate"], [16, 2, 1, "", "marginal_ate_inference"], [16, 2, 1, "", "marginal_ate_interval"], [16, 2, 1, "", "marginal_effect"], [16, 2, 1, "", "marginal_effect_inference"], [16, 2, 1, "", "marginal_effect_interval"], [16, 2, 1, "", "shap_values"]], "econml.grf": [[17, 1, 1, "", "CausalForest"], [18, 1, 1, "", "CausalIVForest"], [19, 1, 1, "", "LinearMomentGRFCriterion"], [20, 1, 1, "", "LinearMomentGRFCriterionMSE"], [21, 1, 1, "", "MultiOutputGRF"], [22, 1, 1, "", "RegressionForest"]], "econml.grf.CausalForest": [[17, 2, 1, "", "__init__"], [17, 2, 1, "", "apply"], [17, 2, 1, "", "decision_path"], [17, 4, 1, "", "estimators_"], [17, 2, 1, "", "feature_importances"], [17, 4, 1, "", "feature_importances_"], [17, 2, 1, "", "fit"], [17, 2, 1, "", "get_metadata_routing"], [17, 2, 1, "", "get_params"], [17, 2, 1, "", "get_subsample_inds"], [17, 2, 1, "", "oob_predict"], [17, 2, 1, "", "predict"], [17, 2, 1, "", "predict_alpha_and_jac"], [17, 2, 1, "", "predict_and_var"], [17, 2, 1, "", "predict_full"], [17, 2, 1, "", "predict_interval"], [17, 2, 1, "", "predict_moment_and_var"], [17, 2, 1, "", "predict_projection"], [17, 2, 1, "", "predict_projection_and_var"], [17, 2, 1, "", "predict_projection_var"], [17, 2, 1, "", "predict_tree_average"], [17, 2, 1, "", "predict_tree_average_full"], [17, 2, 1, "", "predict_var"], [17, 2, 1, "", "prediction_stderr"], [17, 2, 1, "", "set_fit_request"], [17, 2, 1, "", "set_params"], [17, 2, 1, "", "set_predict_request"]], "econml.grf.CausalIVForest": [[18, 2, 1, "", "__init__"], [18, 2, 1, "", "apply"], [18, 2, 1, "", "decision_path"], [18, 4, 1, "", "estimators_"], [18, 2, 1, "", "feature_importances"], [18, 4, 1, "", "feature_importances_"], [18, 2, 1, "", "fit"], [18, 2, 1, "", "get_metadata_routing"], [18, 2, 1, "", "get_params"], [18, 2, 1, "", "get_subsample_inds"], [18, 2, 1, "", "oob_predict"], [18, 2, 1, "", "predict"], [18, 2, 1, "", "predict_alpha_and_jac"], [18, 2, 1, "", "predict_and_var"], [18, 2, 1, "", "predict_full"], [18, 2, 1, "", "predict_interval"], [18, 2, 1, "", "predict_moment_and_var"], [18, 2, 1, "", "predict_projection"], [18, 2, 1, "", "predict_projection_and_var"], [18, 2, 1, "", "predict_projection_var"], [18, 2, 1, "", "predict_tree_average"], [18, 2, 1, "", "predict_tree_average_full"], [18, 2, 1, "", "predict_var"], [18, 2, 1, "", "prediction_stderr"], [18, 2, 1, "", "set_fit_request"], [18, 2, 1, "", "set_params"], [18, 2, 1, "", "set_predict_request"]], "econml.grf.LinearMomentGRFCriterion": [[19, 2, 1, "", "__init__"]], "econml.grf.LinearMomentGRFCriterionMSE": [[20, 2, 1, "", "__init__"]], "econml.grf.MultiOutputGRF": [[21, 2, 1, "", "__init__"], [21, 2, 1, "", "get_metadata_routing"], [21, 2, 1, "", "get_params"], [21, 2, 1, "", "set_fit_request"], [21, 2, 1, "", "set_params"], [21, 2, 1, "", "set_predict_request"]], "econml.grf.RegressionForest": [[22, 2, 1, "", "__init__"], [22, 2, 1, "", "apply"], [22, 2, 1, "", "decision_path"], [22, 4, 1, "", "estimators_"], [22, 2, 1, "", "feature_importances"], [22, 4, 1, "", "feature_importances_"], [22, 2, 1, "", "fit"], [22, 2, 1, "", "get_metadata_routing"], [22, 2, 1, "", "get_params"], [22, 2, 1, "", "get_subsample_inds"], [22, 2, 1, "", "oob_predict"], [22, 2, 1, "", "predict"], [22, 2, 1, "", "predict_alpha_and_jac"], [22, 2, 1, "", "predict_and_var"], [22, 2, 1, "", "predict_full"], [22, 2, 1, "", "predict_interval"], [22, 2, 1, "", "predict_moment_and_var"], [22, 2, 1, "", "predict_projection"], [22, 2, 1, "", "predict_projection_and_var"], [22, 2, 1, "", "predict_projection_var"], [22, 2, 1, "", "predict_tree_average"], [22, 2, 1, "", "predict_tree_average_full"], [22, 2, 1, "", "predict_var"], [22, 2, 1, "", "prediction_stderr"], [22, 2, 1, "", "set_fit_request"], [22, 2, 1, "", "set_params"], [22, 2, 1, "", "set_predict_request"]], "econml.grf._base_grf": [[23, 1, 1, "", "BaseGRF"]], "econml.grf._base_grf.BaseGRF": [[23, 2, 1, "", "__init__"], [23, 2, 1, "", "apply"], [23, 2, 1, "", "decision_path"], [23, 2, 1, "", "feature_importances"], [23, 2, 1, "", "fit"], [23, 2, 1, "", "get_metadata_routing"], [23, 2, 1, "", "get_params"], [23, 2, 1, "", "get_subsample_inds"], [23, 2, 1, "", "oob_predict"], [23, 2, 1, "", "predict"], [23, 2, 1, "", "predict_alpha_and_jac"], [23, 2, 1, "", "predict_and_var"], [23, 2, 1, "", "predict_full"], [23, 2, 1, "", "predict_interval"], [23, 2, 1, "", "predict_moment_and_var"], [23, 2, 1, "", "predict_projection"], [23, 2, 1, "", "predict_projection_and_var"], [23, 2, 1, "", "predict_projection_var"], [23, 2, 1, "", "predict_tree_average"], [23, 2, 1, "", "predict_tree_average_full"], [23, 2, 1, "", "predict_var"], [23, 2, 1, "", "prediction_stderr"], [23, 2, 1, "", "set_fit_request"], [23, 2, 1, "", "set_params"], [23, 2, 1, "", "set_predict_request"]], "econml.grf._base_grftree": [[24, 1, 1, "", "GRFTree"]], "econml.grf._base_grftree.GRFTree": [[24, 2, 1, "", "__init__"], [24, 2, 1, "", "apply"], [24, 2, 1, "", "decision_path"], [24, 2, 1, "", "feature_importances"], [24, 4, 1, "", "feature_importances_"], [24, 2, 1, "", "fit"], [24, 2, 1, "", "get_depth"], [24, 2, 1, "", "get_metadata_routing"], [24, 2, 1, "", "get_n_leaves"], [24, 2, 1, "", "get_params"], [24, 2, 1, "", "get_train_test_split_inds"], [24, 4, 1, "", "honest_"], [24, 2, 1, "", "init"], [24, 4, 1, "", "max_features_"], [24, 4, 1, "", "n_features_"], [24, 4, 1, "", "n_outputs_"], [24, 4, 1, "", "n_relevant_outputs_"], [24, 4, 1, "", "n_samples_"], [24, 4, 1, "", "n_y_"], [24, 2, 1, "", "predict"], [24, 2, 1, "", "predict_alpha_and_jac"], [24, 2, 1, "", "predict_full"], [24, 2, 1, "", "predict_moment"], [24, 2, 1, "", "set_fit_request"], [24, 2, 1, "", "set_params"], [24, 2, 1, "", "set_predict_request"], [24, 4, 1, "", "tree_"]], "econml.inference": [[25, 1, 1, "", "BootstrapInference"], [26, 1, 1, "", "EmpiricalInferenceResults"], [27, 1, 1, "", "GenericModelFinalInference"], [28, 1, 1, "", "GenericModelFinalInferenceDiscrete"], [29, 1, 1, "", "GenericSingleTreatmentModelFinalInference"], [30, 1, 1, "", "LinearModelFinalInference"], [31, 1, 1, "", "LinearModelFinalInferenceDiscrete"], [32, 1, 1, "", "NormalInferenceResults"], [33, 1, 1, "", "PopulationSummaryResults"], [34, 1, 1, "", "StatsModelsInference"], [35, 1, 1, "", "StatsModelsInferenceDiscrete"], [36, 0, 0, "-", "_bootstrap"]], "econml.inference.BootstrapInference": [[25, 2, 1, "", "__init__"], [25, 2, 1, "", "fit"], [25, 2, 1, "", "prefit"]], "econml.inference.EmpiricalInferenceResults": [[26, 2, 1, "", "__init__"], [26, 2, 1, "", "conf_int"], [26, 3, 1, "", "point_estimate"], [26, 2, 1, "", "population_summary"], [26, 2, 1, "", "pvalue"], [26, 2, 1, "", "scale"], [26, 3, 1, "", "stderr"], [26, 2, 1, "", "summary_frame"], [26, 2, 1, "", "translate"], [26, 3, 1, "", "var"], [26, 2, 1, "", "zstat"]], "econml.inference.GenericModelFinalInference": [[27, 2, 1, "", "__init__"], [27, 2, 1, "", "fit"], [27, 2, 1, "", "prefit"]], "econml.inference.GenericModelFinalInferenceDiscrete": [[28, 2, 1, "", "__init__"], [28, 2, 1, "", "fit"], [28, 2, 1, "", "prefit"]], "econml.inference.GenericSingleTreatmentModelFinalInference": [[29, 2, 1, "", "__init__"], [29, 2, 1, "", "fit"], [29, 2, 1, "", "prefit"]], "econml.inference.LinearModelFinalInference": [[30, 2, 1, "", "__init__"], [30, 2, 1, "", "fit"], [30, 2, 1, "", "prefit"]], "econml.inference.LinearModelFinalInferenceDiscrete": [[31, 2, 1, "", "__init__"], [31, 2, 1, "", "fit"], [31, 2, 1, "", "prefit"]], "econml.inference.NormalInferenceResults": [[32, 2, 1, "", "__init__"], [32, 2, 1, "", "conf_int"], [32, 3, 1, "", "point_estimate"], [32, 2, 1, "", "population_summary"], [32, 2, 1, "", "pvalue"], [32, 2, 1, "", "scale"], [32, 3, 1, "", "stderr"], [32, 2, 1, "", "summary_frame"], [32, 2, 1, "", "translate"], [32, 3, 1, "", "var"], [32, 2, 1, "", "zstat"]], "econml.inference.PopulationSummaryResults": [[33, 2, 1, "", "__init__"], [33, 2, 1, "", "conf_int_mean"], [33, 2, 1, "", "conf_int_point"], [33, 3, 1, "", "mean_point"], [33, 2, 1, "", "percentile_point"], [33, 2, 1, "", "pvalue"], [33, 3, 1, "", "std_point"], [33, 3, 1, "", "stderr_mean"], [33, 3, 1, "", "stderr_point"], [33, 2, 1, "", "summary"], [33, 2, 1, "", "zstat"]], "econml.inference.StatsModelsInference": [[34, 2, 1, "", "__init__"], [34, 2, 1, "", "fit"], [34, 2, 1, "", "prefit"]], "econml.inference.StatsModelsInferenceDiscrete": [[35, 2, 1, "", "__init__"], [35, 2, 1, "", "fit"], [35, 2, 1, "", "prefit"]], "econml.inference._bootstrap": [[36, 1, 1, "", "BootstrapEstimator"]], "econml.inference._bootstrap.BootstrapEstimator": [[36, 2, 1, "", "fit"]], "econml.iv.dml": [[37, 1, 1, "", "DMLIV"], [38, 1, 1, "", "NonParamDMLIV"], [39, 1, 1, "", "OrthoIV"]], "econml.iv.dml.DMLIV": [[37, 2, 1, "", "__init__"], [37, 2, 1, "", "ate"], [37, 2, 1, "", "ate_inference"], [37, 2, 1, "", "ate_interval"], [37, 2, 1, "", "cate_feature_names"], [37, 2, 1, "", "cate_output_names"], [37, 2, 1, "", "cate_treatment_names"], [37, 3, 1, "", "coef_"], [37, 2, 1, "", "const_marginal_ate"], [37, 2, 1, "", "const_marginal_ate_inference"], [37, 2, 1, "", "const_marginal_ate_interval"], [37, 2, 1, "", "const_marginal_effect"], [37, 2, 1, "", "const_marginal_effect_inference"], [37, 2, 1, "", "const_marginal_effect_interval"], [37, 3, 1, "", "dowhy"], [37, 2, 1, "", "effect"], [37, 2, 1, "", "effect_inference"], [37, 2, 1, "", "effect_interval"], [37, 2, 1, "", "fit"], [37, 3, 1, "", "intercept_"], [37, 2, 1, "", "marginal_ate"], [37, 2, 1, "", "marginal_ate_inference"], [37, 2, 1, "", "marginal_ate_interval"], [37, 2, 1, "", "marginal_effect"], [37, 2, 1, "", "marginal_effect_inference"], [37, 2, 1, "", "marginal_effect_interval"], [37, 3, 1, "", "model_cate"], [37, 3, 1, "", "models_t_xw"], [37, 3, 1, "", "models_t_xwz"], [37, 3, 1, "", "models_y_xw"], [37, 3, 1, "", "nuisance_scores_t_xw"], [37, 3, 1, "", "nuisance_scores_t_xwz"], [37, 3, 1, "", "nuisance_scores_y_xw"], [37, 2, 1, "", "refit_final"], [37, 3, 1, "", "residuals_"], [37, 2, 1, "", "score"], [37, 2, 1, "", "shap_values"], [37, 2, 1, "", "summary"]], "econml.iv.dml.NonParamDMLIV": [[38, 2, 1, "", "__init__"], [38, 2, 1, "", "ate"], [38, 2, 1, "", "ate_inference"], [38, 2, 1, "", "ate_interval"], [38, 2, 1, "", "cate_feature_names"], [38, 2, 1, "", "cate_output_names"], [38, 2, 1, "", "cate_treatment_names"], [38, 2, 1, "", "const_marginal_ate"], [38, 2, 1, "", "const_marginal_ate_inference"], [38, 2, 1, "", "const_marginal_ate_interval"], [38, 2, 1, "", "const_marginal_effect"], [38, 2, 1, "", "const_marginal_effect_inference"], [38, 2, 1, "", "const_marginal_effect_interval"], [38, 3, 1, "", "dowhy"], [38, 2, 1, "", "effect"], [38, 2, 1, "", "effect_inference"], [38, 2, 1, "", "effect_interval"], [38, 2, 1, "", "fit"], [38, 2, 1, "", "marginal_ate"], [38, 2, 1, "", "marginal_ate_inference"], [38, 2, 1, "", "marginal_ate_interval"], [38, 2, 1, "", "marginal_effect"], [38, 2, 1, "", "marginal_effect_inference"], [38, 2, 1, "", "marginal_effect_interval"], [38, 3, 1, "", "model_cate"], [38, 3, 1, "", "models_t_xw"], [38, 3, 1, "", "models_t_xwz"], [38, 3, 1, "", "models_y_xw"], [38, 3, 1, "", "nuisance_scores_t_xw"], [38, 3, 1, "", "nuisance_scores_t_xwz"], [38, 3, 1, "", "nuisance_scores_y_xw"], [38, 2, 1, "", "refit_final"], [38, 3, 1, "", "residuals_"], [38, 2, 1, "", "score"], [38, 2, 1, "", "shap_values"]], "econml.iv.dml.OrthoIV": [[39, 2, 1, "", "__init__"], [39, 2, 1, "", "ate"], [39, 2, 1, "", "ate_inference"], [39, 2, 1, "", "ate_interval"], [39, 2, 1, "", "cate_feature_names"], [39, 2, 1, "", "cate_output_names"], [39, 2, 1, "", "cate_treatment_names"], [39, 3, 1, "", "coef_"], [39, 2, 1, "", "coef__inference"], [39, 2, 1, "", "coef__interval"], [39, 2, 1, "", "const_marginal_ate"], [39, 2, 1, "", "const_marginal_ate_inference"], [39, 2, 1, "", "const_marginal_ate_interval"], [39, 2, 1, "", "const_marginal_effect"], [39, 2, 1, "", "const_marginal_effect_inference"], [39, 2, 1, "", "const_marginal_effect_interval"], [39, 3, 1, "", "dowhy"], [39, 2, 1, "", "effect"], [39, 2, 1, "", "effect_inference"], [39, 2, 1, "", "effect_interval"], [39, 3, 1, "", "featurizer_"], [39, 2, 1, "", "fit"], [39, 3, 1, "", "intercept_"], [39, 2, 1, "", "intercept__inference"], [39, 2, 1, "", "intercept__interval"], [39, 2, 1, "", "marginal_ate"], [39, 2, 1, "", "marginal_ate_inference"], [39, 2, 1, "", "marginal_ate_interval"], [39, 2, 1, "", "marginal_effect"], [39, 2, 1, "", "marginal_effect_inference"], [39, 2, 1, "", "marginal_effect_interval"], [39, 3, 1, "", "model_cate"], [39, 3, 1, "", "models_t_xw"], [39, 3, 1, "", "models_t_xwz"], [39, 3, 1, "", "models_y_xw"], [39, 3, 1, "", "models_z_xw"], [39, 3, 1, "", "nuisance_scores_t_xw"], [39, 3, 1, "", "nuisance_scores_t_xwz"], [39, 3, 1, "", "nuisance_scores_y_xw"], [39, 3, 1, "", "nuisance_scores_z_xw"], [39, 2, 1, "", "refit_final"], [39, 3, 1, "", "residuals_"], [39, 2, 1, "", "score"], [39, 2, 1, "", "shap_values"], [39, 2, 1, "", "summary"]], "econml.iv.dr": [[40, 1, 1, "", "DRIV"], [41, 1, 1, "", "ForestDRIV"], [42, 1, 1, "", "IntentToTreatDRIV"], [43, 1, 1, "", "LinearDRIV"], [44, 1, 1, "", "LinearIntentToTreatDRIV"], [45, 1, 1, "", "SparseLinearDRIV"]], "econml.iv.dr.DRIV": [[40, 2, 1, "", "__init__"], [40, 2, 1, "", "ate"], [40, 2, 1, "", "ate_inference"], [40, 2, 1, "", "ate_interval"], [40, 2, 1, "", "cate_feature_names"], [40, 2, 1, "", "cate_output_names"], [40, 2, 1, "", "cate_treatment_names"], [40, 2, 1, "", "const_marginal_ate"], [40, 2, 1, "", "const_marginal_ate_inference"], [40, 2, 1, "", "const_marginal_ate_interval"], [40, 2, 1, "", "const_marginal_effect"], [40, 2, 1, "", "const_marginal_effect_inference"], [40, 2, 1, "", "const_marginal_effect_interval"], [40, 3, 1, "", "dowhy"], [40, 2, 1, "", "effect"], [40, 2, 1, "", "effect_inference"], [40, 2, 1, "", "effect_interval"], [40, 3, 1, "", "featurizer_"], [40, 2, 1, "", "fit"], [40, 2, 1, "", "marginal_ate"], [40, 2, 1, "", "marginal_ate_inference"], [40, 2, 1, "", "marginal_ate_interval"], [40, 2, 1, "", "marginal_effect"], [40, 2, 1, "", "marginal_effect_inference"], [40, 2, 1, "", "marginal_effect_interval"], [40, 3, 1, "", "model_cate"], [40, 3, 1, "", "models_prel_model_effect"], [40, 3, 1, "", "models_t_xw"], [40, 3, 1, "", "models_t_xwz"], [40, 3, 1, "", "models_tz_xw"], [40, 3, 1, "", "models_y_xw"], [40, 3, 1, "", "models_z_xw"], [40, 3, 1, "", "nuisance_scores_prel_model_effect"], [40, 3, 1, "", "nuisance_scores_t_xw"], [40, 3, 1, "", "nuisance_scores_t_xwz"], [40, 3, 1, "", "nuisance_scores_tz_xw"], [40, 3, 1, "", "nuisance_scores_y_xw"], [40, 3, 1, "", "nuisance_scores_z_xw"], [40, 2, 1, "", "refit_final"], [40, 3, 1, "", "residuals_"], [40, 2, 1, "", "score"], [40, 2, 1, "", "shap_values"]], "econml.iv.dr.ForestDRIV": [[41, 2, 1, "", "__init__"], [41, 2, 1, "", "ate"], [41, 2, 1, "", "ate_inference"], [41, 2, 1, "", "ate_interval"], [41, 2, 1, "", "cate_feature_names"], [41, 2, 1, "", "cate_output_names"], [41, 2, 1, "", "cate_treatment_names"], [41, 2, 1, "", "const_marginal_ate"], [41, 2, 1, "", "const_marginal_ate_inference"], [41, 2, 1, "", "const_marginal_ate_interval"], [41, 2, 1, "", "const_marginal_effect"], [41, 2, 1, "", "const_marginal_effect_inference"], [41, 2, 1, "", "const_marginal_effect_interval"], [41, 3, 1, "", "dowhy"], [41, 2, 1, "", "effect"], [41, 2, 1, "", "effect_inference"], [41, 2, 1, "", "effect_interval"], [41, 3, 1, "", "featurizer_"], [41, 2, 1, "", "fit"], [41, 2, 1, "", "marginal_ate"], [41, 2, 1, "", "marginal_ate_inference"], [41, 2, 1, "", "marginal_ate_interval"], [41, 2, 1, "", "marginal_effect"], [41, 2, 1, "", "marginal_effect_inference"], [41, 2, 1, "", "marginal_effect_interval"], [41, 3, 1, "", "model_cate"], [41, 3, 1, "", "models_prel_model_effect"], [41, 3, 1, "", "models_t_xw"], [41, 3, 1, "", "models_t_xwz"], [41, 3, 1, "", "models_tz_xw"], [41, 3, 1, "", "models_y_xw"], [41, 3, 1, "", "models_z_xw"], [41, 3, 1, "", "nuisance_scores_prel_model_effect"], [41, 3, 1, "", "nuisance_scores_t_xw"], [41, 3, 1, "", "nuisance_scores_t_xwz"], [41, 3, 1, "", "nuisance_scores_tz_xw"], [41, 3, 1, "", "nuisance_scores_y_xw"], [41, 3, 1, "", "nuisance_scores_z_xw"], [41, 2, 1, "", "refit_final"], [41, 3, 1, "", "residuals_"], [41, 2, 1, "", "score"], [41, 2, 1, "", "shap_values"]], "econml.iv.dr.IntentToTreatDRIV": [[42, 2, 1, "", "__init__"], [42, 2, 1, "", "ate"], [42, 2, 1, "", "ate_inference"], [42, 2, 1, "", "ate_interval"], [42, 2, 1, "", "cate_feature_names"], [42, 2, 1, "", "cate_output_names"], [42, 2, 1, "", "cate_treatment_names"], [42, 2, 1, "", "const_marginal_ate"], [42, 2, 1, "", "const_marginal_ate_inference"], [42, 2, 1, "", "const_marginal_ate_interval"], [42, 2, 1, "", "const_marginal_effect"], [42, 2, 1, "", "const_marginal_effect_inference"], [42, 2, 1, "", "const_marginal_effect_interval"], [42, 3, 1, "", "dowhy"], [42, 2, 1, "", "effect"], [42, 2, 1, "", "effect_inference"], [42, 2, 1, "", "effect_interval"], [42, 3, 1, "", "featurizer_"], [42, 2, 1, "", "fit"], [42, 2, 1, "", "marginal_ate"], [42, 2, 1, "", "marginal_ate_inference"], [42, 2, 1, "", "marginal_ate_interval"], [42, 2, 1, "", "marginal_effect"], [42, 2, 1, "", "marginal_effect_inference"], [42, 2, 1, "", "marginal_effect_interval"], [42, 3, 1, "", "model_cate"], [42, 3, 1, "", "models_prel_model_effect"], [42, 3, 1, "", "models_t_xwz"], [42, 3, 1, "", "models_y_xw"], [42, 3, 1, "", "nuisance_scores_prel_model_effect"], [42, 3, 1, "", "nuisance_scores_t_xwz"], [42, 3, 1, "", "nuisance_scores_y_xw"], [42, 2, 1, "", "refit_final"], [42, 3, 1, "", "residuals_"], [42, 2, 1, "", "score"], [42, 2, 1, "", "shap_values"]], "econml.iv.dr.LinearDRIV": [[43, 2, 1, "", "__init__"], [43, 2, 1, "", "ate"], [43, 2, 1, "", "ate_inference"], [43, 2, 1, "", "ate_interval"], [43, 2, 1, "", "cate_feature_names"], [43, 2, 1, "", "cate_output_names"], [43, 2, 1, "", "cate_treatment_names"], [43, 3, 1, "", "coef_"], [43, 2, 1, "", "coef__inference"], [43, 2, 1, "", "coef__interval"], [43, 2, 1, "", "const_marginal_ate"], [43, 2, 1, "", "const_marginal_ate_inference"], [43, 2, 1, "", "const_marginal_ate_interval"], [43, 2, 1, "", "const_marginal_effect"], [43, 2, 1, "", "const_marginal_effect_inference"], [43, 2, 1, "", "const_marginal_effect_interval"], [43, 3, 1, "", "dowhy"], [43, 2, 1, "", "effect"], [43, 2, 1, "", "effect_inference"], [43, 2, 1, "", "effect_interval"], [43, 3, 1, "", "featurizer_"], [43, 2, 1, "", "fit"], [43, 3, 1, "", "intercept_"], [43, 2, 1, "", "intercept__inference"], [43, 2, 1, "", "intercept__interval"], [43, 2, 1, "", "marginal_ate"], [43, 2, 1, "", "marginal_ate_inference"], [43, 2, 1, "", "marginal_ate_interval"], [43, 2, 1, "", "marginal_effect"], [43, 2, 1, "", "marginal_effect_inference"], [43, 2, 1, "", "marginal_effect_interval"], [43, 3, 1, "", "model_cate"], [43, 3, 1, "", "models_prel_model_effect"], [43, 3, 1, "", "models_t_xw"], [43, 3, 1, "", "models_t_xwz"], [43, 3, 1, "", "models_tz_xw"], [43, 3, 1, "", "models_y_xw"], [43, 3, 1, "", "models_z_xw"], [43, 3, 1, "", "nuisance_scores_prel_model_effect"], [43, 3, 1, "", "nuisance_scores_t_xw"], [43, 3, 1, "", "nuisance_scores_t_xwz"], [43, 3, 1, "", "nuisance_scores_tz_xw"], [43, 3, 1, "", "nuisance_scores_y_xw"], [43, 3, 1, "", "nuisance_scores_z_xw"], [43, 2, 1, "", "refit_final"], [43, 3, 1, "", "residuals_"], [43, 2, 1, "", "score"], [43, 2, 1, "", "shap_values"], [43, 2, 1, "", "summary"]], "econml.iv.dr.LinearIntentToTreatDRIV": [[44, 2, 1, "", "__init__"], [44, 2, 1, "", "ate"], [44, 2, 1, "", "ate_inference"], [44, 2, 1, "", "ate_interval"], [44, 2, 1, "", "cate_feature_names"], [44, 2, 1, "", "cate_output_names"], [44, 2, 1, "", "cate_treatment_names"], [44, 3, 1, "", "coef_"], [44, 2, 1, "", "coef__inference"], [44, 2, 1, "", "coef__interval"], [44, 2, 1, "", "const_marginal_ate"], [44, 2, 1, "", "const_marginal_ate_inference"], [44, 2, 1, "", "const_marginal_ate_interval"], [44, 2, 1, "", "const_marginal_effect"], [44, 2, 1, "", "const_marginal_effect_inference"], [44, 2, 1, "", "const_marginal_effect_interval"], [44, 3, 1, "", "dowhy"], [44, 2, 1, "", "effect"], [44, 2, 1, "", "effect_inference"], [44, 2, 1, "", "effect_interval"], [44, 3, 1, "", "featurizer_"], [44, 2, 1, "", "fit"], [44, 3, 1, "", "intercept_"], [44, 2, 1, "", "intercept__inference"], [44, 2, 1, "", "intercept__interval"], [44, 2, 1, "", "marginal_ate"], [44, 2, 1, "", "marginal_ate_inference"], [44, 2, 1, "", "marginal_ate_interval"], [44, 2, 1, "", "marginal_effect"], [44, 2, 1, "", "marginal_effect_inference"], [44, 2, 1, "", "marginal_effect_interval"], [44, 3, 1, "", "model_cate"], [44, 3, 1, "", "models_prel_model_effect"], [44, 3, 1, "", "models_t_xwz"], [44, 3, 1, "", "models_y_xw"], [44, 3, 1, "", "nuisance_scores_prel_model_effect"], [44, 3, 1, "", "nuisance_scores_t_xwz"], [44, 3, 1, "", "nuisance_scores_y_xw"], [44, 2, 1, "", "refit_final"], [44, 3, 1, "", "residuals_"], [44, 2, 1, "", "score"], [44, 2, 1, "", "shap_values"], [44, 2, 1, "", "summary"]], "econml.iv.dr.SparseLinearDRIV": [[45, 2, 1, "", "__init__"], [45, 2, 1, "", "ate"], [45, 2, 1, "", "ate_inference"], [45, 2, 1, "", "ate_interval"], [45, 2, 1, "", "cate_feature_names"], [45, 2, 1, "", "cate_output_names"], [45, 2, 1, "", "cate_treatment_names"], [45, 3, 1, "", "coef_"], [45, 2, 1, "", "coef__inference"], [45, 2, 1, "", "coef__interval"], [45, 2, 1, "", "const_marginal_ate"], [45, 2, 1, "", "const_marginal_ate_inference"], [45, 2, 1, "", "const_marginal_ate_interval"], [45, 2, 1, "", "const_marginal_effect"], [45, 2, 1, "", "const_marginal_effect_inference"], [45, 2, 1, "", "const_marginal_effect_interval"], [45, 3, 1, "", "dowhy"], [45, 2, 1, "", "effect"], [45, 2, 1, "", "effect_inference"], [45, 2, 1, "", "effect_interval"], [45, 3, 1, "", "featurizer_"], [45, 2, 1, "", "fit"], [45, 3, 1, "", "intercept_"], [45, 2, 1, "", "intercept__inference"], [45, 2, 1, "", "intercept__interval"], [45, 2, 1, "", "marginal_ate"], [45, 2, 1, "", "marginal_ate_inference"], [45, 2, 1, "", "marginal_ate_interval"], [45, 2, 1, "", "marginal_effect"], [45, 2, 1, "", "marginal_effect_inference"], [45, 2, 1, "", "marginal_effect_interval"], [45, 3, 1, "", "model_cate"], [45, 3, 1, "", "models_prel_model_effect"], [45, 3, 1, "", "models_t_xw"], [45, 3, 1, "", "models_t_xwz"], [45, 3, 1, "", "models_tz_xw"], [45, 3, 1, "", "models_y_xw"], [45, 3, 1, "", "models_z_xw"], [45, 3, 1, "", "nuisance_scores_prel_model_effect"], [45, 3, 1, "", "nuisance_scores_t_xw"], [45, 3, 1, "", "nuisance_scores_t_xwz"], [45, 3, 1, "", "nuisance_scores_tz_xw"], [45, 3, 1, "", "nuisance_scores_y_xw"], [45, 3, 1, "", "nuisance_scores_z_xw"], [45, 2, 1, "", "refit_final"], [45, 3, 1, "", "residuals_"], [45, 2, 1, "", "score"], [45, 2, 1, "", "shap_values"], [45, 2, 1, "", "summary"]], "econml.iv.sieve": [[46, 1, 1, "", "DPolynomialFeatures"], [47, 1, 1, "", "HermiteFeatures"], [48, 1, 1, "", "SieveTSLS"]], "econml.iv.sieve.DPolynomialFeatures": [[46, 2, 1, "", "__init__"], [46, 2, 1, "", "fit"], [46, 2, 1, "", "fit_transform"], [46, 2, 1, "", "set_output"], [46, 2, 1, "", "transform"]], "econml.iv.sieve.HermiteFeatures": [[47, 2, 1, "", "__init__"], [47, 2, 1, "", "fit"], [47, 2, 1, "", "fit_transform"], [47, 2, 1, "", "set_output"], [47, 2, 1, "", "transform"]], "econml.iv.sieve.SieveTSLS": [[48, 2, 1, "", "__init__"], [48, 2, 1, "", "ate"], [48, 2, 1, "", "ate_inference"], [48, 2, 1, "", "ate_interval"], [48, 2, 1, "", "cate_feature_names"], [48, 2, 1, "", "cate_output_names"], [48, 2, 1, "", "cate_treatment_names"], [48, 3, 1, "", "dowhy"], [48, 2, 1, "", "effect"], [48, 2, 1, "", "effect_inference"], [48, 2, 1, "", "effect_interval"], [48, 2, 1, "", "fit"], [48, 2, 1, "", "marginal_ate"], [48, 2, 1, "", "marginal_ate_inference"], [48, 2, 1, "", "marginal_ate_interval"], [48, 2, 1, "", "marginal_effect"], [48, 2, 1, "", "marginal_effect_inference"], [48, 2, 1, "", "marginal_effect_interval"]], "econml.metalearners": [[49, 1, 1, "", "DomainAdaptationLearner"], [50, 1, 1, "", "SLearner"], [51, 1, 1, "", "TLearner"], [52, 1, 1, "", "XLearner"]], "econml.metalearners.DomainAdaptationLearner": [[49, 2, 1, "", "__init__"], [49, 2, 1, "", "ate"], [49, 2, 1, "", "ate_inference"], [49, 2, 1, "", "ate_interval"], [49, 2, 1, "", "cate_feature_names"], [49, 2, 1, "", "cate_output_names"], [49, 2, 1, "", "cate_treatment_names"], [49, 2, 1, "", "const_marginal_ate"], [49, 2, 1, "", "const_marginal_ate_inference"], [49, 2, 1, "", "const_marginal_ate_interval"], [49, 2, 1, "", "const_marginal_effect"], [49, 2, 1, "", "const_marginal_effect_inference"], [49, 2, 1, "", "const_marginal_effect_interval"], [49, 3, 1, "", "dowhy"], [49, 2, 1, "", "effect"], [49, 2, 1, "", "effect_inference"], [49, 2, 1, "", "effect_interval"], [49, 2, 1, "", "fit"], [49, 2, 1, "", "marginal_ate"], [49, 2, 1, "", "marginal_ate_inference"], [49, 2, 1, "", "marginal_ate_interval"], [49, 2, 1, "", "marginal_effect"], [49, 2, 1, "", "marginal_effect_inference"], [49, 2, 1, "", "marginal_effect_interval"], [49, 2, 1, "", "shap_values"]], "econml.metalearners.SLearner": [[50, 2, 1, "", "__init__"], [50, 2, 1, "", "ate"], [50, 2, 1, "", "ate_inference"], [50, 2, 1, "", "ate_interval"], [50, 2, 1, "", "cate_feature_names"], [50, 2, 1, "", "cate_output_names"], [50, 2, 1, "", "cate_treatment_names"], [50, 2, 1, "", "const_marginal_ate"], [50, 2, 1, "", "const_marginal_ate_inference"], [50, 2, 1, "", "const_marginal_ate_interval"], [50, 2, 1, "", "const_marginal_effect"], [50, 2, 1, "", "const_marginal_effect_inference"], [50, 2, 1, "", "const_marginal_effect_interval"], [50, 3, 1, "", "dowhy"], [50, 2, 1, "", "effect"], [50, 2, 1, "", "effect_inference"], [50, 2, 1, "", "effect_interval"], [50, 2, 1, "", "fit"], [50, 2, 1, "", "marginal_ate"], [50, 2, 1, "", "marginal_ate_inference"], [50, 2, 1, "", "marginal_ate_interval"], [50, 2, 1, "", "marginal_effect"], [50, 2, 1, "", "marginal_effect_inference"], [50, 2, 1, "", "marginal_effect_interval"], [50, 2, 1, "", "shap_values"]], "econml.metalearners.TLearner": [[51, 2, 1, "", "__init__"], [51, 2, 1, "", "ate"], [51, 2, 1, "", "ate_inference"], [51, 2, 1, "", "ate_interval"], [51, 2, 1, "", "cate_feature_names"], [51, 2, 1, "", "cate_output_names"], [51, 2, 1, "", "cate_treatment_names"], [51, 2, 1, "", "const_marginal_ate"], [51, 2, 1, "", "const_marginal_ate_inference"], [51, 2, 1, "", "const_marginal_ate_interval"], [51, 2, 1, "", "const_marginal_effect"], [51, 2, 1, "", "const_marginal_effect_inference"], [51, 2, 1, "", "const_marginal_effect_interval"], [51, 3, 1, "", "dowhy"], [51, 2, 1, "", "effect"], [51, 2, 1, "", "effect_inference"], [51, 2, 1, "", "effect_interval"], [51, 2, 1, "", "fit"], [51, 2, 1, "", "marginal_ate"], [51, 2, 1, "", "marginal_ate_inference"], [51, 2, 1, "", "marginal_ate_interval"], [51, 2, 1, "", "marginal_effect"], [51, 2, 1, "", "marginal_effect_inference"], [51, 2, 1, "", "marginal_effect_interval"], [51, 2, 1, "", "shap_values"]], "econml.metalearners.XLearner": [[52, 2, 1, "", "__init__"], [52, 2, 1, "", "ate"], [52, 2, 1, "", "ate_inference"], [52, 2, 1, "", "ate_interval"], [52, 2, 1, "", "cate_feature_names"], [52, 2, 1, "", "cate_output_names"], [52, 2, 1, "", "cate_treatment_names"], [52, 2, 1, "", "const_marginal_ate"], [52, 2, 1, "", "const_marginal_ate_inference"], [52, 2, 1, "", "const_marginal_ate_interval"], [52, 2, 1, "", "const_marginal_effect"], [52, 2, 1, "", "const_marginal_effect_inference"], [52, 2, 1, "", "const_marginal_effect_interval"], [52, 3, 1, "", "dowhy"], [52, 2, 1, "", "effect"], [52, 2, 1, "", "effect_inference"], [52, 2, 1, "", "effect_interval"], [52, 2, 1, "", "fit"], [52, 2, 1, "", "marginal_ate"], [52, 2, 1, "", "marginal_ate_inference"], [52, 2, 1, "", "marginal_ate_interval"], [52, 2, 1, "", "marginal_effect"], [52, 2, 1, "", "marginal_effect_inference"], [52, 2, 1, "", "marginal_effect_interval"], [52, 2, 1, "", "shap_values"]], "econml.orf": [[53, 1, 1, "", "DMLOrthoForest"], [54, 1, 1, "", "DROrthoForest"]], "econml.orf.DMLOrthoForest": [[53, 2, 1, "", "__init__"], [53, 2, 1, "", "ate"], [53, 2, 1, "", "ate_inference"], [53, 2, 1, "", "ate_interval"], [53, 2, 1, "", "cate_feature_names"], [53, 2, 1, "", "cate_output_names"], [53, 2, 1, "", "cate_treatment_names"], [53, 2, 1, "", "const_marginal_ate"], [53, 2, 1, "", "const_marginal_ate_inference"], [53, 2, 1, "", "const_marginal_ate_interval"], [53, 2, 1, "", "const_marginal_effect"], [53, 2, 1, "", "const_marginal_effect_inference"], [53, 2, 1, "", "const_marginal_effect_interval"], [53, 3, 1, "", "dowhy"], [53, 2, 1, "", "effect"], [53, 2, 1, "", "effect_inference"], [53, 2, 1, "", "effect_interval"], [53, 2, 1, "", "fit"], [53, 2, 1, "", "marginal_ate"], [53, 2, 1, "", "marginal_ate_inference"], [53, 2, 1, "", "marginal_ate_interval"], [53, 2, 1, "", "marginal_effect"], [53, 2, 1, "", "marginal_effect_inference"], [53, 2, 1, "", "marginal_effect_interval"], [53, 2, 1, "", "shap_values"]], "econml.orf.DROrthoForest": [[54, 2, 1, "", "__init__"], [54, 2, 1, "", "ate"], [54, 2, 1, "", "ate_inference"], [54, 2, 1, "", "ate_interval"], [54, 2, 1, "", "cate_feature_names"], [54, 2, 1, "", "cate_output_names"], [54, 2, 1, "", "cate_treatment_names"], [54, 2, 1, "", "const_marginal_ate"], [54, 2, 1, "", "const_marginal_ate_inference"], [54, 2, 1, "", "const_marginal_ate_interval"], [54, 2, 1, "", "const_marginal_effect"], [54, 2, 1, "", "const_marginal_effect_inference"], [54, 2, 1, "", "const_marginal_effect_interval"], [54, 3, 1, "", "dowhy"], [54, 2, 1, "", "effect"], [54, 2, 1, "", "effect_inference"], [54, 2, 1, "", "effect_interval"], [54, 2, 1, "", "fit"], [54, 2, 1, "", "marginal_ate"], [54, 2, 1, "", "marginal_ate_inference"], [54, 2, 1, "", "marginal_ate_interval"], [54, 2, 1, "", "marginal_effect"], [54, 2, 1, "", "marginal_effect_inference"], [54, 2, 1, "", "marginal_effect_interval"], [54, 2, 1, "", "moment_and_mean_gradient_estimator_func"], [54, 2, 1, "", "nuisance_estimator_generator"], [54, 2, 1, "", "parameter_estimator_func"], [54, 2, 1, "", "second_stage_parameter_estimator_gen"], [54, 2, 1, "", "shap_values"]], "econml.panel.dml": [[55, 1, 1, "", "DynamicDML"]], "econml.panel.dml.DynamicDML": [[55, 2, 1, "", "__init__"], [55, 2, 1, "", "ate"], [55, 2, 1, "", "ate_inference"], [55, 2, 1, "", "ate_interval"], [55, 2, 1, "", "cate_feature_names"], [55, 2, 1, "", "cate_output_names"], [55, 2, 1, "", "cate_treatment_names"], [55, 3, 1, "", "coef_"], [55, 2, 1, "", "coef__inference"], [55, 2, 1, "", "coef__interval"], [55, 2, 1, "", "const_marginal_ate"], [55, 2, 1, "", "const_marginal_ate_inference"], [55, 2, 1, "", "const_marginal_ate_interval"], [55, 2, 1, "", "const_marginal_effect"], [55, 2, 1, "", "const_marginal_effect_inference"], [55, 2, 1, "", "const_marginal_effect_interval"], [55, 3, 1, "", "dowhy"], [55, 2, 1, "", "effect"], [55, 2, 1, "", "effect_inference"], [55, 2, 1, "", "effect_interval"], [55, 2, 1, "", "fit"], [55, 3, 1, "", "intercept_"], [55, 2, 1, "", "intercept__inference"], [55, 2, 1, "", "intercept__interval"], [55, 2, 1, "", "marginal_ate"], [55, 2, 1, "", "marginal_ate_inference"], [55, 2, 1, "", "marginal_ate_interval"], [55, 2, 1, "", "marginal_effect"], [55, 2, 1, "", "marginal_effect_inference"], [55, 2, 1, "", "marginal_effect_interval"], [55, 2, 1, "", "refit_final"], [55, 3, 1, "", "residuals_"], [55, 2, 1, "", "score"], [55, 2, 1, "", "shap_values"], [55, 2, 1, "", "summary"]], "econml.policy": [[56, 1, 1, "", "DRPolicyForest"], [57, 1, 1, "", "DRPolicyTree"], [58, 1, 1, "", "PolicyForest"], [59, 1, 1, "", "PolicyTree"]], "econml.policy.DRPolicyForest": [[56, 2, 1, "", "__init__"], [56, 2, 1, "", "export_graphviz"], [56, 2, 1, "", "feature_importances"], [56, 2, 1, "", "fit"], [56, 2, 1, "", "plot"], [56, 2, 1, "", "policy_feature_names"], [56, 3, 1, "", "policy_model_"], [56, 2, 1, "", "policy_treatment_names"], [56, 2, 1, "", "predict"], [56, 2, 1, "", "predict_proba"], [56, 2, 1, "", "predict_value"], [56, 2, 1, "", "render"]], "econml.policy.DRPolicyTree": [[57, 2, 1, "", "__init__"], [57, 2, 1, "", "export_graphviz"], [57, 2, 1, "", "feature_importances"], [57, 2, 1, "", "fit"], [57, 2, 1, "", "plot"], [57, 2, 1, "", "policy_feature_names"], [57, 3, 1, "", "policy_model_"], [57, 2, 1, "", "policy_treatment_names"], [57, 2, 1, "", "predict"], [57, 2, 1, "", "predict_proba"], [57, 2, 1, "", "predict_value"], [57, 2, 1, "", "render"]], "econml.policy.PolicyForest": [[58, 2, 1, "", "__init__"], [58, 2, 1, "", "apply"], [58, 2, 1, "", "decision_path"], [58, 2, 1, "", "feature_importances"], [58, 4, 1, "", "feature_importances_"], [58, 2, 1, "", "fit"], [58, 2, 1, "", "get_metadata_routing"], [58, 2, 1, "", "get_params"], [58, 2, 1, "", "get_subsample_inds"], [58, 2, 1, "", "predict"], [58, 2, 1, "", "predict_proba"], [58, 2, 1, "", "predict_value"], [58, 2, 1, "", "set_fit_request"], [58, 2, 1, "", "set_params"]], "econml.policy.PolicyTree": [[59, 2, 1, "", "__init__"], [59, 4, 1, "", "always_treat_value_"], [59, 2, 1, "", "apply"], [59, 2, 1, "", "decision_path"], [59, 2, 1, "", "export_graphviz"], [59, 2, 1, "", "feature_importances"], [59, 4, 1, "", "feature_importances_"], [59, 2, 1, "", "fit"], [59, 2, 1, "", "get_depth"], [59, 2, 1, "", "get_metadata_routing"], [59, 2, 1, "", "get_n_leaves"], [59, 2, 1, "", "get_params"], [59, 2, 1, "", "get_train_test_split_inds"], [59, 4, 1, "", "honest_"], [59, 4, 1, "", "max_features_"], [59, 4, 1, "", "n_features_in_"], [59, 4, 1, "", "n_samples_"], [59, 2, 1, "", "plot"], [59, 4, 1, "", "policy_value_"], [59, 2, 1, "", "predict"], [59, 2, 1, "", "predict_proba"], [59, 2, 1, "", "predict_value"], [59, 2, 1, "", "render"], [59, 2, 1, "", "set_fit_request"], [59, 2, 1, "", "set_params"], [59, 2, 1, "", "set_predict_proba_request"], [59, 2, 1, "", "set_predict_request"], [59, 4, 1, "", "tree_"]], "econml.score": [[60, 1, 1, "", "EnsembleCateEstimator"], [61, 1, 1, "", "RScorer"]], "econml.score.EnsembleCateEstimator": [[60, 2, 1, "", "__init__"], [60, 2, 1, "", "const_marginal_effect"], [60, 2, 1, "", "effect"], [60, 2, 1, "", "marginal_effect"]], "econml.score.RScorer": [[61, 2, 1, "", "__init__"], [61, 2, 1, "", "best_model"], [61, 2, 1, "", "ensemble"], [61, 2, 1, "", "fit"], [61, 2, 1, "", "score"]], "econml.sklearn_extensions.linear_model": [[62, 1, 1, "", "DebiasedLasso"], [63, 1, 1, "", "MultiOutputDebiasedLasso"], [64, 1, 1, "", "SelectiveRegularization"], [65, 1, 1, "", "StatsModelsLinearRegression"], [66, 1, 1, "", "StatsModelsRLM"], [67, 1, 1, "", "WeightedLasso"], [68, 1, 1, "", "WeightedLassoCV"], [69, 1, 1, "", "WeightedLassoCVWrapper"], [70, 1, 1, "", "WeightedMultiTaskLassoCV"]], "econml.sklearn_extensions.linear_model.DebiasedLasso": [[62, 2, 1, "", "__init__"], [62, 4, 1, "", "coef_"], [62, 2, 1, "", "coef__interval"], [62, 4, 1, "", "coef_stderr_"], [62, 2, 1, "", "fit"], [62, 2, 1, "", "get_metadata_routing"], [62, 2, 1, "", "get_params"], [62, 4, 1, "", "intercept_"], [62, 2, 1, "", "intercept__interval"], [62, 4, 1, "", "intercept_stderr_"], [62, 4, 1, "", "n_iter_"], [62, 2, 1, "", "path"], [62, 2, 1, "", "predict"], [62, 2, 1, "", "predict_interval"], [62, 2, 1, "", "prediction_stderr"], [62, 2, 1, "", "score"], [62, 4, 1, "", "selected_alpha_"], [62, 2, 1, "", "set_fit_request"], [62, 2, 1, "", "set_params"], [62, 2, 1, "", "set_score_request"], [62, 3, 1, "", "sparse_coef_"]], "econml.sklearn_extensions.linear_model.MultiOutputDebiasedLasso": [[63, 2, 1, "", "__init__"], [63, 4, 1, "", "coef_"], [63, 2, 1, "", "coef__interval"], [63, 4, 1, "", "coef_stderr_"], [63, 2, 1, "", "fit"], [63, 2, 1, "", "get_metadata_routing"], [63, 2, 1, "", "get_params"], [63, 4, 1, "", "intercept_"], [63, 2, 1, "", "intercept__interval"], [63, 4, 1, "", "intercept_stderr_"], [63, 2, 1, "", "partial_fit"], [63, 2, 1, "", "predict"], [63, 2, 1, "", "predict_interval"], [63, 2, 1, "", "prediction_stderr"], [63, 2, 1, "", "score"], [63, 4, 1, "", "selected_alpha_"], [63, 2, 1, "", "set_fit_request"], [63, 2, 1, "", "set_params"], [63, 2, 1, "", "set_partial_fit_request"], [63, 2, 1, "", "set_score_request"]], "econml.sklearn_extensions.linear_model.SelectiveRegularization": [[64, 2, 1, "", "__init__"], [64, 4, 1, "", "coef_"], [64, 2, 1, "", "fit"], [64, 4, 1, "", "intercept_"], [64, 4, 1, "", "penalized_model"], [64, 2, 1, "", "predict"], [64, 2, 1, "", "score"]], "econml.sklearn_extensions.linear_model.StatsModelsLinearRegression": [[65, 2, 1, "", "__init__"], [65, 2, 1, "", "aggregate"], [65, 3, 1, "", "coef_"], [65, 2, 1, "", "coef__interval"], [65, 3, 1, "", "coef_stderr_"], [65, 2, 1, "", "fit"], [65, 2, 1, "", "get_metadata_routing"], [65, 2, 1, "", "get_params"], [65, 3, 1, "", "intercept_"], [65, 2, 1, "", "intercept__interval"], [65, 3, 1, "", "intercept_stderr_"], [65, 2, 1, "", "predict"], [65, 2, 1, "", "predict_interval"], [65, 2, 1, "", "prediction_stderr"], [65, 2, 1, "", "set_fit_request"], [65, 2, 1, "", "set_params"]], "econml.sklearn_extensions.linear_model.StatsModelsRLM": [[66, 2, 1, "", "__init__"], [66, 3, 1, "", "coef_"], [66, 2, 1, "", "coef__interval"], [66, 3, 1, "", "coef_stderr_"], [66, 2, 1, "", "fit"], [66, 2, 1, "", "get_metadata_routing"], [66, 2, 1, "", "get_params"], [66, 3, 1, "", "intercept_"], [66, 2, 1, "", "intercept__interval"], [66, 3, 1, "", "intercept_stderr_"], [66, 2, 1, "", "predict"], [66, 2, 1, "", "predict_interval"], [66, 2, 1, "", "prediction_stderr"], [66, 2, 1, "", "set_params"]], "econml.sklearn_extensions.linear_model.WeightedLasso": [[67, 2, 1, "", "__init__"], [67, 4, 1, "", "coef_"], [67, 2, 1, "", "fit"], [67, 2, 1, "", "get_metadata_routing"], [67, 2, 1, "", "get_params"], [67, 4, 1, "", "intercept_"], [67, 4, 1, "", "n_iter_"], [67, 2, 1, "", "path"], [67, 2, 1, "", "predict"], [67, 2, 1, "", "score"], [67, 2, 1, "", "set_fit_request"], [67, 2, 1, "", "set_params"], [67, 2, 1, "", "set_score_request"], [67, 3, 1, "", "sparse_coef_"]], "econml.sklearn_extensions.linear_model.WeightedLassoCV": [[68, 2, 1, "", "__init__"], [68, 2, 1, "", "fit"], [68, 2, 1, "", "get_metadata_routing"], [68, 2, 1, "", "get_params"], [68, 2, 1, "", "path"], [68, 2, 1, "", "predict"], [68, 2, 1, "", "score"], [68, 2, 1, "", "set_fit_request"], [68, 2, 1, "", "set_params"], [68, 2, 1, "", "set_score_request"]], "econml.sklearn_extensions.linear_model.WeightedLassoCVWrapper": [[69, 2, 1, "", "__init__"], [69, 2, 1, "", "get_params"], [69, 2, 1, "", "set_params"]], "econml.sklearn_extensions.linear_model.WeightedMultiTaskLassoCV": [[70, 2, 1, "", "__init__"], [70, 2, 1, "", "fit"], [70, 2, 1, "", "get_metadata_routing"], [70, 2, 1, "", "get_params"], [70, 2, 1, "", "path"], [70, 2, 1, "", "predict"], [70, 2, 1, "", "score"], [70, 2, 1, "", "set_fit_request"], [70, 2, 1, "", "set_params"], [70, 2, 1, "", "set_score_request"]], "econml.sklearn_extensions.model_selection": [[71, 1, 1, "", "GridSearchCVList"], [72, 1, 1, "", "WeightedKFold"], [73, 1, 1, "", "WeightedStratifiedKFold"]], "econml.sklearn_extensions.model_selection.GridSearchCVList": [[71, 2, 1, "", "__init__"], [71, 2, 1, "", "get_metadata_routing"], [71, 2, 1, "", "get_params"], [71, 2, 1, "", "set_params"]], "econml.sklearn_extensions.model_selection.WeightedKFold": [[72, 2, 1, "", "__init__"], [72, 2, 1, "", "get_n_splits"], [72, 2, 1, "", "split"]], "econml.sklearn_extensions.model_selection.WeightedStratifiedKFold": [[73, 2, 1, "", "__init__"], [73, 2, 1, "", "get_n_splits"], [73, 2, 1, "", "split"]], "econml.solutions.causal_analysis": [[74, 1, 1, "", "CausalAnalysis"]], "econml.solutions.causal_analysis.CausalAnalysis": [[74, 2, 1, "", "__init__"], [74, 2, 1, "", "cohort_causal_effect"], [74, 4, 1, "", "feature_names_"], [74, 2, 1, "", "fit"], [74, 2, 1, "", "global_causal_effect"], [74, 4, 1, "", "heterogeneity_model"], [74, 2, 1, "", "individualized_policy"], [74, 2, 1, "", "local_causal_effect"], [74, 4, 1, "", "nuisance_models_"], [74, 2, 1, "", "plot_heterogeneity_tree"], [74, 2, 1, "", "plot_policy_tree"], [74, 4, 1, "", "trained_feature_indices_"], [74, 2, 1, "", "typical_treatment_value"], [74, 4, 1, "", "untrained_feature_indices_"], [74, 2, 1, "", "whatif"]], "econml.utilities": [[75, 1, 1, "", "IdentityFeatures"], [75, 1, 1, "", "MissingModule"], [75, 1, 1, "", "MultiModelWrapper"], [75, 1, 1, "", "SeparateModel"], [75, 1, 1, "", "Summary"], [75, 1, 1, "", "WeightedModelWrapper"], [75, 5, 1, "", "add_intercept"], [75, 5, 1, "", "broadcast_unit_treatments"], [75, 5, 1, "", "check_input_arrays"], [75, 5, 1, "", "check_inputs"], [75, 5, 1, "", "check_models"], [75, 5, 1, "", "concatenate"], [75, 5, 1, "", "cross_product"], [75, 5, 1, "", "deprecated"], [75, 5, 1, "", "einsum_sparse"], [75, 5, 1, "", "filter_none_kwargs"], [75, 5, 1, "", "get_feature_names_or_default"], [75, 5, 1, "", "get_input_columns"], [75, 5, 1, "", "hstack"], [75, 5, 1, "", "inverse_onehot"], [75, 5, 1, "", "iscoo"], [75, 5, 1, "", "issparse"], [75, 5, 1, "", "jacify_featurizer"], [75, 5, 1, "", "ndim"], [75, 5, 1, "", "one_hot_encoder"], [75, 5, 1, "", "reshape"], [75, 5, 1, "", "reshape_Y_T"], [75, 5, 1, "", "reshape_arrays_2dim"], [75, 5, 1, "", "reshape_outcomewise_effects"], [75, 5, 1, "", "reshape_treatmentwise_effects"], [75, 5, 1, "", "shape"], [75, 5, 1, "", "size"], [75, 5, 1, "", "stack"], [75, 5, 1, "", "strata_from_discrete_arrays"], [75, 5, 1, "", "tensordot"], [75, 5, 1, "", "tocoo"], [75, 5, 1, "", "todense"], [75, 5, 1, "", "transpose"], [75, 5, 1, "", "transpose_dictionary"], [75, 5, 1, "", "vstack"]], "econml.utilities.IdentityFeatures": [[75, 2, 1, "", "fit"], [75, 2, 1, "", "fit_transform"], [75, 2, 1, "", "set_output"], [75, 2, 1, "", "transform"]], "econml.utilities.MultiModelWrapper": [[75, 2, 1, "", "fit"], [75, 2, 1, "", "predict"]], "econml.utilities.Summary": [[75, 2, 1, "", "add_extra_txt"], [75, 2, 1, "", "as_csv"], [75, 2, 1, "", "as_html"], [75, 2, 1, "", "as_latex"], [75, 2, 1, "", "as_text"], [75, 4, 1, "", "extra_txt"], [75, 4, 1, "", "tables"]], "econml.utilities.WeightedModelWrapper": [[75, 2, 1, "", "fit"], [75, 2, 1, "", "predict"]], "econml.validate": [[76, 1, 1, "", "BLPEvaluationResults"], [77, 1, 1, "", "CalibrationEvaluationResults"], [78, 1, 1, "", "DRTester"], [79, 1, 1, "", "EvaluationResults"], [80, 1, 1, "", "UpliftEvaluationResults"]], "econml.validate.BLPEvaluationResults": [[76, 2, 1, "", "__init__"], [76, 2, 1, "", "summary"]], "econml.validate.CalibrationEvaluationResults": [[77, 2, 1, "", "__init__"], [77, 2, 1, "", "plot_cal"], [77, 2, 1, "", "summary"]], "econml.validate.DRTester": [[78, 2, 1, "", "__init__"], [78, 2, 1, "", "evaluate_all"], [78, 2, 1, "", "evaluate_blp"], [78, 2, 1, "", "evaluate_cal"], [78, 2, 1, "", "evaluate_uplift"], [78, 2, 1, "", "fit_nuisance"], [78, 2, 1, "", "fit_nuisance_cv"], [78, 2, 1, "", "fit_nuisance_train"], [78, 2, 1, "", "get_cate_preds"], [78, 2, 1, "", "get_cv_splits"], [78, 2, 1, "", "get_cv_splitter"]], "econml.validate.EvaluationResults": [[79, 2, 1, "", "__init__"], [79, 2, 1, "", "plot_cal"], [79, 2, 1, "", "plot_qini"], [79, 2, 1, "", "plot_toc"], [79, 2, 1, "", "summary"]], "econml.validate.UpliftEvaluationResults": [[80, 2, 1, "", "__init__"], [80, 2, 1, "", "plot_uplift"], [80, 2, 1, "", "summary"]]}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "property", "Python property"], "4": ["py", "attribute", "Python attribute"], "5": ["py", "function", "Python function"]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:property", "4": "py:attribute", "5": "py:function"}, "terms": {"": [0, 1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 17, 18, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 74, 75, 78, 83, 86, 87, 88, 89, 90, 91, 93, 97, 98, 99, 101, 103, 105, 106], "0": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 22, 23, 24, 25, 26, 27, 32, 33, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67, 68, 70, 71, 74, 75, 78, 83, 88, 89, 91, 92, 98, 100, 101, 107], "00": [12, 15, 22, 91], "00007": 9, "0001": [9, 15, 45, 62, 63, 67, 68, 70, 74, 88], "00060": [1, 10, 39], "001": [12, 26, 32, 33, 40, 41, 42, 43, 44, 45, 55, 62, 67, 68, 70, 101], "00101": 9, "001025": 12, "00104": 7, "00244": 7, "00310431": 1, "00342": 105, "00493": 9, "006": 55, "00645": 7, "00672978": 1, "00727995": 1, "00756830": 1, "008402": 1, "00840240": 1, "008821": 14, "00990": 5, "01": [1, 10, 12, 15, 53, 54, 91, 100], "01166": 5, "01203": 45, "012351": 12, "01248": 7, "01271": [4, 17, 18, 19, 24], "013": 55, "01477": 9, "01512": 43, "01628": 5, "018984": 12, "02": 101, "02040816": 78, "02217": 7, "02258": 5, "02302": 9, "023649": 1, "02364992": 1, "02896": 105, "02945": 39, "032": 55, "03317": 5, "033480": 12, "034": 55, "03461": 105, "036": 55, "03751": 38, "03977": 37, "04": [62, 67], "04081633": 78, "042": 55, "044": 55, "04488": 5, "04802": 78, "04912": [1, 10, 61, 105], "05": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 22, 23, 26, 32, 33, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55, 62, 63, 65, 66, 74, 83, 88, 89, 100, 107], "05146": 61, "0518": [62, 63], "05561": 7, "05861": 43, "05992": 9, "06": [12, 13, 14, 15, 37, 38, 39, 40, 41, 42, 43, 44, 45, 56, 57], "06122449": 78, "062668": 12, "06535": 45, "06739": 4, "07": 15, "07285": 105, "075271": 14, "07641": 45, "07685": 44, "07874": 105, "08": [15, 66], "08163265": 78, "084048": 14, "08472": 7, "08484": 9, "085428": 14, "09036": [1, 10, 105], "092": 55, "096": 55, "09730": 41, "0x": [1, 91], "1": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 32, 33, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 74, 75, 78, 79, 80, 83, 86, 88, 89, 90, 91, 92, 94, 98, 100, 101], "10": [1, 4, 6, 9, 10, 12, 15, 17, 18, 22, 23, 24, 37, 38, 39, 40, 41, 42, 43, 44, 45, 53, 54, 56, 57, 58, 59, 62, 63, 67, 72, 73, 75, 78, 86, 88, 89, 100, 101, 105], "100": [0, 1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 22, 23, 25, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 49, 50, 51, 52, 53, 54, 55, 56, 58, 62, 63, 67, 68, 70, 74, 83, 88, 89, 91, 100], "1000": [4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 22, 37, 38, 39, 40, 41, 42, 43, 44, 45, 49, 50, 51, 52, 61, 62, 63, 67, 68, 70, 78, 83, 88], "10088": 5, "101": 55, "10109": 78, "10176": 105, "10204082": 78, "10218": 45, "103": 22, "105": 55, "10553": 44, "10558": 5, "105728": 1, "106287": 1, "10788": 4, "11": [22, 75], "110": 55, "11141": 9, "113": [22, 105], "11408": 105, "1148": [4, 17, 18, 19, 22, 24], "11513": 7, "1178": [4, 17, 18, 19, 22, 24], "11916": 5, "12": [44, 62, 67, 78, 101], "12006": 4, "12047": 37, "121": 22, "12244898": 78, "1228": [22, 105], "123": [1, 4, 5, 6, 7, 8, 9, 10, 12, 14, 15, 22, 37, 38, 39, 40, 41, 42, 43, 44, 45, 49, 50, 51, 52, 55, 78, 91, 98], "1242": [22, 105], "12607": 44, "12789": 7, "12819": 43, "130": 55, "1303": [62, 63], "13048": 44, "13278": 7, "134": 55, "136": 55, "13668": 39, "13720": 9, "13735": 9, "138": 22, "13850": 9, "13905": 7, "13980": 41, "14": [15, 78], "141": 55, "14114": 7, "14285714": 78, "14616": 9, "14837": 9, "14875": 5, "149723": 14, "15015": 7, "15076": 40, "15122": 7, "15207": 5, "15333": 9, "15599": 39, "156245": 14, "1565": 105, "15745": 9, "1578": 105, "15949": 7, "159709": 14, "16": 78, "1608": [1, 10, 39], "1610": [4, 17, 18, 19, 24], "16134": 43, "16326531": 78, "164": 55, "16434": 5, "16723": 5, "16799": 44, "168": 55, "17": [15, 78], "1702": 105, "1705": 105, "1706": 105, "1711": 105, "1712": [1, 10, 61, 78, 105], "17144": 4, "177951": 14, "17805": 41, "1804": 61, "1807": 105, "18314": 45, "18367347": 78, "18452": 37, "18798": 4, "19": [15, 78, 91], "1901": [1, 10, 105], "1905": 105, "19165": 43, "19536": 5, "199": 55, "1994": 105, "1d": [64, 68, 70, 74], "1e": [9, 12, 13, 14, 15, 45, 56, 57, 62, 63, 66, 67, 68, 70, 74], "2": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 22, 23, 24, 26, 32, 33, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 77, 78, 83, 86, 88, 89, 91, 98, 101], "20": [6, 8], "200": 88, "2001": 22, "2002": 105, "2003": 105, "2005": 105, "2006": 105, "2007": 78, "2008": 78, "2010": 105, "2011": 105, "2014": 105, "2016": 105, "2017": [1, 10, 61, 105], "2018": [22, 61, 105], "2019": [1, 4, 10, 17, 18, 19, 22, 24, 105], "202": 55, "2020": 78, "2021": 105, "2022": [78, 105], "20288": 44, "20408163": 78, "20712": 45, "20723": 39, "208": 55, "20838": 45, "20891": 39, "21": [78, 105], "210": 55, "2159048": [68, 70], "22": 15, "2244898": 78, "22506": 7, "22842": 43, "22962": 9, "23": [62, 63, 67, 68, 70, 78], "23012": 45, "23315": 43, "234572": 14, "23568": 41, "23577": 50, "236499": 1, "23668876": [68, 70], "23689075": [68, 70], "237": 55, "23706": 39, "23922": 45, "24": [12, 15, 105], "24127": 39, "24489796": 78, "25": 78, "25179": 5, "252216": 14, "26": 15, "26205": 4, "264": 55, "26530612": 78, "27": 78, "27031": 39, "27151": 43, "27619": 5, "27796": 43, "27937": 5, "27th": 105, "28": 78, "28039": 39, "28571429": 78, "28759": 5, "28760": 8, "28831": 5, "28950": 44, "29": 105, "294": 55, "2_2": [62, 67, 68, 70], "2_fro": [68, 70], "2d": [0, 5, 6, 7, 9, 37, 39, 43, 44, 45, 55, 64, 74, 75], "2sl": [81, 96, 106], "2\u03c0": 83, "3": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 17, 18, 21, 22, 23, 24, 26, 32, 33, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 65, 67, 68, 70, 72, 73, 74, 75, 79, 88, 89, 98, 100], "30": [78, 88, 91], "30302": 105, "30470": 7, "30477": 39, "30612245": 78, "310252": 14, "31097": 41, "31323": 9, "32": [15, 22, 78], "32010": 37, "326": 55, "32653061": 78, "34": [12, 78], "34348": 43, "345": 66, "34693878": 78, "34th": 105, "35": [15, 91], "35318": 8, "35355": 39, "35419": 45, "356386": 12, "35785": 39, "359694": 14, "36": 78, "36197": 45, "36734694": 78, "36983": 41, "36th": 105, "370": 55, "37211": 39, "37971": 37, "38": 78, "38627": 41, "38767": 42, "3877551": 78, "38783": 39, "39": 78, "39458": 43, "4": [1, 4, 9, 13, 15, 17, 18, 22, 23, 24, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 56, 57, 58, 59, 62, 63, 67, 68, 70, 74, 75, 78, 88, 89, 91, 105], "400": 88, "4000": 91, "40043": 43, "40182": 7, "40370": 9, "40375": 45, "404": 55, "40675": 9, "40797": 44, "40816327": 78, "40956": 7, "41": [62, 67, 78], "41437": 43, "41753": 43, "41958": 45, "42": 41, "42091": 5, "422": 55, "42849": 43, "42857": 5, "42857143": 78, "42966": 9, "43": [15, 78], "43164": 7, "432365": 14, "43525": 44, "44": 15, "4425765": [68, 70], "447146": 12, "44897959": 78, "45": [3, 4, 13, 17, 18, 22, 23, 24, 41, 56, 57, 58, 59, 62, 67, 78], "450666": 14, "451827": 1, "45946": 50, "46874778": [68, 70], "46915237": [68, 70], "46938776": 78, "47": [4, 17, 18, 19, 22, 24, 78], "47079": 44, "471": 105, "47167": 39, "478": 105, "48062": 45, "485": 105, "48825": 7, "48932": 44, "48979592": 78, "49": 78, "49123": 9, "49784": 44, "4997": 1, "49976": 7, "4998": 1, "4999": 1, "5": [1, 3, 4, 5, 6, 7, 8, 9, 12, 13, 14, 15, 17, 18, 22, 23, 24, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 49, 50, 51, 52, 56, 57, 58, 59, 62, 67, 68, 70, 74, 75, 78, 88, 89, 91, 97, 105], "50": [66, 78, 88, 89, 91], "500": [53, 54], "5000": [1, 97], "50083": 9, "51020408": 78, "511": 105, "51237": 49, "51645": 45, "51656": 39, "516888": 12, "52": 78, "523": [22, 105], "52457": 44, "52684": 42, "52799": 39, "529": 55, "53061224": 78, "537566": 1, "54": 78, "55102041": 78, "55145": 43, "56": [12, 62, 67, 78], "56023": 43, "563889": 14, "56445": 41, "56613": 44, "56817": 38, "57142857": 78, "58": 78, "58517": 45, "58547": [51, 52], "59183673": 78, "6": [1, 12, 13, 14, 15, 22, 39, 41, 42, 44, 45, 56, 57, 75, 78, 88, 89, 91], "60": [78, 91], "600": 88, "60449": 45, "60535": 5, "61": [62, 67, 78, 105], "6122449": 78, "61389": 44, "62444": 39, "62769": 4, "62784": 50, "63": [62, 67, 78], "63042": 6, "63265306": 78, "63382": 5, "64575": 4, "65": [15, 78], "65222": 43, "65306122": 78, "65817": 45, "65892": 41, "66": 15, "66072": 37, "66248": 44, "668518": 14, "66923": 9, "67": 78, "67082": 42, "67180": 7, "671889": 12, "67346939": 78, "67443": 44, "68": 12, "68110": 39, "68162": 44, "68185": 44, "68497": 4, "68552": 49, "69": 78, "69387755": 78, "7": [1, 39, 41, 43, 44, 53, 54, 62, 67, 75], "70": 15, "70325": 43, "70388": 9, "70800": 7, "71": [78, 105], "71428571": 78, "71859": 5, "71884": 43, "72": 78, "73": 12, "73469388": 78, "734747": 14, "73638006": 10, "74": [12, 78], "74220": 6, "74438": 44, "745086": 14, "75413": 39, "75510204": 78, "76": 78, "7755102": 78, "77560": 44, "77767": 45, "78": [62, 67, 78], "780683": 14, "78127": 37, "78225": 5, "782273": 1, "78379": [51, 52], "78512": 39, "79": 12, "79591837": 78, "79989": 45, "8": [1, 37, 38, 39, 40, 41, 42, 43, 44, 45, 75, 78], "80": 78, "800": 88, "80543": 44, "81": 15, "81632653": 78, "81869": 44, "82": 78, "82093": 45, "82623204": 10, "82860": [51, 52], "829662": 1, "83": 78, "83456": 37, "83506": 8, "83673469": 78, "845660": 12, "846": 105, "84831": 7, "84996": 43, "85": 78, "85550": 9, "85714286": 78, "86101": 6, "86512": 40, "866": 105, "86845": 39, "87": [15, 78], "87125": 5, "87481": 7, "87621": 9, "87712": 39, "87755102": 78, "88": [22, 62, 67], "88663": 43, "89": [78, 105], "89221": 45, "89360": 37, "89395": 45, "897341": 14, "89795918": 78, "89798": 39, "9": [1, 10, 12, 38, 43, 44, 45, 62, 67, 75], "90": 15, "90211": 44, "90402": 43, "90529": 39, "909121": 14, "91": 78, "91668": 9, "91673": 7, "91836735": 78, "9223372036854775807": 1, "92346": 44, "925064": 12, "92810": 39, "93": [62, 67, 78], "93348": 43, "93877551": 78, "94": 12, "94689": 45, "94941": 44, "95": [36, 77, 78, 79, 80], "95122": 43, "95918367": 78, "962": 105, "96284": 44, "96348": 45, "97": [62, 67], "972": 105, "9783642201912": 105, "97959184": 78, "98": 15, "98108": 43, "98291": 43, "98684": 38, "98827": 5, "99": 91, "99286": 40, "99568": 45, "995747": 12, "996314": 10, "99694": 39, "99782": 45, "99866": 49, "999631": 10, "A": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 37, 38, 39, 40, 41, 42, 43, 44, 45, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 74, 75, 81, 86, 88, 89, 90, 92, 93, 101, 102, 104, 105, 106, 107], "ATE": [4, 5, 6, 7, 9, 12, 13, 14, 15, 78, 107], "And": 98, "As": [39, 98], "At": [75, 93], "Be": 97, "But": [4, 17, 18, 22, 24, 59, 64, 74, 91], "By": [4, 17, 18, 22, 24, 74, 75, 104], "For": [0, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 22, 23, 24, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 55, 56, 57, 58, 59, 61, 62, 63, 64, 67, 68, 70, 71, 74, 75, 83, 88, 89, 90, 91, 92, 93, 99, 100, 101, 103, 107], "If": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 21, 22, 23, 24, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 78, 83, 84, 86, 88, 89, 90, 91, 97, 99, 102, 107], "In": [0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 24, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 68, 70, 78, 83, 86, 88, 89, 90, 91, 93, 97, 98, 99, 102, 103], "It": [0, 1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 22, 24, 26, 32, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 62, 67, 68, 70, 75, 78, 88, 89, 90, 91, 103, 107], "No": 105, "Not": [4, 5, 6, 7, 8, 9, 37, 38, 46, 55, 74], "On": [91, 98], "One": [1, 22, 83, 88, 89, 102, 103], "Or": 75, "Such": [0, 100], "That": [0, 4, 17, 18, 22, 23, 24, 48, 59, 74], "The": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 29, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 78, 83, 84, 86, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 101, 103, 104, 107], "Then": [1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 19, 37, 38, 39, 40, 41, 42, 43, 44, 45, 55, 56, 57, 61, 64, 88, 89, 91, 100], "There": 91, "These": [17, 18, 22, 23, 24, 37, 75, 78, 83, 86, 88, 91, 92, 97, 99, 100, 101, 103, 107], "To": [0, 1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 22, 24, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55, 59, 68, 70, 74, 88, 90, 107], "Will": [54, 62, 63, 65, 66, 67, 68, 70], "With": [98, 99], "_": [62, 67, 68, 70, 89, 90], "_0": [83, 92, 94], "_1": [62, 67, 68, 70, 83, 88, 91, 92, 94], "_2": [4, 17, 18, 24, 88, 91], "_21": [62, 67, 68, 70], "__": [17, 18, 21, 22, 23, 24, 58, 59, 62, 65, 66, 67, 68, 70, 71], "__init__": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81], "_base_grf": 81, "_base_grftre": 81, "_basedml": [4, 5, 8, 88, 91, 92], "_basedmliv": [37, 38, 93], "_basedriv": 93, "_basedrpolicylearn": [56, 57], "_bootstrap": 81, "_c": 78, "_cate_estim": [81, 88, 89, 90, 91, 92, 93], "_crossfit": [1, 81], "_dml": [90, 93], "_dr": 93, "_driv": [40, 41, 42, 43, 44, 45, 93], "_drlearner": [89, 91, 92], "_fro": [62, 67], "_g": 78, "_gen_model_i": 10, "_gen_model_t": 10, "_gen_ortho_learner_model_fin": 1, "_gen_ortho_learner_model_nuis": 1, "_gen_rlearner_model_fin": 10, "_i": [1, 38, 83, 91], "_intenttotreatdriv": [42, 93], "_interv": 36, "_metalearn": 92, "_model": [1, 10], "_model_i": 1, "_model_t": 1, "_n": 1, "_o": 78, "_ortho_forest": 91, "_ortho_learn": [81, 88, 89, 90, 91, 92, 93], "_ortholearn": [1, 5, 10, 12, 39, 55, 81, 88, 89, 90, 91, 92, 93, 102], "_pairedestimatorwrapp": 69, "_rlearner": [5, 81, 88, 91, 92], "_singletreeexportermixin": 59, "_singletreeinterpret": [2, 3], "_statsmodelswrapp": [65, 66], "_t": [1, 12, 14, 15, 89, 91], "_tree": [24, 59], "_x": 91, "a_hat": 88, "a_j": [58, 59], "aa": 105, "ab": [1, 10, 24, 39, 62, 63, 78, 105], "abil": 103, "abl": [12, 24, 49, 52, 74, 78], "about": [4, 17, 18, 24, 88, 89, 90, 97, 99, 104], "abov": [0, 1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 26, 32, 37, 38, 39, 40, 41, 42, 43, 44, 45, 49, 50, 51, 52, 53, 54, 55, 88, 89, 91, 93, 101, 102, 107], "absenc": 107, "absolut": [24, 78], "absoult": 22, "abstract": 0, "abund": 103, "academ": 103, "accept": [1, 8, 21, 37, 40, 41, 42, 43, 44, 45, 49, 50, 51, 52, 67, 68, 70, 75, 79, 80, 88], "access": [4, 75, 88, 89, 96, 107], "accommod": 86, "accompani": 88, "accord": 75, "accordingli": 97, "account": [12, 49, 56, 57], "accur": [65, 89, 98, 99], "accuraci": 22, "achiev": [38, 59, 61, 74, 83, 88, 89], "acm": [1, 10], "across": [1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 17, 18, 22, 23, 24, 37, 38, 39, 40, 41, 42, 43, 44, 45, 55, 56, 57, 59, 61, 74, 78, 83, 86, 88, 89, 97, 99, 100, 103], "action": [88, 89, 90, 93], "activ": [68, 70, 104], "actual": [74, 83, 88, 99], "ad": [11, 17, 18, 21, 22, 23, 24, 46, 47, 58, 59, 62, 63, 65, 67, 68, 70, 75, 78, 88], "adapt": [49, 81, 87, 90, 91, 95, 106], "add": [4, 15, 17, 18, 22, 23, 24, 58, 75, 78, 88, 91], "add_": 75, "add_extra_txt": [75, 81], "add_intercept": [75, 81], "add_unobserved_common_caus": 11, "addit": [11, 36, 46, 47, 65, 74, 75, 83, 86, 98, 99], "addition": [83, 88], "address": [88, 89, 90, 101], "adher": 5, "adjust": [86, 90, 103], "adopt": [97, 103], "advanc": 104, "advantag": [81, 88, 89, 106], "advis": [62, 63, 67, 88, 89], "advisor": 103, "advoc": 61, "affect": [60, 83, 86, 88, 89, 91, 99], "aforement": 89, "after": [1, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 25, 27, 28, 29, 30, 31, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 56, 57, 75, 88, 89], "afterward": [4, 98], "again": [1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 37, 38, 39, 40, 41, 42, 43, 44, 45, 55, 88, 94], "against": [2, 3, 61, 64, 74], "agg_model": 65, "aggreg": [1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 37, 38, 39, 40, 41, 42, 43, 44, 45, 55, 56, 57, 58, 61, 65, 81, 98], "ai": 97, "aid": 93, "aka": [81, 87, 88, 89, 90, 93, 106], "al": [1, 10, 52, 78], "albeit": [88, 89, 91], "alejandro": 61, "algorithm": [4, 17, 18, 22, 24, 38, 40, 42, 44, 49, 52, 59, 63, 68, 70, 72, 73, 74, 88, 89, 91, 92, 101, 105], "alia": [1, 17, 18, 21, 22, 23, 24, 58, 59, 62, 63, 65, 67, 68, 70], "alic": [103, 104], "align": [83, 98], "all": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 22, 24, 26, 32, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 67, 68, 70, 71, 74, 75, 78, 79, 81, 83, 85, 87, 88, 89, 90, 91, 92, 93, 98, 99, 101, 102, 103, 106], "allow": [0, 1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 17, 18, 21, 22, 23, 24, 29, 30, 37, 38, 39, 40, 41, 42, 43, 44, 45, 49, 50, 51, 52, 53, 54, 55, 58, 59, 62, 63, 65, 67, 68, 70, 71, 74, 75, 86, 88, 89, 91, 92, 97, 98, 99, 102, 107], "allow_miss": [1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 37, 38, 39, 40, 41, 42, 43, 44, 45, 49, 50, 51, 52, 53, 54, 55], "along": [4, 5, 6, 7, 8, 9, 10, 37, 38, 39, 55, 62, 67, 68, 70, 74, 75, 78, 86, 92, 103], "alpha": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 21, 22, 23, 24, 26, 32, 33, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55, 62, 63, 65, 66, 67, 68, 70, 74, 83, 88, 89, 91, 100], "alpha_0": 88, "alpha_1": 88, "alpha_2": 88, "alpha_cov": [9, 15, 45, 62, 63], "alpha_i": 88, "alpha_max": [62, 67, 68, 70], "alpha_min": [62, 67, 68, 70], "alpha_t": 91, "alphabet": [0, 1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 37, 38, 39, 40, 41, 42, 43, 44, 45, 49, 50, 51, 52, 53, 54, 55], "alphanumer": [0, 12, 13, 14, 15, 56], "alreadi": [4, 5, 6, 7, 9, 12, 13, 14, 15, 16, 24, 59, 62, 63, 67, 68, 70, 74, 75, 78, 86, 98, 99, 103], "also": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 22, 23, 24, 25, 26, 27, 32, 33, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 61, 62, 63, 65, 67, 68, 70, 74, 78, 83, 84, 85, 86, 88, 89, 90, 91, 92, 97, 99, 100, 101, 102, 103], "alter": [14, 100], "altern": [1, 61, 88, 89], "although": 74, "alwai": [3, 4, 17, 18, 22, 24, 59, 61, 62, 63, 67, 68, 70, 72, 73, 74, 83, 105], "always_treat_value_": [3, 59, 81], "am": [4, 17, 18, 22], "ambigu": 36, "american": [22, 105], "among": [4, 17, 18, 22, 24, 49, 59, 61, 71, 74, 88, 89, 91, 99, 107], "amount": [4, 17, 18, 22, 23, 24, 56, 57, 58, 59, 62, 67, 68, 70], "an": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 21, 22, 23, 24, 26, 32, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 74, 75, 78, 81, 83, 85, 86, 88, 89, 90, 91, 92, 93, 94, 96, 98, 99, 100, 101, 102, 103, 106, 107], "analogu": [61, 91], "analysi": [4, 5, 6, 7, 9, 12, 13, 14, 15, 26, 32, 74, 81, 104, 106], "analyt": [78, 86, 98, 99], "analyz": 88, "angl": [68, 70], "ani": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 22, 23, 24, 25, 27, 28, 29, 30, 31, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 55, 56, 57, 58, 59, 60, 61, 71, 75, 77, 78, 80, 83, 86, 88, 89, 91, 92, 96, 99, 101, 102], "annal": [4, 17, 18, 19, 22, 24, 105], "anoth": [72, 73], "answer": [85, 97, 104], "apart": 91, "api": [4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 40, 41, 42, 43, 44, 45, 46, 47, 74, 75, 81, 88, 98, 103, 104, 106], "appear": [55, 64, 98], "append": [17, 18, 98], "appli": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 22, 23, 24, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 63, 64, 74, 75, 78, 81, 88, 89, 90, 91, 104], "applic": [2, 3, 56, 57, 59, 88, 89, 90, 92, 103], "approach": [1, 4, 10, 14, 15, 17, 18, 22, 43, 45, 53, 54, 55, 65, 86, 88, 89, 90, 91, 93, 96, 97, 99, 100, 101, 103, 105, 107], "appropri": [0, 1, 47, 78, 88, 93, 102], "approx": [83, 91], "approxim": [4, 14, 15, 17, 18, 24, 83, 86, 88, 97], "ar": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 74, 75, 78, 79, 80, 81, 83, 84, 86, 87, 94, 95, 96, 98, 99, 100, 101, 103, 104, 105, 106, 107], "arang": [1, 55], "arbitrari": [4, 5, 6, 7, 8, 9, 10, 12, 38, 48, 56, 57, 88, 89, 92, 93], "arbitrarili": [62, 63, 67, 68, 70], "architectur": 1, "area": 78, "arg": [0, 1, 5, 10, 16, 25, 27, 28, 29, 30, 31, 34, 35, 36, 69, 75, 88], "argmin_": 91, "argument": [0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 32, 33, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 55, 56, 57, 61, 62, 63, 64, 67, 68, 70, 74, 75, 83, 88, 89, 91], "aris": [88, 103], "arm": [12, 49, 52, 54, 56, 57], "around": [0, 1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55, 60, 83, 91, 107], "arr": [64, 75, 98], "arrai": [0, 1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 22, 24, 26, 32, 33, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 74, 75, 76, 77, 78, 80, 91], "arrang": 75, "array1d": 1, "array_lik": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 17, 18, 22, 23, 24, 26, 32, 33, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 62, 63, 64, 65, 66, 67, 68, 70, 72, 73, 74, 75], "arriv": 94, "arxiv": [1, 4, 10, 17, 18, 19, 24, 39, 61, 62, 63, 78, 105], "as_csv": [75, 81], "as_html": [75, 81], "as_latex": [75, 81], "as_latex_tabular": 75, "as_text": [75, 81], "ask": [81, 85, 106], "assess": [78, 88, 89, 107], "assig": 75, "assign": [3, 50, 55, 75, 78, 83, 89, 90, 92, 99], "associ": [0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 22, 28, 37, 38, 39, 40, 41, 42, 43, 44, 45, 55, 72, 73, 88, 89, 91, 105], "assum": [0, 1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 25, 27, 29, 30, 32, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 55, 62, 64, 65, 67, 71, 75, 78, 83, 86, 88, 89, 91, 94, 96, 97], "assumpt": [83, 86, 88, 89, 90, 91, 92, 97, 99, 104], "asympot": 14, "asymptot": [14, 15, 43, 45, 88, 89, 91, 93], "atc": 11, "ate": [0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55, 81, 83], "ate_": [4, 81], "ate__infer": [4, 81], "ate_infer": [0, 1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55, 81], "ate_interv": [0, 1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55, 81], "ate_stderr_": [4, 81], "ate_v": 78, "athei": [4, 17, 18, 19, 22, 24, 105], "athey2017": [89, 105], "athey2019": [88, 89, 91, 100, 103, 105], "atom": [68, 70], "att": [4, 11], "att_": [4, 81], "att__infer": [4, 81], "att_stderr_": [4, 81], "attempt": 75, "attent": 97, "attract": 88, "attribut": [0, 2, 3, 4, 5, 6, 7, 8, 9, 12, 13, 14, 15, 16, 17, 18, 21, 22, 23, 24, 26, 32, 33, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 78, 81, 88, 89, 106], "attributeerror": [1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 37, 38, 39, 40, 41, 42, 43, 44, 45, 55], "audienc": 99, "augment": 88, "auto": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 17, 18, 22, 23, 24, 37, 38, 39, 40, 41, 42, 43, 44, 45, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 67, 68, 70, 74, 100, 102], "autoc": 78, "autom": 103, "automat": [0, 11, 53, 62, 67, 68, 70, 88, 89, 92, 97, 102], "automl": [74, 102], "auxiliari": [1, 10, 23, 24, 58, 83, 93], "avail": [0, 1, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 22, 23, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55, 63, 83, 101, 107], "averag": [0, 1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 22, 23, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 74, 77, 78, 79, 81, 88, 89, 91, 92, 106], "avoid": [4, 12, 13, 14, 15, 17, 18, 24, 36, 56, 57, 62, 67, 68, 70, 88, 89], "awai": [3, 4, 13, 17, 18, 22, 24, 41, 56, 57, 58, 59, 89], "awar": 97, "ax": [2, 3, 56, 57, 59, 75], "axi": [55, 75, 77, 79, 80, 88], "b": [26, 42, 44, 81, 83, 86, 88, 89, 90, 91, 93, 101, 104, 106], "back": [22, 72, 73, 89], "backend": [53, 54], "background_sampl": [0, 1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 37, 38, 39, 40, 41, 42, 43, 44, 45, 49, 50, 51, 52, 53, 54, 55], "bag": [4, 13, 17, 18, 22, 23, 41, 81, 88, 89, 106], "baiocchi": 61, "balanc": [3, 4, 13, 17, 18, 22, 24, 41, 56, 57, 58, 59, 72, 73, 99], "balanced": [3, 4, 13, 17, 18, 22, 24, 41, 56, 57, 58, 59], "band": [78, 79, 80], "bandwidth": 6, "bang": [89, 105], "base": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 87, 88, 89, 92, 94, 95, 99, 100, 101, 106, 107], "base_loss": 61, "basecateestim": [0, 48, 60, 61, 75, 81, 83, 88, 89, 90, 91, 92, 93], "baseensembl": [23, 58], "baseestim": [21, 71], "basegrf": [17, 18, 22, 24, 81], "basel": [56, 57], "baselin": [0, 1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 37, 38, 39, 40, 41, 42, 43, 44, 45, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 74, 83, 89], "baseorthoforest": [53, 54, 91], "basetre": [24, 59], "basi": [36, 94, 96], "basic": [1, 98], "batch": [72, 73], "batch_siz": [53, 54], "battocchi": 105, "bayesian": [4, 17, 18, 22], "becam": 103, "becaus": [4, 17, 18, 24, 60, 62, 63, 67, 68, 70, 74, 89, 92, 98, 99, 103], "becom": [88, 101, 103], "been": [1, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 24, 25, 27, 28, 29, 30, 31, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 55, 59, 74, 75, 78, 88, 89, 97, 98, 103], "befor": [4, 17, 18, 22, 24, 25, 27, 28, 29, 30, 31, 34, 35, 59, 72, 73, 74, 88], "begin": [83, 88, 98, 107], "behav": [86, 99], "behavior": [97, 101, 104], "behaviour": [4, 17, 18, 22, 24, 59, 74], "behind": 1, "being": [1, 22, 54, 64, 74, 83, 88, 89, 91, 99], "believ": [83, 88], "belong": 55, "below": [1, 4, 10, 17, 18, 22, 24, 75, 84, 88, 89, 90, 92, 107], "benchmark": 106, "benefit": [88, 98], "benign": [4, 17, 18, 24], "best": [2, 3, 4, 5, 6, 7, 8, 9, 12, 13, 14, 15, 17, 18, 22, 24, 37, 38, 39, 40, 41, 42, 43, 44, 45, 52, 55, 56, 57, 58, 59, 61, 62, 63, 67, 68, 70, 71, 74, 78, 88, 89, 97, 107], "best_estimator_": [88, 89], "best_model": [10, 61, 81], "best_scor": [10, 61], "beta": [4, 17, 18, 83, 91, 94], "beta_1": 64, "beta_2": 64, "beta_t": [14, 15, 91], "better": [78, 86, 88, 89, 91, 101], "between": [0, 1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 24, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 62, 67, 68, 70, 74, 75, 78, 83, 86, 92, 99], "beyond": 12, "bia": [4, 5, 6, 7, 9, 12, 13, 14, 15, 46, 49, 56, 57, 92, 97, 99, 105], "bias": [40, 41, 42, 43, 44, 45, 88, 99, 107], "bias_part_of_coef": [0, 81], "bickel": 105, "big": 88, "biggest": [101, 103], "bin": [78, 105], "binari": [0, 1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 37, 38, 39, 40, 41, 43, 44, 45, 49, 50, 51, 52, 55, 61, 74, 78, 86, 88, 92, 101], "binomi": [1, 4, 5, 6, 7, 8, 9, 12, 14, 15, 37, 38, 39, 40, 41, 42, 43, 44, 45, 49, 50, 51, 52], "biometr": 105, "bit": 1, "bite": [4, 17, 18, 24], "black": [92, 101], "blb": [4, 13, 41, 53, 54, 89, 100], "blbinfer": [53, 54], "block": [24, 91], "blp": [76, 78, 79, 107], "blp_re": 79, "blpevaluationresult": [78, 79, 81], "bodi": 99, "boil": 91, "book": 105, "bool": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 21, 22, 23, 24, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75], "boolean": [74, 78], "boost": [88, 89, 93, 102, 103], "bootstrap": [0, 1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 17, 18, 22, 25, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55, 78, 81, 83, 86, 88, 89, 91, 99, 106], "bootstrap_typ": [25, 36], "bootstrapestim": [36, 81, 100], "bootstrapinfer": [0, 1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55, 81, 83, 100], "bot": 97, "both": [0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 22, 23, 26, 32, 33, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 75, 78, 86, 88, 89, 90, 91, 92, 99], "bottom": [2, 3, 56, 57, 59], "bound": [0, 1, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 22, 24, 26, 32, 33, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 62, 63, 65, 66, 83], "box": [2, 3, 56, 57, 59, 88, 89, 92, 101], "branch": [2, 3, 4, 13, 17, 18, 22, 24, 41, 56, 57, 58, 59], "break": 75, "breiman": 22, "brief": [88, 89, 90], "bring": [75, 103], "broad": 104, "broadcast_unit_treat": [75, 81], "broader": 84, "broadest": 97, "brought": 98, "brown": 105, "bubbl": 99, "buhlmann2011": [88, 89, 105], "build": [2, 3, 17, 18, 22, 23, 49, 50, 51, 52, 53, 54, 58, 62, 63, 74, 78, 85, 91, 97, 98], "built": [2, 3, 22, 62, 67, 98, 100], "busi": [103, 104], "bw": 6, "bypass": [24, 58, 59, 62, 67, 88], "b\u00fchlmann": 105, "c": [24, 37, 38, 39, 40, 41, 42, 43, 44, 45, 62, 67, 68, 70, 75, 86, 88, 101, 105], "c0": [37, 38, 39, 40, 41, 42, 43, 44, 45], "c_d": [4, 5, 6, 7, 9, 12, 13, 14, 15], "c_t": [4, 5, 6, 7, 9, 12, 13, 14, 15], "c_y": [4, 5, 6, 7, 9, 12, 13, 14, 15], "cach": [1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 37, 38, 39, 40, 41, 42, 43, 44, 45, 55], "cache_valu": [1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 37, 38, 39, 40, 41, 42, 43, 44, 45, 55], "cachedvalu": [1, 81], "cal": 78, "cal_r": 79, "cal_r_squar": 77, "calcul": [0, 1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 22, 23, 24, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67, 68, 70, 75, 78, 83, 88, 91, 98, 99, 100], "calibr": [77, 78, 79, 107], "calibrationevaluationresult": [78, 79, 81], "call": [0, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 22, 24, 25, 27, 28, 29, 30, 31, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 67, 68, 70, 74, 78, 83, 85, 88, 89, 90, 91, 93, 98], "callabl": 64, "caller": [62, 67], "can": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 22, 24, 25, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 62, 63, 64, 67, 68, 70, 71, 75, 78, 81, 83, 86, 88, 89, 90, 91, 92, 93, 94, 98, 99, 100, 101, 103, 104, 106, 107], "candid": [4, 17, 18, 22, 24, 91], "cannot": [36, 72, 73, 75, 86, 88, 89, 90, 98, 99, 104, 107], "captur": [49, 50, 51, 52, 53, 54, 61, 75, 78, 88, 91, 99], "care": [24, 89], "carefulli": 97, "carlo": [1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 37, 38, 39, 40, 41, 42, 43, 44, 45, 55, 56, 57, 61], "case": [1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 17, 18, 22, 24, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 55, 56, 57, 59, 61, 68, 70, 71, 74, 78, 83, 86, 88, 89, 90, 91, 92, 97, 98, 101, 102, 103], "cast": [62, 63, 67, 68, 70, 75], "casual": 85, "cat": 74, "catc": 92, "cate": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 25, 28, 37, 38, 39, 40, 41, 42, 43, 44, 45, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 61, 74, 75, 78, 81, 86, 88, 89, 90, 91, 92, 93, 98, 99, 100, 101, 106], "cate_estim": [2, 3, 11], "cate_feature_nam": [0, 1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55, 81], "cate_interpret": [81, 101], "cate_model": [52, 60, 61], "cate_output_nam": [0, 1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55, 81], "cate_preds_train_": 78, "cate_preds_val_": 78, "cate_treatment_nam": [0, 1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55, 81], "categor": [0, 1, 4, 5, 6, 7, 8, 9, 10, 31, 37, 38, 39, 40, 41, 43, 45, 53, 55, 61, 74, 78, 86, 88, 89, 91, 92], "categori": [1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 37, 38, 39, 40, 41, 42, 43, 44, 45, 49, 50, 51, 52, 53, 54, 55, 56, 57, 61, 74, 75, 86, 92, 99], "catt": 92, "caught": 74, "caus": 103, "causal": [0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 24, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55, 61, 74, 78, 81, 83, 85, 86, 88, 90, 91, 98, 99, 100, 101, 103, 104, 105, 106, 107], "causal_analysi": 81, "causal_forest": [88, 91], "causal_refut": 11, "causalanalysi": 81, "causalforest": [81, 87, 88, 106], "causalforestdml": [81, 86, 88, 89, 91, 100], "causalivforest": 81, "caution": [4, 17, 18, 24, 99], "cdf": [25, 36], "cdot": [1, 5, 10, 12, 14, 15, 37, 38, 39, 40, 41, 42, 43, 44, 45, 55, 56, 57, 83, 88, 89, 90, 91], "ceil": [2, 3, 4, 13, 17, 18, 22, 24, 41, 56, 57, 58, 59], "censor": 23, "center": [17, 18, 62, 63, 67, 68, 70, 98], "central": 98, "certain": [68, 70], "certif": 97, "certifi": 97, "cf1": 17, "cfdml1": 4, "cfest": 83, "cfiv1": 18, "challeng": 107, "chang": [1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 17, 18, 21, 22, 23, 24, 37, 38, 39, 40, 41, 42, 43, 44, 45, 55, 58, 59, 60, 62, 63, 65, 67, 68, 70, 71, 74, 75, 83, 97, 104], "charact": [2, 3, 56, 57, 59], "character": [14, 15, 43, 45, 89], "characterist": [88, 89, 90, 93, 103], "chart": [81, 106], "check": [1, 9, 15, 17, 18, 21, 22, 23, 24, 45, 58, 59, 62, 63, 65, 66, 67, 68, 70, 71, 74, 75, 78, 88, 89, 91, 92, 93, 97, 107], "check_arrai": 75, "check_input": [1, 24, 58, 59, 62, 67, 75, 81], "check_input_arrai": [75, 81], "check_model": [75, 81], "checkout": [10, 89, 91], "chernozhukov": [1, 10, 39, 78, 105], "chernozhukov2016": [88, 89, 103, 105], "chernozhukov2017": [88, 89, 103, 105], "chernozhukov2018": [88, 89, 103, 105], "chernozhukov2022": [4, 5, 6, 7, 9, 12, 13, 14, 15, 78, 105, 107], "chetverikov": [39, 105], "child": [1, 2, 3, 4, 10, 13, 17, 18, 22, 23, 24, 41, 56, 57, 58, 59, 88, 89, 91], "children": 23, "choic": [4, 5, 6, 7, 8, 9, 10, 88, 89, 90, 91, 93, 99], "choos": [2, 24, 59, 61, 75, 88, 89, 99], "chose": 103, "chosen": [4, 17, 18, 22, 23, 24, 62, 63, 83, 88, 89, 93, 95, 103, 107], "christian": 39, "ci": [4, 5, 6, 7, 9, 12, 13, 14, 15, 77, 79, 80], "ci_low": 74, "ci_upp": 74, "cinelli": 105, "class": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 87, 95, 96, 98, 102, 106, 107], "classic": [88, 89, 90], "classif": [2, 3, 12, 56, 57, 59, 74, 83, 89, 91], "classifi": [4, 5, 6, 7, 8, 9, 12, 13, 14, 15, 22, 37, 38, 39, 40, 41, 42, 43, 44, 45, 53, 55, 56, 57, 88, 89], "clear": 92, "click": [88, 89, 90, 91, 92, 93], "clinic": 103, "clip": [12, 13, 14, 15, 40, 41, 42, 43, 44, 45, 56, 57], "clone": [0, 1, 10, 12, 24, 36, 64, 100], "closer": 78, "cluster": 55, "cme": 98, "co": [4, 17, 18, 24, 65, 66, 83], "code": [1, 9, 10, 15, 24, 45, 62, 63, 67, 68, 70, 83, 97, 98], "coef": [0, 5, 6, 7, 9, 14, 15, 37, 39, 43, 44, 45, 55, 62, 67, 68, 70], "coef_": [0, 1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 37, 38, 39, 40, 41, 42, 43, 44, 45, 55, 62, 63, 64, 65, 66, 67, 81, 88], "coef__infer": [0, 5, 6, 7, 9, 14, 15, 39, 43, 44, 45, 55, 81], "coef__interv": [0, 5, 6, 7, 9, 14, 15, 31, 39, 43, 44, 45, 55, 62, 63, 65, 66, 81, 88, 89], "coef_init": [62, 67, 68, 70], "coef_low": [62, 63], "coef_path": [68, 70], "coef_path_continu": [68, 70], "coef_path_lar": [68, 70], "coef_stderr_": [62, 63, 65, 66, 81], "coef_upp": [62, 63], "coef_z": [37, 38, 39, 40, 41, 42, 43, 44, 45], "coeffic": [65, 66], "coeffici": [0, 4, 5, 6, 7, 9, 14, 15, 17, 18, 24, 26, 32, 33, 37, 39, 43, 44, 45, 53, 54, 55, 62, 63, 64, 65, 66, 67, 68, 70, 76, 78, 80, 88, 91, 94, 101, 105], "cohort": [74, 78], "cohort_causal_effect": [74, 81], "cohort_effect": 74, "coincid": 24, "col": 75, "colinear": 88, "collaps": [0, 1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 26, 32, 33, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55, 60], "collect": [22, 36, 83, 87, 88, 89, 90, 91, 96, 97, 98, 104], "column": [0, 1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 22, 23, 24, 26, 27, 32, 33, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 65, 74, 75], "columnt": 24, "com": 105, "combin": [4, 62, 67, 68, 70, 75, 78, 79, 83, 88, 89, 91, 92, 98, 103], "come": [24, 85, 99], "comma": 75, "command": 97, "commit": 97, "common": [11, 75, 91, 103, 107], "commun": [81, 106], "compani": 103, "compar": [12, 13, 14, 15, 56, 57, 61, 68, 70, 74, 88, 89, 91, 97, 103, 107], "comparison": [61, 81, 91, 106, 107], "compat": [2, 3, 16, 46, 56, 57, 59, 72, 73, 75, 102], "complement": [88, 107], "complementar": 88, "complex": [86, 88], "compli": 98, "complianc": [98, 99, 103], "complier": [37, 38, 39, 40, 41, 42, 43, 44, 45], "compon": [17, 18, 21, 22, 23, 24, 53, 54, 58, 59, 62, 65, 66, 67, 68, 70, 71, 92], "composit": [1, 4, 5, 6, 7, 8, 9, 10, 12, 14, 15, 37, 38, 39, 40, 41, 42, 43, 44, 45, 53, 55, 56, 57, 88], "comprehens": 86, "comput": [0, 1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 22, 23, 24, 25, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 62, 65, 67, 68, 70, 74, 75, 88, 89, 91, 98, 101, 107], "computation": [2, 3, 4, 14, 15, 17, 18, 24, 43, 45, 53, 54], "computationali": [18, 24], "compute_mean": 36, "concat": [1, 5, 8, 10, 12, 13, 37, 38, 39, 40, 41, 42, 43, 44, 45, 56, 57, 61], "concaten": [12, 13, 14, 15, 50, 54, 56, 57, 75, 81, 88, 90, 92, 94], "concept": 84, "concern": 99, "conclus": 107, "concret": [14, 15, 89, 91], "concurr": [25, 36], "condit": [0, 1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 22, 23, 24, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 60, 78, 81, 88, 89, 91, 92, 97, 106], "condition": [86, 99], "conduct": [91, 97], "conf": 86, "conf_int": [26, 32, 81], "conf_int_mean": [33, 81], "conf_int_point": [33, 81], "confer": [1, 10, 105], "confid": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 22, 23, 26, 32, 33, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55, 62, 63, 65, 66, 74, 78, 79, 80, 81, 83, 86, 88, 89, 91, 92, 93, 99, 100, 103, 106], "configur": [46, 47, 75], "confound": [4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 81, 87, 88, 89, 90, 91, 93, 96, 99, 103, 106, 107], "confounded": 99, "confounder_nam": 11, "consciou": 99, "consecut": 54, "conserv": [32, 33], "consid": [2, 3, 4, 13, 17, 18, 22, 24, 41, 53, 54, 56, 57, 58, 59, 74, 75, 83, 86, 88, 99, 107], "consider": 101, "consist": [4, 5, 6, 7, 9, 12, 13, 14, 15, 36, 41, 56, 58, 62, 63, 67, 68, 70, 75, 88, 97], "const_marginal_": [0, 1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 37, 38, 39, 40, 41, 42, 43, 44, 45, 49, 50, 51, 52, 53, 54, 55, 81], "const_marginal_ate_infer": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 37, 38, 39, 40, 41, 42, 43, 44, 45, 49, 50, 51, 52, 53, 54, 55, 81], "const_marginal_ate_interv": [0, 1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 37, 38, 39, 40, 41, 42, 43, 44, 45, 49, 50, 51, 52, 53, 54, 55, 81], "const_marginal_effect": [0, 1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 27, 29, 37, 38, 39, 40, 41, 42, 43, 44, 45, 49, 50, 51, 52, 53, 54, 55, 60, 81, 83, 88, 89, 98, 100], "const_marginal_effect_infer": [0, 1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 37, 38, 39, 40, 41, 42, 43, 44, 45, 49, 50, 51, 52, 53, 54, 55, 81], "const_marginal_effect_interv": [0, 1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 29, 37, 38, 39, 40, 41, 42, 43, 44, 45, 49, 50, 51, 52, 53, 54, 55, 81, 83, 88, 89, 100], "constant": [0, 1, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 22, 24, 37, 38, 39, 40, 41, 42, 43, 44, 45, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 66, 67, 68, 70, 78, 83, 88, 91], "constrain": [58, 59], "constraint": [4, 17, 18, 24, 56, 57, 88, 100], "construct": [2, 3, 4, 9, 13, 15, 17, 18, 22, 24, 41, 45, 53, 56, 57, 59, 62, 63, 74, 75, 76, 77, 78, 79, 80, 83, 88, 89, 91, 93, 99, 101, 103], "consult": 11, "consum": [102, 103], "contain": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 21, 22, 23, 24, 26, 32, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 62, 65, 66, 67, 68, 70, 71, 74, 75, 76, 77, 78, 79, 80, 87, 88, 89, 95, 96], "containt": [65, 66], "context": [9, 13, 15, 24, 41, 45, 56, 58, 68, 70, 89, 98], "contigu": [24, 62, 67, 68, 70], "continu": [1, 4, 5, 6, 7, 8, 9, 10, 15, 37, 38, 39, 40, 41, 43, 45, 53, 55, 61, 62, 63, 67, 68, 70, 74, 83, 86, 88, 91, 97, 99, 102], "contract": 98, "contrari": 91, "contribut": [17, 18, 22, 23, 24, 56, 57, 58, 59, 97], "control": [0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 22, 24, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 74, 75, 78, 83, 87, 88, 89, 90, 91, 92, 93, 99, 103], "control_valu": 11, "convent": 75, "converg": [62, 63, 66, 67, 68, 70, 89, 98], "convers": 75, "convert": [0, 4, 5, 6, 7, 9, 14, 15, 17, 18, 22, 23, 24, 33, 37, 39, 43, 44, 45, 55, 58, 59, 75], "convex": 88, "coo": 75, "coordin": [4, 17, 18, 22, 23, 24, 58, 59, 62, 63, 65, 66, 67, 68, 70], "copi": [4, 60, 62, 63, 67, 68, 70, 75], "copy_x": [62, 63, 67, 68, 70], "core": [4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 17, 18, 22, 40, 41, 42, 43, 44, 45, 103], "corner": [2, 3, 56, 57, 59], "corr": 105, "correct": [4, 5, 9, 12, 15, 17, 18, 22, 45, 56, 57, 62, 63, 89, 91, 97, 107], "correctli": 86, "correl": [4, 17, 18, 24, 83, 86, 94, 99, 103], "correspond": [0, 1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 26, 31, 32, 33, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 71, 74, 75, 78, 83, 88, 89, 90, 91, 93], "correspondingli": 91, "cost": [3, 7, 14, 24, 44, 62, 63, 67, 74, 88, 89, 91, 98, 101], "could": [1, 5, 26, 32, 53, 83, 86, 88, 89, 90, 91, 93, 98, 99], "couldn": 75, "count": [1, 81], "counterfactu": [0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 55, 56, 57, 74, 83, 91, 105, 107], "counterpart": 74, "coupl": 91, "cours": 84, "cov": [18, 24, 40, 41, 42, 43, 44, 45, 78], "cov_clip": [40, 41, 42, 43, 44, 45], "cov_typ": [14, 34, 35, 65, 66, 100], "covari": [4, 9, 14, 15, 17, 18, 22, 23, 34, 35, 40, 41, 42, 43, 44, 45, 62, 63, 65, 66, 88, 100], "cpu": [4, 17, 18, 22, 68, 70], "creat": [1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 17, 18, 22, 23, 24, 25, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 53, 55, 56, 57, 58, 59, 74, 75, 83, 88, 89, 91, 97, 98, 101], "creation": [2, 3], "credibl": 107, "criteria": [4, 17, 18, 24, 75], "criterion": [4, 17, 18, 19, 22, 23, 24, 26, 32, 33, 58, 59, 74, 91, 93], "cross": [1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 37, 38, 39, 40, 41, 42, 43, 44, 45, 53, 55, 56, 57, 61, 62, 63, 67, 68, 70, 72, 73, 74, 75, 78, 88, 89, 91, 92, 99, 102], "cross_product": [27, 30, 75, 81], "crossfit": [1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 37, 38, 39, 40, 41, 42, 43, 44, 45, 55, 88, 89], "csr": [17, 18, 22, 23, 24, 58, 59], "csv": 75, "cumbersom": 88, "current": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 22, 24, 37, 38, 39, 40, 41, 42, 43, 44, 45, 55, 56, 57, 58, 59, 75, 91, 98, 104], "curv": [78, 79, 80], "curve_data_dict": 80, "custom": [81, 88, 91, 97, 99, 102, 106], "cut": 97, "cutoff": 101, "cv": [1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 37, 38, 39, 40, 41, 42, 43, 44, 45, 53, 54, 55, 56, 57, 61, 68, 70, 71, 74, 78, 88, 89], "cv_reg": 88, "cv_splitter": 78, "cyclic": [62, 63, 67, 68, 70], "cython": 91, "d": [0, 4, 5, 6, 7, 9, 14, 15, 23, 24, 26, 32, 33, 39, 43, 44, 45, 55, 65, 66, 75, 78, 83, 86, 92, 94, 98, 105], "d1": 75, "d2": 75, "d_": 83, "d_f_t": [0, 1, 4, 5, 6, 7, 8, 9, 10, 16, 37, 38, 39, 40, 41, 42, 43, 44, 45, 49, 50, 51, 52, 53, 60, 83], "d_t": [0, 1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 26, 32, 33, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55, 60, 74, 75, 83], "d_var": [23, 58], "d_w": [0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 53, 54, 55, 56, 57, 61, 75, 83], "d_x": [0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 64, 75, 83], "d_y": [0, 1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 26, 32, 33, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55, 60, 61, 64, 75, 83], "d_z": [0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 83], "dag": 11, "data": [0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 22, 23, 24, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 65, 67, 68, 70, 72, 73, 74, 75, 77, 78, 80, 81, 83, 86, 87, 88, 89, 90, 91, 92, 93, 96, 97, 98, 99, 101, 102, 103, 104, 105, 106, 107], "data_subset_refut": 11, "datafram": [0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 26, 32, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 74, 75, 76, 77, 79, 80], "datapoint": [17, 18, 22, 23, 24, 58, 59], "dataset": [22, 25, 36, 55, 62, 67, 72, 73, 74, 75, 78, 88, 89, 90, 92, 93, 101], "date": [22, 89], "dco": 97, "de": 105, "debias": [0, 1, 4, 9, 10, 15, 17, 18, 22, 39, 45, 62, 63, 81, 88, 89, 105, 106], "debiasedlasso": [9, 15, 45, 63, 81, 88, 89, 100], "debiasedlassocateestimatordiscretemixin": [0, 15, 81, 89], "debiasedlassocateestimatormixin": [0, 9, 45, 81, 88, 93], "decemb": 105, "decid": [4, 17, 18, 24, 62, 63, 67, 68, 70, 91], "decim": [0, 4, 5, 6, 7, 9, 12, 13, 14, 15, 26, 32, 33, 37, 39, 43, 44, 45, 55], "decis": [2, 3, 17, 18, 22, 23, 24, 56, 57, 58, 59, 62, 63, 67, 87, 88, 89, 90, 96, 101, 103, 104], "decision_path": [17, 18, 22, 23, 24, 58, 59, 81], "decomposit": [68, 70], "decor": [1, 10, 75], "decreas": [2, 3, 4, 13, 17, 18, 22, 24, 41, 56, 57, 58, 59, 74, 97], "deep": [17, 18, 21, 22, 23, 24, 58, 59, 62, 63, 65, 66, 67, 68, 69, 70, 71, 96, 103, 105], "def": [1, 10, 37, 38, 39, 40, 41, 42, 43, 44, 45, 83, 88], "defaul": [1, 24, 59], "default": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 78, 88, 89, 91, 100, 102, 107], "defin": [2, 19, 37, 38, 39, 40, 41, 42, 43, 44, 45, 56, 57, 58, 59, 62, 63, 67, 68, 70, 74, 78, 88, 89, 91], "definit": 89, "degre": [24, 46, 47, 74, 88, 89, 94, 102], "delai": 75, "delimit": 75, "deliv": [86, 97, 103], "delta": [83, 94], "demand": [0, 1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55, 88, 103, 105], "demir": [39, 105], "demonstr": 98, "deni": 39, "denot": [5, 10, 50, 54, 83, 89, 91, 92], "dens": 75, "depend": [1, 4, 17, 18, 24, 40, 41, 43, 45, 69, 83, 89, 93, 100, 102], "deprec": [5, 7, 9, 55, 75, 81], "depth": [2, 3, 4, 13, 17, 18, 22, 23, 24, 41, 56, 57, 58, 59, 74], "depth_decay_expon": [17, 18, 22, 23, 24, 56, 57, 58, 59], "deriv": [23, 24, 32, 33, 46, 48, 62, 63, 88, 102], "descent": [62, 67, 68, 70], "describ": [22, 39, 83, 86, 88, 89, 90, 91, 92, 93, 101], "descript": [5, 10, 12, 55, 88, 89, 90], "deseri": 98, "design": [0, 75, 81, 88, 97, 103, 104, 106], "desir": [54, 75, 78], "despit": [74, 91], "detail": [11, 13, 41, 56, 58, 68, 70, 81, 88, 89, 90, 91, 92, 93, 100, 103, 106], "determin": [1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 24, 37, 38, 39, 40, 41, 42, 43, 44, 45, 55, 56, 57, 58, 59, 61, 62, 63, 67, 68, 70, 74, 75, 86, 99], "determinin": 24, "determinist": [4, 17, 18, 22, 24, 59, 74], "develop": [83, 93, 97, 104], "deviat": [17, 18, 22, 23, 33], "dgp": [37, 38, 39, 40, 41, 42, 43, 44, 45, 83], "diagnost": 97, "diagon": 24, "dict": [1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 21, 22, 23, 24, 40, 41, 42, 43, 44, 45, 46, 47, 58, 59, 62, 63, 65, 66, 67, 68, 70, 71, 74, 75, 77, 80], "dictionari": [0, 1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 23, 37, 38, 39, 40, 41, 42, 43, 44, 45, 49, 50, 51, 52, 53, 54, 55, 58, 71, 75, 77, 80], "did": [24, 96, 99], "didn": [17, 18, 22, 23], "differ": [0, 1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 17, 18, 22, 24, 26, 32, 37, 38, 39, 40, 41, 42, 43, 44, 45, 54, 55, 59, 74, 75, 78, 88, 89, 90, 91, 92, 97, 98, 101, 102, 103, 107], "differenti": [47, 101], "difficult": 107, "digit": [2, 3, 56, 57, 59], "dim": [6, 94], "dimens": [0, 1, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 24, 26, 32, 33, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 60, 74, 75, 83, 88], "dimension": [0, 1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 22, 26, 29, 32, 33, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 60, 62, 64, 65, 66, 75, 78, 86, 88, 89, 90, 91, 93, 100, 105], "direct": [78, 83, 87, 88, 89, 90, 93, 96, 103, 107], "directli": [11, 23, 24, 62, 67, 68, 70, 75, 83, 99, 102, 103], "disabl": [39, 40, 41, 43, 45], "discontinu": 92, "discord": 85, "discount": [86, 103], "discov": [86, 99], "discoveri": 78, "discret": [0, 1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 37, 38, 39, 40, 41, 42, 43, 44, 45, 49, 50, 51, 52, 53, 54, 55, 56, 57, 61, 74, 75, 86, 89, 91, 92, 102, 103], "discrete_instru": [1, 37, 38, 39, 40, 41, 43, 45], "discrete_outcom": [1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 37, 38, 39, 40, 41, 42, 43, 44, 45, 55, 56, 57, 61], "discrete_treat": [1, 4, 5, 6, 7, 8, 9, 10, 37, 38, 39, 40, 41, 42, 43, 44, 45, 53, 55, 61, 88], "discuss": 85, "disjoint": 1, "disk": 98, "displai": [2, 3, 74, 75], "disregard": [62, 63, 67, 68, 70], "distanc": [24, 59], "distinct": [46, 75], "distinguish": 103, "distribut": [22, 25, 32, 36, 62, 63, 65, 66, 83, 89, 92, 98, 100], "divers": 103, "divid": [12, 13, 14, 15, 56, 57, 89], "divis": [4, 13, 17, 18, 22, 41], "dm": 89, "dml": [1, 53, 81, 86, 88, 89, 90, 91, 92, 93, 97, 100, 101, 103, 107], "dmliv": [38, 40, 41, 42, 43, 44, 45, 81, 86, 93], "dmlorthoforest": [81, 86, 91, 100], "do": [1, 14, 16, 22, 24, 55, 58, 59, 62, 67, 81, 83, 86, 88, 89, 92, 94, 98, 99, 104, 106], "doc": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 40, 41, 42, 43, 44, 45], "docstr": [17, 18], "document": [5, 10, 11, 12, 55, 71, 84, 88, 89, 90, 91, 92, 93], "doe": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 17, 18, 22, 24, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 55, 56, 57, 58, 59, 75, 83, 88, 89, 91], "doesn": [64, 75], "domain": [49, 81, 87, 103, 106], "domainadaptationlearn": [81, 92], "don": [0, 24, 58, 59, 62, 67, 81, 88, 89, 101, 106], "done": [4, 17, 18, 24, 64, 83, 88, 89, 102], "dot": [2, 3, 11, 56, 57, 59, 62, 67, 68, 70, 75, 83, 91], "doubl": [1, 2, 3, 5, 6, 7, 8, 9, 10, 17, 18, 22, 23, 24, 39, 55, 56, 57, 58, 59, 61, 81, 87, 89, 95, 99, 103, 105, 106], "doubli": [4, 12, 14, 15, 54, 56, 57, 78, 81, 87, 100, 103, 105, 106], "dowhi": [0, 1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55, 81, 84, 97, 106], "dowhywrapp": [0, 1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55, 81], "down": [2, 3, 56, 57, 59, 91], "downsid": 89, "downstream": [78, 93], "downturn": 97, "dpolynomialfeatur": 81, "dq": [78, 83], "dr": [56, 57, 78, 81, 89, 91, 92, 93, 100], "dr_train": 78, "dr_val": 78, "drate": 4, "draw": [2, 3, 22, 25, 36, 56, 57, 59], "drawback": 89, "drawn": 83, "driv": [41, 42, 43, 44, 45, 81, 86, 93, 103], "driven": [86, 99, 103], "drlearner": [13, 14, 15, 56, 57, 81, 86, 89, 91, 92, 99, 107], "drop": [4, 74, 75], "drorthoforest": [81, 86, 89, 91, 100], "drpolicyforest": 81, "drpolicytre": 81, "drtester": [81, 106], "drug": [99, 103], "dt": 83, "dt_featur": [46, 48], "dtrain": 78, "dtype": [17, 18, 22, 23, 24, 58, 59, 62, 63, 67, 68, 70, 75], "dual": [9, 15, 45, 62, 63, 67, 68, 70], "dual_gap": [62, 67, 68, 70], "dudik2014": [89, 105], "dud\u00edk": 105, "due": [4, 17, 18, 89, 92], "duflo": [39, 105], "dump": 98, "duplic": [62, 67, 68, 70], "dure": [1, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 17, 18, 22, 24, 37, 38, 39, 40, 41, 42, 43, 44, 45, 55, 56, 57, 59, 61, 64, 68, 70, 74, 97], "dval": 78, "dwivedi": 78, "dwivedi2020": 78, "dylan": [1, 10], "dynam": [55, 81, 105, 106], "dynamicdml": [81, 90], "d\u2093": [4, 5, 6, 7, 8, 9, 13, 48, 49, 50, 52, 61], "d\u209c": [4, 5, 6, 7, 8, 9, 13, 48, 61], "e": [0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 26, 32, 33, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 67, 68, 70, 74, 78, 83, 86, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 100, 101, 103, 105, 107], "e_": [0, 1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55], "e_n": [5, 10, 14, 15, 61, 88, 98], "e_x": [0, 1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55], "each": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 26, 28, 31, 32, 33, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 74, 75, 78, 83, 88, 89, 90, 91, 92, 93, 94, 98, 99, 101, 102, 103], "earli": [22, 89], "earlier": [86, 99, 103], "eas": 103, "easi": [24, 101], "easier": [103, 104], "easili": [83, 88, 97], "econml": [83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 100, 101, 103, 104, 107], "econom": 97, "econometr": [1, 10, 103, 104], "econometrica": 105, "economist": 104, "ecosystem": 85, "edg": 97, "edu": 105, "effect": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 21, 22, 23, 24, 26, 30, 32, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 67, 68, 70, 74, 75, 77, 78, 79, 81, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 99, 100, 101, 104, 105, 106, 107], "effect_infer": [0, 1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55, 81], "effect_interv": [0, 1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 29, 30, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55, 81, 83, 88, 89, 100], "effect_modifi": 11, "effici": [4, 17, 18, 24, 86, 99, 105], "effort": 103, "eigenvalu": [4, 17, 18, 24], "einstein": 75, "einsum_spars": [75, 81], "eisnum": 75, "either": [0, 1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 17, 18, 22, 24, 26, 32, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 55, 56, 57, 61, 69, 71, 74, 75, 78, 83, 88, 89, 90, 91, 92, 98, 99, 101, 102], "elabor": [1, 10], "elast": [62, 67, 88], "elasticnet": [62, 67, 88, 89], "elasticnetcv": [62, 67, 88, 89], "element": [0, 1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 17, 18, 22, 23, 24, 37, 38, 39, 40, 41, 42, 43, 44, 45, 58, 59, 74, 75, 94], "elimin": 99, "elips": 75, "ell": [1, 64, 91], "ell_1": [15, 88, 89, 91], "ell_2": [53, 54], "els": [1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 37, 38, 39, 40, 41, 42, 43, 44, 45, 56, 57, 61, 62, 63, 67, 68, 70, 74, 83], "email": 99, "embed": 88, "empir": [1, 26, 88, 91, 98], "empirac": [25, 36], "empiricalinferenceresult": 81, "emploi": 104, "en": [4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 40, 41, 42, 43, 44, 45], "enabl": [0, 1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 21, 22, 24, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55, 59, 65, 71, 74, 75, 91, 93, 98, 100, 107], "enable_feder": [7, 14, 44, 65, 98], "enable_metadata_rout": [17, 18, 21, 22, 23, 24, 58, 59, 62, 63, 65, 67, 68, 70], "encapsul": [17, 18, 21, 22, 23, 24, 58, 59, 62, 63, 65, 66, 67, 68, 70, 71], "encod": [1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 37, 38, 39, 40, 41, 42, 43, 44, 45, 49, 50, 51, 52, 53, 54, 55, 56, 57, 61, 74, 75, 88], "end": [3, 17, 18, 22, 23, 24, 58, 59, 62, 67, 68, 70, 75, 83, 88, 98, 102], "endpoint": [62, 63], "enet_path": [62, 67], "enforc": [3, 4, 13, 17, 18, 22, 24, 41, 56, 57, 58, 59, 75, 88, 97], "engag": [103, 104], "enhanc": 99, "enough": [4, 5, 6, 7, 9, 12, 13, 14, 15, 40, 41, 42, 43, 44, 45, 83, 98], "ensembl": [5, 8, 12, 17, 18, 22, 50, 56, 57, 58, 60, 61, 81, 88, 89, 100], "ensemble_model": 61, "ensemble_scor": 61, "ensemblecateestim": [61, 81], "ensur": [3, 4, 11, 13, 17, 18, 22, 24, 41, 56, 57, 58, 59], "enter": [0, 5, 6, 7, 9, 14, 15, 37, 39, 43, 44, 45, 55, 88], "entir": [25, 36], "entri": [1, 4, 5, 6, 7, 8, 9, 12, 13, 14, 15, 24, 37, 38, 39, 40, 41, 42, 43, 44, 45, 55, 65, 66, 74, 75, 88], "entropi": 88, "ep": [62, 67, 68, 70], "epsilon": [5, 10, 83, 88, 89, 91, 94], "epsilon_t": [89, 90], "equal": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 17, 18, 22, 23, 24, 37, 38, 39, 40, 41, 42, 43, 44, 45, 53, 54, 56, 57, 58, 59, 63, 65, 72, 73, 75, 78, 83], "equat": [1, 2, 3, 4, 5, 10, 12, 13, 17, 18, 19, 22, 23, 24, 39, 41, 56, 57, 58, 59, 83, 88, 89, 90, 91, 98], "equival": [0, 1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 37, 38, 39, 40, 41, 42, 43, 44, 45, 49, 50, 51, 52, 53, 54, 55, 62, 63, 67, 75, 83, 91, 98, 99], "eras": [62, 63, 67], "erhan": 105, "err": [76, 80], "err_typ": [79, 80], "error": [0, 1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 21, 22, 23, 24, 26, 32, 33, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 62, 63, 65, 66, 67, 68, 70, 74, 76, 79, 80, 88, 89, 91, 92, 93, 97, 107], "error_scor": 71, "especi": [2, 3, 4, 13, 17, 18, 22, 24, 41, 53, 56, 57, 58, 59, 62, 63, 67, 68, 70, 88, 89, 93], "essenti": [1, 88, 89, 91], "est": [1, 4, 5, 6, 7, 8, 9, 10, 12, 14, 15, 37, 38, 39, 40, 41, 42, 43, 44, 45, 49, 50, 51, 52, 55, 88, 89, 90, 91, 93, 98, 100, 101], "est1": 98, "est2": 98, "est3": 98, "esther": 39, "estiamtor": 60, "estim": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 74, 75, 76, 78, 80, 81, 98, 99, 100, 101, 102, 104, 105, 106, 107], "estimand": 11, "estimand_typ": 11, "estimated_coef": [62, 67], "estimationalong": [40, 41, 42, 43, 44, 45], "estimator_list": 71, "estimators_": [17, 18, 22, 81], "et": [1, 10, 52, 78], "eta": [61, 83, 88, 91, 98], "eta_t": 90, "etc": [0, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 23, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55], "etext": 75, "evalu": [1, 24, 47, 59, 61, 75, 78, 89, 97, 105, 107], "evaluate_al": [78, 81], "evaluate_blp": [78, 81], "evaluate_c": [78, 81], "evaluate_uplift": [78, 81], "evaluationresult": [78, 81], "even": [2, 3, 4, 13, 14, 15, 17, 18, 22, 24, 41, 56, 57, 58, 59, 61, 74, 83, 88, 89, 91, 92, 95, 96], "event": 75, "ever": 98, "everi": [1, 3, 4, 17, 18, 24, 58, 59, 62, 63, 67, 68, 70, 75, 83, 89, 91, 100, 101, 103], "everyon": [83, 99], "everyth": 97, "evolv": 74, "exact": [17, 18, 22, 23, 32, 33, 102], "exactli": [18, 98], "exampl": [1, 4, 5, 6, 7, 8, 9, 10, 12, 14, 15, 17, 18, 22, 23, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 51, 52, 55, 58, 62, 64, 67, 68, 70, 75, 81, 86, 87, 96, 97, 99, 106, 107], "except": [1, 24, 62, 63, 67, 68, 70, 74, 75], "exclud": [5, 12, 13, 14, 15, 49, 56, 57, 78], "execut": [24, 59], "exercis": [86, 99], "exist": [1, 17, 18, 21, 22, 23, 24, 36, 58, 59, 62, 63, 65, 67, 68, 70, 72, 73, 75, 83, 97, 103, 104], "exn": 75, "exogen": 83, "exp": 91, "expand": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 22, 24, 37, 38, 39, 40, 41, 42, 43, 44, 45, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 74, 98], "expans": [1, 94, 96], "expect": [1, 17, 18, 22, 23, 46, 58, 59, 62, 63, 67, 68, 70, 83, 88, 91, 98], "expens": [2, 3, 103, 104], "experi": [78, 81, 85, 86, 99, 103, 106], "experiment": [74, 88, 89, 90, 93, 103, 104], "expertis": 97, "expit": [1, 4, 5, 6, 7, 8, 9, 12, 14, 15, 37, 38, 39, 40, 41, 42, 43, 44, 45, 49, 50, 51, 52], "explain": [61, 89, 101, 103], "explan": [0, 1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 37, 38, 39, 40, 41, 42, 43, 44, 45, 49, 50, 51, 52, 53, 54, 55, 71, 75, 101], "explicit": [74, 88], "explicitli": [0, 1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 37, 38, 39, 40, 41, 42, 43, 44, 45, 49, 50, 51, 52, 53, 54, 55, 75, 99, 100], "explor": 71, "exponenti": [88, 89], "export": [2, 3, 56, 57, 59], "export_graphviz": [2, 3, 56, 57, 59, 81], "expos": [0, 1], "exposit": [88, 89, 91], "expositori": [1, 10], "exposur": 98, "express": [64, 74, 83, 91, 101], "extens": [55, 71, 81, 88, 89, 90, 91, 92, 93, 100], "extra": [4, 17, 18, 24, 61, 75, 88, 91, 98], "extra_txt": [75, 81], "extract": [75, 88], "extrapol": 89, "extrem": [2, 3, 56, 57, 59, 98], "f": [5, 10, 46, 64, 83, 88, 89, 91, 98], "f0_test": 1, "f0_train": 1, "f1": 98, "f1_score": 1, "f1_test": 1, "f1_train": 1, "f2": 98, "f3": 98, "f_x": 91, "face": 88, "facilit": [102, 107], "fact": [88, 89, 91, 103], "factor": [26, 32, 87, 88, 89, 90, 96, 98, 99, 101], "fail": 36, "fall": [3, 4, 13, 17, 18, 22, 24, 41, 56, 57, 58, 59, 72, 73, 88, 91, 92], "fals": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 21, 22, 23, 24, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 65, 67, 68, 70, 71, 72, 73, 74, 75, 88, 89, 91], "familiar": [83, 97, 104], "faq": [81, 87, 95, 106], "far": [89, 103], "fashion": [2, 75, 98], "fast": [88, 101], "faster": [14, 15, 17, 18, 22, 23, 43, 45, 62, 63, 67, 68, 70, 103], "fat": 99, "favor": [88, 89], "feasibl": [4, 17, 18, 24, 88], "feat": 75, "featur": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 22, 23, 24, 26, 32, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 67, 68, 70, 72, 73, 74, 75, 78, 83, 85, 86, 88, 89, 91, 92, 94, 99, 101, 102, 103], "feature_import": [4, 17, 18, 22, 23, 24, 56, 57, 58, 59, 81], "feature_importances_": [4, 17, 18, 22, 23, 24, 56, 57, 58, 59, 81], "feature_ind": 74, "feature_index": 74, "feature_level": 74, "feature_nam": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 26, 32, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 74, 75, 101], "feature_names_": [74, 81], "feature_names_out": 75, "feature_valu": 74, "featurizer_": [0, 12, 13, 14, 15, 39, 40, 41, 42, 43, 44, 45, 81], "feder": [7, 14, 16, 44, 65, 81, 106], "federated_estim": 98, "federated_learn": 81, "federatedestim": [81, 106], "feedback": [81, 106], "few": [74, 86, 88, 99], "fewer": [88, 89], "ffloat": 33, "field": [1, 103], "figur": [2, 3, 56, 57, 59], "file": [2, 3, 11, 56, 57, 59], "fill": [2, 3, 56, 57, 59], "filter": [75, 103], "filter_none_kwarg": [75, 81], "filtered_kwarg": 75, "final": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 22, 31, 32, 33, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 74, 83, 86, 88, 89, 90, 91, 92, 97, 98, 100, 101, 102, 107], "final_model": 49, "final_model_effect": [42, 44], "find": [4, 17, 18, 22, 24, 59, 64, 72, 73, 74, 91, 101], "finit": [22, 86, 89, 91], "first": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 18, 22, 24, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 49, 50, 51, 52, 54, 55, 56, 57, 61, 64, 74, 75, 78, 88, 89, 91, 94, 97, 98, 102], "first_stag": 88, "fish": 97, "fistaregressor": 88, "fit": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 74, 75, 78, 81, 83, 86, 88, 89, 90, 91, 93, 97, 98, 100, 101, 102, 107], "fit_cat": 78, "fit_cate_intercept": [5, 6, 7, 9, 14, 15, 37, 39, 40, 42, 43, 44, 45, 55, 88], "fit_cov_directli": [40, 41, 43, 45], "fit_intercept": [1, 4, 5, 10, 17, 18, 23, 24, 37, 62, 63, 64, 65, 66, 67, 68, 70, 88], "fit_nuis": [78, 81], "fit_nuisance_cv": [78, 81], "fit_nuisance_train": [78, 81], "fit_nusi": 78, "fit_on_train": 78, "fit_param": [46, 47, 75], "fit_transform": [0, 1, 4, 5, 6, 7, 8, 9, 10, 12, 14, 15, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 53, 55, 56, 57, 75, 81, 88], "fitted_ind": 1, "fitted_models_fin": 0, "fix": [4, 17, 18, 22, 24, 59, 68, 70, 74, 88], "fk_test": 1, "fk_train": 1, "flag": [1, 4, 5, 17, 18, 24, 74, 78], "flat": 63, "flatten": [24, 49, 50, 51, 52, 75], "flexibl": [10, 40, 41, 42, 43, 44, 45, 86, 88, 89, 91, 92, 99, 102, 103, 104, 105], "flexible_model_effect": [40, 41, 42, 43, 44, 45], "flexibleallow": 104, "flie": [2, 3, 56, 57, 59], "float": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 22, 23, 24, 26, 32, 33, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 62, 63, 64, 65, 66, 67, 68, 70, 74, 76, 77, 80, 83], "float64": [1, 12, 14, 15, 17, 18, 22, 23, 24, 58, 59], "flow": [81, 106], "fname_transform": [26, 32], "fold": [1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 37, 38, 39, 40, 41, 42, 43, 44, 45, 55, 56, 57, 61, 68, 70, 72, 73, 74, 78, 88, 89, 102], "folk": 84, "follow": [1, 2, 3, 4, 5, 10, 11, 12, 13, 17, 18, 22, 24, 39, 41, 55, 56, 57, 58, 59, 74, 78, 83, 88, 89, 90, 91, 92, 93, 98, 102], "font": [2, 3, 56, 57, 59], "fontsiz": [2, 3, 56, 57, 59, 101], "footnot": 83, "forc": [62, 67, 68, 70, 101, 103], "force_all_finit": 75, "force_all_finite_w": 75, "force_all_finite_x": 75, "forecast": [97, 104], "forest": [4, 5, 6, 7, 8, 9, 12, 13, 14, 15, 17, 18, 19, 22, 23, 24, 37, 38, 39, 40, 41, 42, 43, 44, 45, 53, 54, 55, 56, 57, 58, 59, 74, 81, 86, 87, 88, 89, 92, 93, 99, 101, 102, 103, 105, 106], "forestdriv": [40, 81, 86, 93], "forestdrlearn": [81, 86, 89, 91, 100], "forestlearn": 91, "forestmodelfinalcateestimatordiscretemixin": [0, 13, 81, 89, 91], "forestmodelfinalcateestimatormixin": [0, 41, 81, 93], "form": [1, 5, 9, 11, 14, 15, 17, 18, 19, 21, 22, 23, 24, 45, 58, 59, 62, 65, 66, 67, 68, 70, 71, 75, 83, 88, 91, 104], "formal": [3, 4, 13, 17, 18, 22, 24, 41, 56, 57, 58, 59, 78, 81, 87, 94, 106], "format": [0, 2, 3, 4, 5, 6, 7, 9, 11, 14, 15, 17, 18, 22, 23, 24, 33, 37, 39, 43, 44, 45, 46, 47, 55, 56, 57, 58, 59, 75], "former": [83, 88, 89], "formul": [1, 83], "formula": [62, 63, 67], "fortran": [62, 67, 68, 70], "foster": [1, 10, 105], "foster2019": [88, 89, 103, 105], "found": [2, 3, 4, 13, 17, 18, 22, 24, 41, 56, 57, 58, 59, 74], "foundat": [88, 89], "fourier": [6, 88], "fourth": 65, "frac": [1, 10, 12, 14, 15, 56, 57, 62, 63, 67, 68, 70, 78, 88, 89, 91, 92], "fraction": [2, 3, 4, 13, 17, 18, 22, 24, 41, 56, 57, 58, 59], "framework": [88, 89, 91], "freq_weight": [1, 5, 7, 8, 10, 12, 14, 37, 38, 39, 40, 42, 43, 44, 65, 81], "frequent": [81, 91, 106], "friedberg": 105, "friedberg2018": [91, 105], "from": [0, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 22, 23, 24, 26, 32, 33, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 62, 63, 64, 65, 66, 67, 68, 70, 74, 75, 78, 83, 88, 89, 90, 91, 92, 93, 94, 97, 98, 100, 101, 102, 103, 104, 107], "front": [17, 18, 88], "ft": 83, "ft_test": 1, "ft_train": 1, "full": [1, 26, 36, 88, 92, 98], "fulli": [42, 44, 86, 88, 99], "function": [0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 23, 24, 26, 32, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 62, 63, 66, 67, 68, 70, 71, 74, 75, 78, 83, 86, 88, 89, 90, 91, 93, 94, 99, 101, 103], "fundament": 107, "further": [4, 5, 17, 18, 24, 83, 88, 89, 91], "furthermor": [88, 89], "futur": [11, 90], "futurewarn": 75, "f\u209c": 48, "g": [0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 21, 22, 23, 24, 26, 32, 33, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 60, 62, 63, 65, 67, 68, 70, 78, 83, 88, 89, 90, 91, 92, 93, 95, 98, 100, 101, 103, 105, 107], "g_0": 89, "g_t": 89, "g_x": 91, "gamma": [83, 94], "gap": [9, 15, 24, 45, 59, 62, 63, 67, 68, 70], "gate": [77, 79], "gaussian": 6, "gave": 89, "gbf": 102, "geer": 105, "genearl": 23, "gener": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 22, 23, 24, 28, 37, 38, 39, 40, 41, 42, 43, 44, 45, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 67, 68, 70, 72, 73, 74, 75, 78, 81, 83, 88, 89, 90, 91, 92, 97, 102, 103, 105, 107], "genericmodelfinalinfer": [29, 30, 81], "genericmodelfinalinferencediscret": [31, 81], "genericsingletreatmentmodelfinalinfer": [8, 40, 42, 81], "geq": [78, 83], "get": [0, 1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 21, 22, 23, 24, 26, 32, 33, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 62, 63, 65, 66, 67, 68, 69, 70, 71, 74, 75, 81, 83, 86, 88, 89, 92, 98, 103, 106], "get_alpha": 23, "get_cate_pr": [78, 81], "get_cv_split": [78, 81], "get_cv_splitt": [78, 81], "get_depth": [24, 59, 81], "get_feature_nam": [4, 5, 6, 7, 8, 9, 12, 13, 14, 15, 37, 38, 39, 40, 41, 42, 43, 44, 45, 55], "get_feature_names_or_default": [75, 81], "get_input_column": [75, 81], "get_metadata_rout": [17, 18, 21, 22, 23, 24, 58, 59, 62, 63, 65, 66, 67, 68, 70, 71, 81], "get_n_leav": [24, 59, 81], "get_n_split": [72, 73, 81], "get_param": [17, 18, 21, 22, 23, 24, 58, 59, 62, 63, 65, 66, 67, 68, 69, 70, 71, 81], "get_pointj": 23, "get_scoring_nam": [4, 5, 6, 7, 8, 9, 10], "get_subsample_ind": [17, 18, 22, 23, 58, 81], "get_train_test_split_ind": [24, 59, 81], "gil": 24, "git": 97, "give": [17, 18, 22, 23, 27, 29, 30, 40, 41, 42, 43, 44, 45, 58, 81, 88, 89, 90, 98, 106], "given": [0, 1, 4, 5, 6, 7, 9, 12, 13, 14, 15, 17, 18, 21, 22, 23, 24, 48, 54, 58, 59, 61, 62, 63, 65, 66, 67, 68, 70, 75, 78, 83, 86, 88, 89, 92, 99, 101, 107], "global": [53, 74, 91, 101], "global_causal_effect": [74, 81], "global_effect": 74, "global_res_cv": 53, "global_residu": 53, "glossari": [13, 41, 56, 58, 62, 63, 67, 68, 70], "go": [18, 23, 24, 83, 88, 89, 97], "goal": [88, 89, 90, 92, 94, 103], "goe": [17, 18, 22, 23, 24, 58, 59, 93], "goldman": 105, "gone": [88, 89, 90, 93], "good": [1, 81, 86, 88, 89, 91, 99, 106, 107], "gotten": 98, "govern": 83, "gp": 105, "grad_tau": [0, 1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55, 60, 83], "gradient": [54, 83, 88, 89, 100, 102], "gradientboostingclassifi": 89, "gradientboostingregressor": [88, 89], "gram": [62, 63, 67, 68, 70], "graph": [0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55], "graphviz": [2, 3, 56, 57, 59], "greater": [2, 3, 4, 13, 17, 18, 22, 24, 41, 53, 54, 56, 57, 58, 59, 88, 89], "greatli": 101, "greg": 105, "grf": 81, "grftree": [17, 18, 22, 81], "grftree1": 24, "grid": [4, 71, 88, 89], "gridsearchcv": [71, 88, 89], "gridsearchcvlist": 81, "ground": 64, "group": [1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 37, 38, 39, 40, 41, 42, 43, 44, 45, 54, 55, 56, 57, 58, 59, 61, 72, 73, 75, 77, 78, 79, 81, 86, 90, 92, 99, 101, 103], "groupkfold": 55, "grow": [2, 91], "guarante": [4, 5, 6, 7, 8, 9, 10, 22, 37, 38, 39, 40, 41, 42, 43, 44, 45, 55, 87, 89, 91, 107], "guid": [17, 18, 21, 22, 23, 24, 58, 59, 62, 63, 65, 66, 67, 68, 70, 71, 81, 88, 89, 90, 91, 92], "guidanc": 99, "h": [1, 12, 56, 57, 83, 105], "h1": 66, "h2": 66, "h3": 66, "h_x": 91, "ha": [0, 1, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 17, 18, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 55, 56, 57, 58, 59, 62, 63, 65, 67, 68, 70, 74, 75, 83, 85, 88, 89, 91, 92, 97, 101], "had": [74, 87, 88, 89, 90, 91, 93, 96, 103], "haifa": 105, "half": [13, 22, 24, 41, 56, 57, 58, 59, 91], "handl": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 37, 38, 39, 40, 41, 42, 43, 44, 45, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 62, 67, 75, 86, 88, 89, 91, 99], "hansen": [39, 105], "happen": [4, 17, 18, 22, 23, 97, 104], "hard": [89, 97, 101], "hartford": 105, "hartford2017": [96, 103, 105], "harvard": 105, "hasn": 97, "hat": [1, 5, 10, 12, 14, 15, 78, 88, 89, 91, 92, 94, 98], "have": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 21, 22, 23, 24, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 53, 55, 56, 57, 58, 59, 62, 65, 66, 67, 68, 70, 71, 74, 75, 78, 81, 83, 84, 88, 89, 90, 91, 93, 96, 98, 99, 101, 103, 106, 107], "hc0": [34, 35, 65], "hc1": [14, 34, 35, 65, 100], "hco": 65, "health": [99, 104], "heart": 97, "heavi": [53, 54], "heavili": [88, 89], "hei": 105, "help": [24, 59, 84, 97, 99, 101, 107], "helper": [54, 69, 75], "helvetica": [2, 3, 56, 57, 59], "henc": [4, 17, 18, 83, 88, 89, 91, 92, 99], "here": [11, 84, 91, 92, 98, 107], "hermit": [47, 94], "hermitefeatur": 81, "hernan": 105, "hernan2010": [95, 105], "hern\u00e1n": 105, "het": [4, 17, 18, 24], "hetero_marginal_t": 83, "hetero_marginal_te_interv": 83, "hetero_t": 83, "hetero_te_interv": 83, "heterogen": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 22, 23, 24, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 74, 75, 78, 81, 83, 86, 87, 88, 89, 90, 91, 93, 95, 96, 99, 101, 104, 105, 106], "heterogeneity_ind": 74, "heterogeneity_model": [74, 81], "heteroskedast": 14, "hierarch": 22, "hierarchi": [81, 87, 95, 96, 106], "high": [4, 9, 17, 18, 22, 53, 54, 75, 84, 86, 88, 89, 90, 91, 93, 100, 105], "higher": [4, 5, 6, 7, 9, 12, 13, 14, 15, 17, 18, 22, 23, 24, 56, 57, 58, 59, 62, 63, 67, 68, 70, 88, 89], "highest": 58, "highli": 104, "hilbert": 88, "hinder": 24, "hint": 61, "histor": [88, 89, 90, 93], "hold": [0, 4, 5, 6, 7, 9, 12, 14, 15, 17, 18, 24, 33, 37, 39, 43, 44, 45, 55, 88, 89, 99, 100], "holidai": 97, "honest": [4, 13, 17, 18, 22, 23, 24, 41, 56, 57, 58, 59, 81, 86, 89, 91, 99, 106], "honest_": [24, 59, 81], "honesti": [4, 17, 18, 22, 24, 59], "horizont": [75, 94], "hot": [1, 5, 12, 13, 14, 15, 53, 54, 56, 57, 74, 75, 88], "hour": 85, "hous": 103, "how": [0, 1, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 65, 66, 67, 68, 70, 71, 74, 75, 81, 86, 88, 89, 91, 92, 99, 101, 106], "howev": [4, 17, 18, 24, 65, 83, 86, 88, 89, 91, 92, 93, 96, 99, 101, 107], "hsph": 105, "hstack": [10, 75, 81, 89], "html": [4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 40, 41, 42, 43, 44, 45, 75, 105], "http": [1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 17, 18, 19, 24, 39, 40, 41, 42, 43, 44, 45, 61, 62, 63, 78, 105], "huber": 66, "hyper": [88, 89], "hyperparamet": [4, 71, 88, 89, 102], "hypothesi": [0, 4, 5, 6, 7, 9, 12, 13, 14, 15, 26, 32, 33, 39, 43, 44, 45, 55, 89, 91, 93, 107], "hypothet": 83, "i": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 78, 81, 83, 85, 86, 87, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 106, 107], "i_": 83, "icml": 105, "id": [56, 88], "idea": [10, 22, 85, 88, 89, 91, 92], "ideal": [4, 17, 18, 24], "ident": [4, 17, 18, 22, 24, 59, 74, 75], "identif": [4, 11, 17, 18, 24, 91], "identifi": [4, 17, 18, 81, 86, 91, 99, 106], "identityfeatur": [75, 81], "iff": 75, "ignor": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 21, 22, 23, 24, 37, 38, 39, 40, 41, 42, 43, 44, 45, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 62, 63, 65, 67, 68, 70, 72, 73, 91], "ij": [5, 58, 59, 62, 67, 68, 70, 88], "ijk": 88, "ilia": 105, "ill": 88, "illustr": 91, "imbalanc": [3, 4, 13, 17, 18, 22, 24, 41, 56, 57, 58, 59], "immens": 101, "impact": 104, "imperfect": [99, 103], "implaus": 97, "implement": [0, 1, 5, 7, 8, 10, 22, 29, 30, 31, 37, 38, 39, 42, 44, 49, 50, 51, 52, 53, 54, 61, 62, 63, 68, 70, 71, 74, 78, 88, 89, 90, 91, 92, 93, 100, 102, 103, 107], "impli": 3, "implicit": 91, "implicitli": 89, "import": [1, 4, 5, 6, 7, 8, 9, 10, 12, 14, 15, 17, 18, 22, 23, 24, 37, 38, 39, 40, 41, 42, 43, 44, 45, 49, 50, 51, 52, 55, 56, 57, 58, 59, 62, 67, 68, 70, 74, 75, 83, 88, 89, 90, 91, 93, 97, 98, 100, 101], "importantli": 83, "importerror": 75, "impos": [4, 17, 18, 24, 53, 54, 86, 88, 99, 104], "imposs": [99, 107], "impract": 98, "imprecis": 97, "improv": [4, 17, 18, 22, 24, 59, 74, 91, 104], "impur": [2, 3, 4, 13, 17, 18, 19, 22, 24, 41, 56, 57, 58, 59, 74], "incent": 103, "includ": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 26, 32, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 62, 67, 74, 75, 78, 86, 88, 89, 94, 97, 99, 103, 104, 107], "include_bia": [46, 88, 89], "include_model_uncertainti": [2, 3, 74, 101], "incomplet": 1, "incorpor": [64, 75, 78, 81, 91, 104, 106], "increas": [74, 88, 89, 97, 98], "increment": 63, "ind": 101, "independ": [1, 5, 7, 8, 10, 12, 14, 37, 38, 39, 40, 42, 43, 44, 62, 63, 64, 65, 67, 83, 88, 89], "index": [1, 4, 11, 17, 18, 22, 23, 24, 56, 57, 58, 59, 64, 74, 75, 81], "indic": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 17, 18, 22, 23, 24, 37, 38, 39, 40, 41, 42, 43, 44, 45, 55, 56, 57, 58, 59, 61, 64, 66, 68, 70, 72, 73, 74, 75, 78, 88, 89, 94, 99], "indirect": 93, "individu": [1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 37, 38, 39, 40, 41, 42, 43, 44, 45, 61, 62, 63, 65, 67, 68, 70, 74, 75, 94, 98, 103, 104], "individualized_polici": [74, 81], "induc": [2, 3, 4, 13, 17, 18, 19, 22, 23, 24, 41, 56, 57, 58, 59], "inf": 75, "inf_typ": [26, 32], "infer": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 22, 23, 24, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 65, 74, 78, 81, 83, 88, 89, 103, 104, 105, 106], "inferenceresult": [0, 1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 26, 32, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55], "infin": 24, "infinit": 75, "influenc": [62, 63, 67, 68, 70], "info": 24, "inform": [0, 2, 3, 4, 5, 6, 7, 9, 17, 18, 21, 22, 23, 24, 33, 39, 43, 44, 45, 55, 58, 59, 62, 63, 65, 66, 67, 68, 70, 71, 74, 86, 88, 89, 99], "inher": 107, "inherit": [0, 89], "init": [5, 24, 81], "initi": [1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 24, 37, 38, 39, 40, 41, 42, 43, 44, 45, 55, 56, 57, 61, 62, 63, 64, 67, 68, 70, 78, 98], "inner": [17, 18, 22, 23], "input": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 22, 23, 24, 32, 33, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 67, 68, 70, 74, 75, 78, 88, 89, 90, 91, 92, 93], "insid": [17, 18, 21, 22, 23, 24, 58, 59, 62, 63, 65, 67, 68, 70, 88, 89], "insignific": [4, 5, 6, 7, 9, 12, 13, 14, 15], "inspect": [1, 2, 3, 4, 13, 17, 18, 22, 24, 41, 56, 57, 58, 59, 88, 89, 107], "instal": [4, 5, 6, 7, 8, 9, 12, 13, 14, 15, 40, 41, 42, 43, 44, 45], "instanc": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 32, 33, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 83, 88, 89, 90, 91, 93, 98, 100, 101, 103], "instanti": 1, "instead": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 62, 63, 65, 67, 68, 70, 74, 88, 89, 91, 98, 101], "instrument": [0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 18, 23, 24, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 81, 83, 86, 99, 103, 105, 106], "instrument_nam": 11, "int": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 22, 23, 24, 25, 26, 32, 33, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 70, 72, 73, 74, 75, 78, 79], "int_": 83, "int_0": 78, "integ": [1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 17, 18, 22, 24, 37, 38, 39, 40, 41, 42, 43, 44, 45, 54, 55, 56, 57, 59, 61, 68, 70, 74, 78, 79], "integer_lik": 75, "integr": [78, 81, 101], "intend": [99, 102], "intens": [53, 86, 99], "intent": [42, 44, 93], "intenttotreatdriv": [44, 81, 86, 93], "interact": [46, 86, 99], "interaction_onli": [46, 88], "intercept": [0, 4, 5, 6, 7, 9, 14, 15, 17, 18, 26, 32, 37, 39, 43, 44, 45, 53, 54, 55, 62, 63, 64, 65, 66, 67, 68, 70, 75], "intercept_": [0, 5, 6, 7, 9, 12, 14, 15, 37, 39, 43, 44, 45, 55, 62, 63, 64, 65, 66, 67, 81], "intercept__infer": [0, 5, 6, 7, 9, 14, 15, 39, 43, 44, 45, 55, 81], "intercept__interv": [0, 5, 6, 7, 9, 14, 15, 31, 39, 43, 44, 45, 55, 62, 63, 65, 66, 81], "intercept_low": [62, 63], "intercept_stderr_": [62, 63, 65, 66, 81], "intercept_upp": [62, 63], "interest": [24, 54, 83, 93, 99, 101, 103], "interfac": [0, 1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55, 71, 88], "interfacebuilt": 104, "interior": 98, "intern": [1, 2, 3, 4, 5, 12, 13, 17, 18, 22, 23, 24, 41, 56, 57, 58, 59, 60, 62, 63, 67, 68, 70, 88, 91, 102, 105], "interp1d": [68, 70], "interpol": [68, 70], "interpret": [2, 3, 4, 5, 6, 7, 9, 12, 13, 14, 15, 78, 81, 97, 103, 104, 105, 106], "intersect": 103, "interv": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 21, 22, 23, 25, 26, 32, 33, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55, 62, 63, 65, 66, 74, 78, 81, 83, 86, 88, 89, 91, 92, 93, 99, 100, 103, 106], "interval_typ": [4, 5, 6, 7, 9, 12, 13, 14, 15], "intervent": [88, 89, 90, 93, 101, 103], "introduc": [46, 47, 61, 75, 81, 92, 97, 99, 106], "introduct": [81, 106], "intrp": 101, "invalid": [88, 99], "invers": [9, 15, 45, 62, 63, 89], "inverse_onehot": [75, 81], "invest": [81, 106], "investig": 101, "invit": 85, "invok": [14, 62, 63, 101], "involv": [91, 98], "io": [4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 40, 41, 42, 43, 44, 45], "ip": 89, "irrespect": 83, "is_select": [1, 10], "iscoo": [75, 81], "isinst": 24, "isol": 97, "israel": 105, "isspars": [75, 81], "issu": 98, "item": [23, 58], "iter": [1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 26, 32, 33, 37, 38, 39, 40, 41, 42, 43, 44, 45, 53, 55, 56, 57, 61, 62, 63, 66, 67, 68, 70, 72, 73, 74, 98], "its": [1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 17, 18, 22, 23, 24, 37, 38, 39, 40, 41, 42, 43, 44, 45, 55, 56, 57, 58, 61, 71, 74, 75, 78, 100, 102], "itself": [36, 99], "iv": [18, 22, 24, 81, 93, 96, 105], "j": [4, 5, 17, 18, 19, 22, 23, 24, 88, 105], "jac": [17, 18, 22, 23, 24], "jacify_featur": [75, 81], "jacobian": [4, 17, 18, 22, 23, 24, 75, 83], "jaggi": 105, "jaggi2010": [88, 105], "jame": [39, 105], "jasjeet": 105, "jason": 105, "job": [4, 9, 13, 15, 17, 18, 22, 25, 36, 41, 45, 53, 54, 56, 58, 62, 63], "joblib": [4, 9, 13, 15, 17, 18, 22, 25, 36, 41, 45, 53, 54, 56, 58, 68, 70, 74], "join": [75, 85, 99, 103], "joint": [47, 83, 86], "jointli": 103, "journal": [1, 10, 22, 78, 105], "juli": [4, 17, 18, 19, 24, 105], "june": 105, "jupyt": [88, 89, 91, 92, 93, 103], "just": [1, 14, 17, 18, 22, 24, 58, 62, 63, 64, 67, 75, 88, 89, 91, 104], "k": [1, 4, 17, 18, 19, 22, 23, 24, 68, 70, 72, 73, 74, 78, 88, 91, 92, 94, 98, 105], "k_x": 91, "kallu": 105, "kappa": 88, "keep": [24, 62, 63, 67, 68, 70, 74, 98], "keep_all_level": 74, "keepdim": 88, "kei": [0, 1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 37, 38, 39, 40, 41, 42, 43, 44, 45, 49, 50, 51, 52, 53, 54, 55, 71, 75, 101, 103], "kept": [1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 37, 38, 39, 40, 41, 42, 43, 44, 45, 55, 56, 57, 61, 78], "kernel": [17, 18, 22, 23, 53, 54, 62, 63, 67, 68, 70, 88, 91], "kerneldml": [81, 88], "kevin": 105, "keyword": [1, 8, 11, 36, 62, 67, 68, 70, 75, 102], "kfold": [1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 37, 38, 39, 40, 41, 42, 43, 44, 45, 56, 57, 61, 72, 74], "kind": [86, 99], "knew": 89, "know": [24, 58, 59, 62, 67, 81, 86, 89, 99, 103, 106], "known": [64, 86, 88, 99, 102], "kroneck": 88, "kunzel": 52, "kunzel2017": [92, 103, 105], "kw": [40, 41, 42, 43, 44, 45], "kwarg": [0, 1, 11, 16, 23, 25, 27, 28, 29, 30, 31, 34, 35, 58, 62, 67, 68, 69, 70, 75], "k\u00fcnzel": 105, "l": 105, "l1": [9, 15, 45, 54, 62, 63, 67, 102], "l1_ratio": [62, 67, 70], "l2": [62, 67, 102], "label": [5, 12, 19, 21, 24, 38, 56, 57, 65, 66, 74, 75, 76, 77, 80, 88, 91], "lambda": [11, 15, 64, 88, 89, 91], "lambda_reg": [53, 54], "langford": 105, "langl": [14, 15, 83, 88, 91], "languag": 89, "lar": [68, 70], "larg": [4, 17, 18, 24, 86, 88, 98, 99, 103], "larger": [17, 18, 22, 23, 24, 52, 56, 57, 58, 59, 75, 88, 89, 101, 103], "largest": 59, "lars_path": [68, 70], "lasso": [0, 1, 9, 15, 45, 62, 63, 67, 68, 70, 81, 88, 89, 103, 106], "lasso_path": [68, 70], "lassocv": [12, 53, 54, 68, 70, 74, 88, 89, 91, 102], "lassolar": [68, 70], "lassolarscv": [68, 70], "last": [9, 47, 64, 75, 88, 90, 93], "latent": [88, 91], "latest": [4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 40, 41, 42, 43, 44, 45, 104], "latex": 75, "latter": [17, 18, 21, 22, 23, 24, 58, 59, 62, 65, 66, 67, 68, 70, 71, 83, 88, 89, 90, 91], "lb": [0, 4, 5, 6, 7, 9, 12, 13, 14, 15, 17, 18, 22, 23, 39, 43, 44, 45, 55, 88, 89, 100], "lb_coef": 88, "lb_effect": 88, "lbfg": 1, "ldot": [88, 89, 91], "lead": [4, 17, 18, 22, 24, 62, 63, 67, 68, 70, 88, 89, 91, 101, 103, 107], "leaf": [2, 3, 4, 13, 17, 18, 22, 23, 24, 41, 53, 54, 56, 57, 58, 59, 74, 91, 101], "learn": [1, 2, 3, 5, 8, 10, 12, 16, 22, 37, 39, 53, 54, 56, 57, 59, 71, 72, 73, 74, 78, 81, 83, 85, 87, 93, 95, 99, 100, 101, 104, 105, 106], "learner": [1, 10, 56, 57, 81, 87, 88, 89, 103, 105, 106], "least": [2, 3, 4, 13, 17, 18, 22, 24, 41, 56, 57, 58, 59, 62, 63, 67, 68, 70, 72, 73, 74, 75, 78, 88, 89, 94, 100], "leav": [2, 3, 4, 13, 14, 15, 17, 18, 22, 24, 41, 43, 45, 56, 57, 58, 59, 100, 101], "leaves_parallel": [2, 3, 56, 57, 59], "lee": 105, "left": [2, 3, 4, 5, 10, 12, 13, 14, 15, 17, 18, 19, 22, 24, 41, 56, 57, 58, 59, 75, 83, 88, 89, 91, 92, 94, 98], "left_impur": [2, 3, 4, 13, 17, 18, 22, 24, 41, 56, 57, 58, 59], "left_weight": [4, 17, 18, 22, 23, 24], "legend": 91, "lei": 105, "len": [60, 74, 75], "length": [0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 61, 62, 64, 67, 68, 70, 75, 78], "less": [2, 3, 4, 13, 17, 18, 22, 24, 26, 32, 33, 41, 53, 56, 57, 58, 59, 78, 86], "lester": 105, "let": [1, 12, 62, 63, 64, 67, 68, 70, 83, 89, 91], "level": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 22, 23, 25, 26, 32, 33, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55, 62, 63, 65, 66, 74, 75, 77, 79, 80, 83, 84, 85, 101, 107], "leverag": 103, "lewi": 105, "lewis2021": [90, 105], "lexicograph": [4, 5, 12, 54, 56, 57], "leyton": 105, "li": 105, "librari": [53, 54, 81, 83, 88, 89, 90, 91, 93, 101, 102, 103, 106, 107], "lift": [78, 83], "lightn": 88, "like": [0, 4, 5, 6, 7, 9, 14, 15, 26, 32, 33, 39, 43, 44, 45, 46, 47, 55, 62, 63, 67, 68, 70, 75, 85, 88, 89, 91, 97, 98, 99, 103, 104], "likelihood": 103, "likewis": 74, "limit": [89, 103, 105], "linalg": 88, "line": [75, 86, 91, 97], "line2d": 91, "linear": [0, 3, 4, 5, 6, 7, 8, 9, 12, 13, 14, 15, 17, 18, 19, 23, 24, 30, 31, 32, 33, 37, 38, 39, 40, 41, 42, 43, 44, 45, 53, 54, 55, 56, 57, 62, 64, 65, 66, 67, 68, 70, 74, 75, 78, 81, 86, 88, 89, 91, 94, 97, 98, 99, 100, 101, 102, 105, 106, 107], "linear_first_stag": [5, 7, 9, 55], "linear_model": [1, 5, 10, 12, 38, 49, 51, 52, 53, 54, 81, 88, 89, 91, 100], "linearcateestim": [0, 1, 2, 3, 16, 49, 50, 51, 52, 81, 83, 88, 90, 91, 92], "lineardml": [5, 16, 34, 81, 86, 88, 98, 100, 101], "lineardriv": [16, 40, 81, 86, 93, 98], "lineardrlearn": [16, 81, 86, 89, 98, 100], "linearintenttotreatdriv": [81, 86, 93, 98], "linearli": [83, 88], "linearmodelfinalcateestimatordiscretemixin": [0, 81], "linearmodelfinalcateestimatormixin": [0, 5, 39, 55, 81, 88, 90, 92, 93], "linearmodelfinalinfer": [5, 6, 9, 34, 39, 55, 81], "linearmodelfinalinferencediscret": [35, 81], "linearmodelinferencediscret": [15, 45], "linearmomentgrfcriterion": [20, 24, 81], "linearmomentgrfcriterionms": 81, "linearregress": [1, 10, 49, 51, 52, 62, 63, 67, 88, 89, 91, 100], "link": [88, 89, 90, 91, 92, 93, 103], "linspac": [78, 91], "lipschitz": [88, 91], "list": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 22, 23, 26, 32, 33, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 67, 68, 70, 71, 74, 75, 76, 77, 78, 80, 88, 89, 98, 102], "liter": 74, "literatur": [88, 89, 91, 103, 104], "littl": [4, 13, 17, 18, 22, 41, 81, 88, 89, 106], "load": 98, "local": [4, 17, 18, 19, 22, 23, 24, 53, 54, 74, 83, 91, 98, 101, 105], "local_causal_effect": [74, 81], "log": [10, 88], "log2": [2, 3, 4, 13, 17, 18, 22, 24, 41, 56, 57, 58, 59], "log_loss": 1, "logarithm": 88, "logfeatur": 88, "logic": [1, 25, 27, 28, 29, 30, 31, 34, 35, 83], "logist": 91, "logisticregress": [1, 49, 52, 54, 91], "logisticregressioncv": [74, 88, 89], "loki": [53, 54], "long": [22, 88, 89, 98, 105], "longer": [4, 5, 6, 7, 9, 12, 13, 14, 15], "look": [2, 3, 4, 13, 17, 18, 22, 24, 41, 56, 57, 58, 59, 88, 89, 91, 98, 103], "loop": [62, 63, 67, 68, 70, 98], "lose": [53, 103], "loss": [1, 5, 8, 10, 15, 18, 37, 38, 61, 64, 88, 89, 91, 93], "lot": 1, "lotteri": [86, 99], "low": [7, 14, 18, 40, 41, 42, 43, 44, 45, 88, 89, 91], "lower": [0, 1, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 22, 23, 26, 32, 33, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55, 62, 63, 65, 66, 83, 88, 89, 91, 103], "lowest": 78, "loyalti": 99, "lundberg": 105, "lundberg2017": [101, 105], "lvert": [15, 64], "m": [0, 1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 22, 23, 24, 26, 32, 33, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55, 59, 60, 64, 75, 81, 83, 90, 92, 105, 106], "m_": 64, "m_0": 92, "m_1": 92, "m_2": 92, "m_3": 92, "m_4": 92, "m_tree": [17, 18, 22, 23], "machin": [1, 10, 22, 37, 39, 78, 81, 83, 85, 87, 89, 93, 95, 98, 99, 101, 104, 105, 106], "machineri": 10, "mackei": 105, "mackey2017": [88, 89, 103, 105], "made": [75, 97], "mae": 22, "mai": [0, 2, 3, 4, 11, 13, 17, 18, 22, 24, 41, 56, 57, 58, 59, 62, 63, 67, 68, 70, 74, 75, 83, 84, 86, 88, 94, 97, 98, 99, 102, 107], "main": [88, 89, 91], "maintain": [88, 89], "major": [2, 3, 4, 56, 57, 59], "make": [4, 5, 6, 7, 9, 12, 13, 14, 15, 17, 18, 22, 23, 55, 64, 81, 83, 88, 89, 90, 91, 102, 103, 104, 106, 107], "make_regress": [22, 62, 67], "maker": 104, "mani": [0, 1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 22, 23, 25, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 49, 50, 51, 52, 53, 54, 55, 60, 62, 63, 74, 75, 83, 86, 88, 89, 90, 91, 97, 98, 99, 102, 103, 107], "manner": [1, 4, 5, 10, 12, 17, 18, 22, 37, 55, 61, 88, 89, 91, 92], "map": [5, 17, 18, 21, 22, 23, 24, 58, 59, 62, 65, 66, 67, 68, 70, 71, 77, 80, 88], "marek": 105, "margin": [0, 1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55, 60, 74, 83, 88, 89], "marginal_": [0, 1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55, 81], "marginal_ate_infer": [0, 1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55, 81], "marginal_ate_interv": [0, 1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55, 81], "marginal_effect": [0, 1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55, 60, 75, 81, 83, 88], "marginal_effect_infer": [0, 1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55, 81], "marginal_effect_interv": [0, 1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55, 81, 83], "marign": 51, "market": 78, "markov": 90, "martin": 105, "match": [75, 92, 97], "mathbb": [1, 78, 94], "mathcal": [78, 98], "mathrm": 78, "mathtt": [5, 88], "matmul": 1, "matplotlib": [2, 3, 56, 57, 59, 74, 77, 79, 80, 91, 101], "matric": [1, 75, 98], "matrix": [0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 22, 23, 24, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67, 68, 70, 75, 78, 83, 88], "matt": 105, "matter": [0, 89], "max": 61, "max_": 91, "max_depth": [2, 3, 4, 13, 17, 18, 22, 23, 24, 41, 53, 54, 56, 57, 58, 59, 74, 88, 89, 91, 101], "max_featur": [2, 3, 4, 13, 17, 18, 22, 23, 24, 41, 56, 57, 58, 59, 74, 88], "max_features_": [24, 59, 81], "max_it": [9, 15, 45, 62, 63, 67, 68, 70], "max_leaf": 22, "max_leaf_nod": 2, "max_sampl": [4, 13, 17, 18, 22, 23, 41, 56, 58], "maxim": [4, 17, 18, 24, 56, 57, 58, 59, 91, 101], "maximum": [2, 3, 4, 9, 13, 15, 17, 18, 22, 24, 25, 36, 41, 45, 53, 54, 56, 57, 58, 59, 62, 63, 66, 67, 68, 70, 74], "maxit": 66, "mc_agg": [1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 37, 38, 39, 40, 41, 42, 43, 44, 45, 55, 56, 57, 61], "mc_iter": [1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 37, 38, 39, 40, 41, 42, 43, 44, 45, 55, 56, 57, 61, 74], "mdl": [10, 88, 89], "meain": 3, "mean": [0, 1, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 17, 18, 22, 23, 24, 26, 32, 33, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 50, 51, 53, 54, 55, 56, 57, 58, 61, 62, 63, 65, 66, 67, 68, 70, 74, 78, 83, 88, 89, 91, 92], "mean_absolute_error": 1, "mean_point": [33, 81], "mean_pred_stderr": [32, 33], "mean_squared_error": 1, "meaning": 89, "measur": [4, 17, 18, 24, 78, 83, 88, 89, 97, 99, 103], "mechan": [17, 18, 21, 22, 23, 24, 58, 59, 62, 63, 65, 66, 67, 68, 70, 71, 78], "media": 103, "median": [1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 37, 38, 39, 40, 41, 42, 43, 44, 45, 55, 56, 57, 61, 88], "medic": [99, 103], "member": [55, 103], "membership": [78, 103], "memeb": 75, "memori": [7, 14, 44, 62, 65, 67, 68, 70, 98], "men": 97, "mention": [88, 90, 93], "merg": [24, 75], "mert": 39, "messag": [5, 75], "meta": [17, 18, 21, 22, 23, 24, 49, 52, 58, 59, 62, 63, 65, 67, 68, 70, 81, 87, 88, 89, 103, 105, 106], "metadata": [0, 1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 21, 22, 23, 24, 37, 38, 39, 40, 41, 42, 43, 44, 45, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 62, 63, 65, 66, 67, 68, 70, 71], "metadata_rout": [17, 18, 21, 22, 23, 24, 58, 59, 62, 63, 65, 67, 68, 70], "metadatarequest": [17, 18, 21, 22, 23, 24, 58, 59, 62, 65, 66, 67, 71], "metadatarout": [63, 68, 70], "metalearn": [75, 81, 86, 92, 97, 99], "metatdata": [0, 1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 37, 38, 39, 40, 41, 42, 43, 44, 45, 49, 50, 51, 52, 53, 54, 55], "metelearn": 92, "method": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 88, 89, 90, 91, 92, 93, 97, 101, 102, 103, 104, 106, 107], "method_nam": 11, "methodologi": [81, 87, 90, 93, 101, 106], "metric": [0, 4, 5, 6, 7, 9, 14, 15, 26, 32, 33, 39, 43, 44, 45, 55, 78, 80, 88, 91, 97], "michael": 61, "microsoft": [103, 104], "mid": [88, 91, 92], "might": [23, 75, 83, 86, 88, 89, 99], "miguel": 105, "mimic": [65, 66], "min_": [5, 10, 14, 15, 61, 88], "min_balancedness_tol": [3, 4, 13, 17, 18, 22, 23, 24, 41, 56, 57, 58, 59], "min_impurity_decreas": [2, 3, 4, 13, 17, 18, 22, 23, 24, 41, 56, 57, 58, 59, 74, 101], "min_leaf_s": [53, 54, 100], "min_propens": [12, 13, 14, 15, 56, 57], "min_samples_leaf": [2, 3, 4, 8, 12, 13, 17, 18, 22, 23, 24, 41, 56, 57, 58, 59, 74, 89, 100, 101], "min_samples_split": [2, 3, 4, 13, 17, 18, 22, 23, 24, 41, 56, 57, 58, 59], "min_value_increas": 74, "min_var_fraction_leaf": [4, 17, 18, 23], "min_var_leaf": [4, 17, 18, 24], "min_var_leaf_on_v": [4, 17, 18, 23, 24], "min_weight_fraction_leaf": [2, 3, 4, 13, 17, 18, 22, 23, 24, 41, 56, 57, 58, 59], "mind": 85, "minim": [1, 4, 5, 8, 10, 17, 18, 24, 37, 40, 41, 42, 43, 44, 45, 64, 88, 89, 91, 93, 97], "minimum": [2, 3, 4, 12, 13, 14, 15, 17, 18, 22, 24, 41, 53, 54, 56, 57, 58, 59, 74, 78, 107], "minut": [86, 99], "miss": [1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 37, 38, 39, 40, 41, 42, 43, 44, 45, 49, 50, 51, 52, 53, 54, 55, 105], "missing_nodes_as_confound": 11, "missingmodul": [75, 81], "mission": 85, "mistak": 88, "mitig": 107, "mix": [62, 67], "mixin": 0, "ml": [5, 6, 7, 8, 9, 38, 39, 50, 55, 83, 88, 89, 90, 92, 99], "mlr": 105, "model": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 22, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 74, 75, 78, 81, 83, 86, 88, 89, 90, 91, 92, 93, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107], "model1": 98, "model2": 98, "model3": 98, "model_c": [4, 5, 6, 7, 8, 9, 12, 13, 14, 15, 37, 38, 39, 40, 41, 42, 43, 44, 45, 81], "model_clf": 89, "model_effect": [42, 44], "model_fin": [1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 27, 28, 29, 30, 31, 37, 38, 39, 40, 41, 42, 43, 44, 45, 55, 88, 89, 100], "model_final_": 0, "model_i": [1, 4, 5, 6, 7, 8, 9, 10, 53, 54, 55, 61, 88, 91, 100], "model_inst": 75, "model_list": [1, 75], "model_nuis": 1, "model_propens": [12, 13, 14, 15, 56, 57, 78, 89, 100], "model_reg": 89, "model_regress": [12, 13, 14, 15, 56, 57, 78, 89, 100], "model_regressor": [12, 56, 57], "model_select": [1, 10, 22, 81, 88, 89], "model_t": [1, 4, 5, 6, 7, 8, 9, 10, 53, 55, 61, 88, 91, 100], "model_t_fin": 53, "model_t_xw": [37, 38, 39, 40, 41, 43, 45], "model_t_xwz": [37, 38, 39, 40, 41, 42, 43, 44, 45], "model_tz_xw": [40, 41, 43, 45], "model_y_fin": [53, 54], "model_y_xw": [37, 38, 39, 40, 41, 42, 43, 44, 45], "model_z_xw": [39, 40, 41, 43, 45], "modelfin": [1, 10], "modelfirst": 10, "modelnuis": 1, "models_i": [4, 5, 6, 7, 8, 9, 10, 81, 88, 89], "models_nuisance_": [1, 81], "models_prel_model_effect": [40, 41, 42, 43, 44, 45, 81], "models_propens": [12, 13, 14, 15, 81], "models_regress": [12, 13, 14, 15, 81, 89], "models_t": [4, 5, 6, 7, 8, 9, 10, 81, 88, 89], "models_t_xw": [37, 38, 39, 40, 41, 43, 45, 81], "models_t_xwz": [37, 38, 39, 40, 41, 42, 43, 44, 45, 81], "models_tz_xw": [40, 41, 43, 45, 81], "models_y_xw": [37, 38, 39, 40, 41, 42, 43, 44, 45, 81], "models_z_xw": [39, 40, 41, 43, 45, 81], "modelselector": [1, 10, 102], "modif": [89, 91], "modifi": 78, "modul": [1, 75, 81, 88, 89, 90, 91, 92, 93, 98], "moment": [1, 4, 17, 18, 19, 22, 23, 24, 39, 53, 54, 88, 89, 91, 98], "moment_and_mean_gradient_estimator_func": [54, 81], "moment_var": [17, 18, 22, 23], "mono": [12, 62, 67, 68, 70], "mont": [1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 37, 38, 39, 40, 41, 42, 43, 44, 45, 55, 56, 57, 61], "more": [1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 17, 18, 22, 23, 24, 40, 41, 42, 43, 44, 45, 56, 57, 58, 59, 62, 65, 66, 67, 68, 70, 72, 73, 74, 75, 78, 83, 86, 88, 89, 90, 91, 92, 93, 98, 99, 100, 101, 103], "moreov": [22, 88, 89, 91, 92, 99, 101, 107], "most": [46, 56, 57, 58, 74, 83, 86, 88, 91, 99, 102, 103, 104, 107], "motiv": [81, 106], "mse": [4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 17, 18, 22, 23, 24, 37, 38, 39, 40, 41, 42, 43, 44, 45, 55, 91], "msg": 75, "mu": [17, 18, 22, 23, 78, 83, 90, 92], "much": 52, "multi": [2, 3, 5, 12, 56, 57, 59, 62, 63, 67, 68, 70, 74, 75, 81, 86, 88, 89, 91, 106], "multi_class": 54, "multi_output_i": 75, "multi_output_t": 75, "multidimension": 10, "multimodelwrapp": [54, 75, 81], "multinomi": 91, "multioutput": [62, 63, 67, 68, 70], "multioutputdebiasedlasso": [9, 81], "multioutputgrf": 81, "multioutputlasso": 63, "multioutputregressor": [21, 62, 63, 67, 68, 70], "multipl": [21, 64, 65, 70, 75, 78, 86, 88, 89, 90, 92, 97, 99, 100, 101, 103], "multipli": [62, 63, 67, 83, 88], "multitask": [2, 3, 12, 88], "multitask_model_c": [12, 13, 14, 15, 81], "multitask_model_fin": [12, 13, 14, 15], "multitaskelasticnet": [62, 67, 88], "multitaskelasticnetcv": [62, 67], "multitasklassocv": 70, "multitud": 103, "must": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 22, 23, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 71, 72, 73, 75, 78, 94, 98], "mvp": 74, "my": 88, "n": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 22, 24, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 64, 65, 66, 74, 75, 78, 83, 88, 89, 91, 98, 105], "n_alpha": [9, 15, 45, 62, 63, 67, 68, 70], "n_alphas_cov": [9, 15, 45, 62, 63], "n_bootstrap": 78, "n_bootstrap_sampl": [25, 36, 100], "n_cal": 78, "n_categori": [56, 57], "n_coef": [62, 63], "n_control": 83, "n_estim": [4, 12, 13, 17, 18, 22, 23, 41, 56, 58, 88, 89, 100], "n_featur": [2, 3, 4, 13, 17, 18, 22, 23, 24, 41, 46, 47, 56, 57, 58, 59, 62, 63, 64, 67, 68, 70, 72, 73, 74, 75, 83], "n_features_": [24, 81], "n_features_in_": [59, 81], "n_features_new": [46, 47, 75], "n_group": [55, 78], "n_inform": [22, 62, 67], "n_instrument": 83, "n_iter": [62, 67, 68, 70], "n_iter_": [62, 67, 81], "n_job": [4, 9, 13, 15, 17, 18, 22, 23, 25, 36, 41, 45, 53, 54, 56, 58, 62, 63, 68, 70, 71, 74, 88, 89, 100], "n_leav": [24, 59], "n_node": [17, 18, 22, 23, 24, 58, 59], "n_nodes_ptr": [17, 18, 22, 23, 58], "n_outcom": [4, 17, 18, 22, 23, 75], "n_output": [17, 18, 22, 23, 24, 46, 47, 62, 63, 67, 68, 70, 75], "n_output_featur": 46, "n_outputs_": [24, 81], "n_panel": 55, "n_period": 55, "n_relevant_output": [17, 18, 19, 22, 23, 24], "n_relevant_outputs_": [24, 81], "n_row": 74, "n_sampl": [2, 3, 4, 13, 17, 18, 22, 23, 24, 41, 46, 47, 56, 57, 58, 59, 62, 63, 67, 68, 70, 72, 73, 75, 83], "n_samples_": [24, 59, 81], "n_samples_fit": [62, 63, 67, 68, 70], "n_split": [72, 73], "n_t": [0, 2, 3, 4, 5, 6, 7, 9, 12, 13, 14, 15, 17, 18, 22, 24, 37, 39, 41, 43, 44, 45, 55, 56, 57, 58, 59, 75, 89], "n_t_l": [2, 3, 4, 13, 17, 18, 22, 24, 41, 56, 57, 58, 59], "n_t_r": [2, 3, 4, 13, 17, 18, 22, 24, 41, 56, 57, 58, 59], "n_target": [62, 63, 64, 67, 68, 70], "n_train": 78, "n_training_sampl": [17, 18, 22, 23], "n_treat": 78, "n_treatment": [3, 4, 17, 18, 23, 56, 57, 58, 59, 75, 78, 83], "n_tree": [17, 18, 22, 23, 53, 54, 91, 100], "n_trial": [72, 73], "n_val": 78, "n_x": [0, 5, 6, 7, 9, 14, 15, 37, 39, 43, 44, 45, 55], "n_y": [0, 4, 5, 6, 7, 9, 14, 15, 24, 37, 39, 43, 44, 45, 55], "n_y_": [24, 81], "na": 75, "nabla": 83, "nabla_": 83, "name": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 21, 22, 23, 24, 26, 32, 33, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 62, 63, 65, 66, 67, 68, 70, 71, 74, 75, 77, 80, 89], "named_arg": 36, "nan": [1, 71, 75], "narrowli": 97, "natur": [74, 92], "nber": 105, "nd": [1, 5, 7, 8, 10, 12, 14, 37, 38, 39, 40, 42, 43, 44, 65, 66], "ndarrai": [4, 17, 18, 22, 23, 24, 46, 47, 56, 57, 58, 59, 60, 62, 63, 67, 68, 70, 75], "ndim": [62, 67, 68, 70, 75, 81], "necessari": [25, 27, 28, 29, 30, 31, 34, 35, 62, 63, 67, 68, 70, 74, 77, 80, 99], "need": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 37, 38, 39, 40, 41, 42, 43, 44, 45, 49, 50, 51, 52, 53, 54, 55, 60, 71, 74, 75, 88, 89, 91, 98, 104], "neg": [17, 18, 22, 23, 58, 61, 62, 63, 67, 68, 70, 101], "neg_mean_squared_error": [88, 89], "neg_welfar": [58, 59], "neighborhood": [56, 57], "neither": [74, 89], "nekipelov": 105, "neq": [4, 17, 18, 24], "nest": [0, 1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 21, 22, 23, 24, 37, 38, 39, 40, 41, 42, 43, 44, 45, 49, 50, 51, 52, 53, 54, 55, 58, 59, 62, 65, 66, 67, 68, 70, 71, 88, 89], "net": [17, 18, 22, 23, 58, 62, 67, 88, 93, 103], "network": 102, "neural": [88, 93, 102, 103], "new": [1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 22, 37, 38, 39, 40, 41, 42, 43, 44, 45, 55, 58, 74, 75, 84, 85, 92, 103, 104, 105], "new_arg": 75, "newei": [39, 105], "newey2003": [96, 103, 105], "next": [24, 74, 81, 104, 106], "neyman": [10, 88, 89, 93], "nie": [1, 10, 61, 105], "nie2017": [88, 89, 103, 105], "niewager2017": 61, "nigam": 61, "nnet": 102, "node": [2, 3, 4, 11, 13, 17, 18, 19, 22, 23, 24, 41, 56, 57, 58, 59, 74, 91, 101], "node_count": [24, 59], "nois": 83, "noisi": 91, "non": [0, 1, 8, 10, 12, 13, 17, 18, 22, 23, 24, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 56, 57, 58, 59, 60, 74, 81, 86, 87, 88, 89, 90, 91, 99, 100, 101, 103, 106], "none": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 21, 22, 23, 24, 26, 32, 33, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 83, 88, 89, 101], "nonlinear": 107, "nonparamdml": [81, 86, 88, 92, 100], "nonparamdmliv": [40, 41, 42, 43, 44, 45, 81, 86, 93], "nonparametr": [11, 105], "nonrobust": [34, 35, 65], "nonzero": 47, "nop": 47, "nor": [74, 103], "norm": [62, 67, 68, 70, 88, 91, 102, 105], "normal": [1, 4, 5, 6, 7, 8, 9, 10, 12, 14, 15, 17, 18, 22, 23, 24, 25, 32, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 49, 50, 51, 52, 55, 56, 57, 58, 59, 62, 63, 64, 67, 68, 70, 75, 79, 80, 83, 88, 89, 91, 93, 100], "normalinferenceresult": [4, 81], "notat": 83, "note": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 21, 22, 23, 24, 26, 32, 33, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 62, 63, 64, 65, 67, 68, 70, 74, 75, 91, 98, 102, 107], "notebook": [88, 89, 91, 92, 93, 103, 107], "noth": [1, 4, 17, 18, 24, 75], "novel": [99, 103], "now": [68, 70, 74, 83, 91, 94, 98], "np": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 17, 18, 22, 23, 24, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 67, 68, 70, 72, 73, 75, 78, 83, 88, 89, 91], "nu": [37, 38, 39, 40, 41, 42, 43, 44, 45, 91], "nuclear": [88, 105], "nudg": 103, "nuisanc": [1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 17, 18, 23, 24, 37, 38, 39, 40, 41, 42, 43, 44, 45, 54, 55, 56, 57, 61, 74, 78, 81, 88, 89, 91, 92, 98, 102], "nuisance_estim": 54, "nuisance_estimator_gener": [54, 81], "nuisance_model": [53, 54, 55, 74], "nuisance_models_": [74, 81], "nuisance_scores_": [1, 81], "nuisance_scores_i": [10, 81], "nuisance_scores_prel_model_effect": [40, 41, 42, 43, 44, 45, 81], "nuisance_scores_propens": [12, 13, 14, 15, 81], "nuisance_scores_regress": [12, 13, 14, 15, 81], "nuisance_scores_t": [10, 81], "nuisance_scores_t_xw": [37, 38, 39, 40, 41, 43, 45, 81], "nuisance_scores_t_xwz": [37, 38, 39, 40, 41, 42, 43, 44, 45, 81], "nuisance_scores_tz_xw": [40, 41, 43, 45, 81], "nuisance_scores_y_xw": [37, 38, 39, 40, 41, 42, 43, 44, 45, 81], "nuisance_scores_z_xw": [39, 40, 41, 43, 45, 81], "nuissanc": 54, "null": [0, 4, 5, 6, 7, 9, 12, 13, 14, 15, 26, 32, 33, 39, 43, 44, 45, 55, 107], "null_hypothesi": [4, 5, 6, 7, 9, 12, 13, 14, 15], "num": 74, "num_partit": 98, "number": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 17, 18, 22, 24, 25, 26, 32, 33, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 65, 66, 67, 68, 70, 72, 73, 74, 75, 78, 86, 88, 89, 91, 94, 102], "numer": [36, 62, 63, 67, 74, 75], "numpi": [1, 10, 22, 36, 62, 63, 67, 68, 70, 74, 75, 76, 77, 80, 83, 88, 91], "nutrit": 99, "o": 98, "obj": 11, "object": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 21, 22, 23, 24, 26, 32, 33, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 88, 91], "observ": [1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 37, 38, 39, 40, 42, 43, 44, 65, 74, 78, 81, 83, 87, 88, 89, 90, 91, 93, 96, 101, 103, 104, 105, 106, 107], "obtain": [4, 17, 18, 22, 24, 59, 64, 74, 107], "occurr": 1, "off": [92, 97], "offer": [0, 83, 88, 89, 90, 91, 92, 95, 96, 97, 99, 100, 101, 103, 107], "offic": [85, 99], "offset": [26, 32], "often": [58, 62, 63, 67, 68, 70, 97, 98, 99], "ol": [14, 64, 78, 81, 88, 106], "old": 75, "omit": [0, 4, 5, 6, 7, 9, 12, 13, 14, 15, 17, 18, 22, 23, 37, 39, 43, 44, 45, 55, 92, 105], "ommit": 1, "onc": [63, 64, 102], "one": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 17, 18, 22, 24, 40, 41, 42, 43, 44, 45, 49, 51, 52, 53, 54, 56, 57, 58, 59, 62, 63, 64, 65, 74, 75, 78, 83, 86, 88, 89, 90, 91, 92, 99, 100, 101], "one_hot_encod": [75, 81], "onehotencod": [75, 88], "ones": [1, 5, 8, 10, 12, 13, 22, 24, 37, 38, 39, 40, 41, 42, 43, 44, 45, 49, 55, 56, 57, 61, 75, 83, 91], "onli": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 21, 22, 23, 24, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 67, 68, 70, 71, 74, 75, 83, 86, 87, 88, 89, 91, 92, 93, 97, 98, 99, 107], "only_fin": 1, "onto": [72, 73, 86, 89, 94, 98], "oob_pr": [17, 18, 22, 23], "oob_predict": [17, 18, 22, 23, 81], "oob_scor": [88, 89], "oob_score_": [88, 89], "open": [2, 3, 56, 57, 59, 85, 98, 101, 104], "oper": 75, "operand": 75, "oppos": [39, 40, 41, 43, 45, 54, 61, 74, 88, 89, 91, 101], "oprescu": 105, "oprescu19a": 105, "oprescu2019": [89, 91, 103, 105], "opt": 98, "opt_reweight": [40, 41, 42, 43, 44, 45], "optim": [4, 9, 15, 18, 24, 45, 56, 57, 58, 59, 62, 63, 67, 68, 70, 88, 89, 91, 99, 105], "optimist": 3, "optin": 33, "option": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 21, 22, 23, 24, 26, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 70, 72, 73, 74, 75, 78, 83, 88, 89, 97], "oracl": [1, 10, 61, 105], "order": [1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 37, 38, 39, 40, 41, 42, 43, 44, 45, 54, 55, 56, 57, 74, 75, 78, 83, 88, 89, 91, 92], "ordinari": [14, 62, 63, 67, 78, 88, 100], "orf": [81, 91, 100], "org": [1, 4, 10, 17, 18, 19, 24, 39, 61, 62, 63, 78, 105], "organ": [85, 98], "orient": [2, 3, 56, 57, 59], "origin": [0, 1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 17, 18, 21, 22, 23, 24, 37, 38, 39, 40, 42, 43, 44, 45, 55, 58, 59, 62, 63, 65, 67, 68, 70, 75, 83, 88, 97, 100, 107], "ortho_learner_model_final_": [1, 81], "orthoforest": [53, 54, 81, 91, 97, 106], "orthogon": [1, 10, 39, 53, 54, 81, 87, 89, 96, 99, 100, 105, 106], "orthoiv": [81, 86, 93], "ortholearn": 1, "other": [0, 1, 7, 11, 13, 14, 17, 18, 21, 22, 23, 24, 26, 36, 41, 42, 44, 52, 56, 57, 58, 59, 62, 63, 64, 65, 67, 68, 70, 74, 75, 78, 83, 86, 88, 89, 93, 96, 98, 99, 101, 103], "otherwis": [3, 4, 5, 6, 7, 8, 9, 12, 13, 14, 15, 17, 18, 21, 22, 23, 24, 32, 33, 37, 38, 39, 40, 41, 42, 43, 44, 45, 54, 55, 56, 57, 58, 59, 62, 63, 65, 67, 68, 70, 74, 75, 78, 97], "otim": [5, 88, 98], "our": [64, 74, 83, 86, 88, 89, 90, 91, 92, 93, 94, 99, 100, 101, 102], "out": [1, 4, 10, 12, 13, 14, 15, 17, 18, 22, 23, 37, 38, 39, 40, 41, 42, 43, 44, 45, 75, 78, 88, 89, 91, 92, 93, 97, 98, 103], "out_feature_nam": [0, 1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "out_fil": [2, 3, 56, 57, 59], "out_treatment_nam": [0, 1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 37, 38, 39, 40, 41, 42, 43, 44, 45, 49, 50, 51, 52, 53, 54, 55, 56, 57], "outcom": [0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 21, 22, 23, 26, 32, 33, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 65, 66, 74, 75, 78, 83, 86, 87, 88, 89, 90, 91, 92, 93, 96, 97, 99, 101, 103, 107], "outcome_nam": 11, "outer": 98, "outlin": [4, 17, 18, 24], "output": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 22, 23, 24, 26, 32, 33, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 62, 63, 64, 65, 66, 67, 68, 70, 74, 75, 97, 101], "output_nam": [0, 1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 26, 32, 33, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55], "outreach": 103, "outsid": [24, 83, 88, 89], "over": [0, 1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 22, 23, 25, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55, 62, 63, 67, 68, 70, 71, 74, 75, 78, 83, 84, 88, 89, 90, 93, 95, 98, 102], "overal": [0, 1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 26, 32, 33, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55, 62, 63, 78, 83, 89, 91], "overall_model": 50, "overfit": 61, "overhead": [17, 18, 22, 23, 98], "overlap": [40, 41, 42, 43, 44, 45, 89], "overrid": [0, 1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 37, 38, 39, 40, 41, 42, 43, 44, 45, 49, 50, 51, 52, 53, 54, 55], "overriden": [0, 1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55], "overview": [81, 84, 87, 93, 106], "overwrit": 1, "overwritten": [62, 63, 67, 68, 70], "own": [71, 75, 102], "p": [0, 1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 26, 32, 33, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 75, 76, 78, 80, 89, 90, 91, 92, 105, 107], "p_": 91, "p_t": [12, 56, 57, 89], "packag": [0, 11, 65, 66, 81, 88, 89, 91, 92, 96, 97, 101, 102, 103, 104, 106], "page": [2, 3, 56, 57, 59, 78, 81, 105], "pai": 97, "paint": [2, 3, 56, 57, 59], "pair": [4, 17, 18, 24, 101], "pairwis": [4, 17, 18, 24], "panda": [0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 74, 75, 76, 77, 79, 80], "panel": [81, 90, 105, 106], "paper": [19, 88, 105], "parallel": [1, 4, 5, 6, 7, 8, 9, 12, 13, 14, 15, 17, 18, 22, 23, 24, 25, 36, 40, 41, 42, 43, 44, 45, 53, 54, 56, 58, 59, 62, 63, 74, 98], "parallel_backend": [9, 13, 15, 41, 45, 56, 58, 68, 70], "param": [4, 17, 18, 21, 22, 23, 24, 58, 59, 62, 63, 65, 66, 67, 68, 69, 70, 71, 76, 80], "param1": 4, "param2": 4, "param_grid": [71, 88, 89], "param_grid_list": 71, "paramet": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 83, 88, 89, 90, 91, 92, 93, 98, 105], "parameter": 24, "parameter_estim": 54, "parameter_estimator_func": [54, 81], "parametr": [5, 8, 10, 11, 13, 37, 38, 41, 48, 81, 86, 87, 88, 89, 90, 91, 93, 99, 100, 103, 106], "parent": [1, 3, 4, 13, 17, 18, 22, 24, 40, 41, 56, 57, 58, 59, 88], "parent_weight": [4, 17, 18, 22, 23, 24], "pars": 24, "part": [1, 13, 18, 24, 40, 41, 42, 43, 44, 45, 53, 54, 56, 57, 85, 88, 91], "partial": [0, 1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 24, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55, 60, 83], "partial_fit": [63, 81], "partial_fit_param": 63, "partial_i": 83, "particular": [4, 17, 18, 24, 68, 70, 74, 83, 86, 88, 89, 91, 93, 101, 104], "particularli": [88, 92], "partit": [1, 2, 3, 4, 13, 17, 18, 22, 24, 41, 56, 57, 58, 59, 88, 89, 91, 98], "pass": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 21, 22, 23, 24, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 70, 71, 75, 78, 83, 88, 89, 91, 98, 100], "path": [11, 17, 18, 22, 23, 24, 58, 59, 62, 67, 68, 70, 81], "patient": [99, 103], "pd": 75, "pdf": [2, 3, 4, 17, 18, 19, 24, 56, 57, 59, 61], "pearson": [4, 17, 18, 24], "pearsonr": [4, 5, 6, 7, 8, 9, 10], "penal": [15, 54, 64, 86, 91, 99], "penalized_model": [64, 81], "penalti": [15, 53, 54, 62, 63, 64, 67, 88], "peopl": 99, "per": [4, 5, 6, 7, 8, 9, 10, 48, 49, 51, 52, 54, 55, 63, 74, 86, 99], "percentag": [4, 17, 18, 79, 80, 99], "percentil": [25, 36, 78], "percentile_point": [33, 81], "perfect": 99, "perfectli": [3, 4, 13, 17, 18, 22, 24, 41, 56, 57, 58, 59, 97], "perform": [0, 1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 17, 18, 22, 23, 24, 25, 27, 28, 29, 30, 31, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55, 59, 61, 74, 75, 78, 83, 88, 89, 91, 92, 102], "period": [55, 90, 97], "permut": [4, 17, 18, 22, 24, 59, 74, 75], "perp": 89, "person": [101, 103], "perturb": 107, "pessimist": 3, "peter": 105, "phase": 91, "phi": [4, 5, 6, 7, 8, 9, 12, 13, 14, 15, 37, 38, 39, 40, 41, 42, 43, 44, 45, 55, 83, 88, 89], "phi_d": 94, "pi": [56, 57, 78], "pi0_test": 83, "pi1_test": 83, "pi_t": [56, 57], "pick": [74, 86, 88, 89, 99, 101], "pickl": 98, "pipelin": [17, 18, 21, 22, 23, 24, 58, 59, 62, 63, 65, 66, 67, 68, 70, 71, 88], "pivot": [25, 36], "pkl": 98, "place": [0, 4, 5, 6, 7, 9, 12, 13, 14, 15, 26, 32, 33, 37, 39, 43, 44, 45, 55, 60], "placebo": [11, 99], "placebo_treatment_refut": 11, "placehold": 75, "plain": 74, "plan": 103, "pleas": [17, 18, 21, 22, 23, 24, 58, 59, 62, 63, 65, 66, 67, 68, 70, 71], "plethora": 101, "plot": [2, 3, 56, 57, 59, 74, 77, 78, 79, 80, 81, 91, 101], "plot_cal": [77, 79, 81], "plot_data_dict": 77, "plot_heterogeneity_tre": [74, 81], "plot_lasso_lasso_lars_elasticnet_path": [62, 67, 68, 70], "plot_policy_tre": [74, 81], "plot_qini": [79, 81], "plot_toc": [79, 81], "plot_uplift": [80, 81], "plt": 91, "plu": [4, 5, 6, 7, 8, 9, 10], "plug": 64, "plugin": 1, "pnt_coef": 88, "pnt_effect": 88, "point": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 22, 23, 24, 26, 32, 33, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 62, 63, 65, 66, 74, 83, 88, 89, 91, 92, 97, 100, 101, 107], "point_estim": [26, 32, 81], "poisson": 22, "polar": [46, 47, 75], "poli": [88, 102], "polici": [2, 3, 10, 49, 50, 51, 52, 53, 54, 74, 75, 81, 83, 88, 89, 90, 95, 103, 104, 105, 106], "policy_effect": 83, "policy_feature_nam": [56, 57, 81], "policy_model_": [56, 57, 81], "policy_treatment_nam": [56, 57, 81], "policy_value_": [3, 59, 81], "policyforest": 81, "policytre": [3, 81], "polynomi": [46, 88, 89, 94, 102], "polynomialfeatur": [46, 88, 89], "popul": [0, 1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 26, 32, 33, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55, 74, 83, 101], "popular": 101, "population_summari": [26, 32, 81], "populationsummaryresult": [0, 1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 26, 32, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55, 81], "pose": [88, 99], "posit": [1, 3, 4, 13, 17, 18, 22, 24, 36, 41, 56, 57, 58, 59, 60, 62, 67, 68, 70, 78, 88, 89, 98, 101], "possess": 89, "possibl": [1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 17, 18, 21, 22, 23, 24, 37, 38, 39, 40, 41, 42, 43, 44, 45, 55, 56, 57, 58, 59, 61, 62, 63, 65, 66, 67, 68, 70, 71, 74, 86, 89, 91, 99, 101, 107], "possibli": [0, 1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 24, 37, 38, 39, 40, 41, 42, 43, 44, 45, 49, 50, 51, 52, 53, 54, 55, 59], "post": [74, 88, 89], "postiv": 101, "postscript": [2, 3, 56, 57, 59], "potenti": [1, 5, 11, 12, 14, 15, 54, 78, 83, 87, 88, 89, 90, 91, 93, 102], "powel": 105, "power": [46, 53, 65, 88, 104, 105], "pp": 105, "pr": [12, 13, 14, 15, 56, 57, 78, 89, 91], "practic": 98, "practition": 85, "pre": [24, 53, 88, 97], "pre_dispatch": 71, "precis": [2, 3, 56, 57, 59], "precomput": [62, 63, 67, 68, 70], "pred": [26, 32, 33], "pred_dist": 26, "pred_stderr": [32, 33], "pred_tree_averag": [17, 18, 22, 23], "pred_tree_average_ful": [17, 18, 22, 23], "predefin": [26, 32], "predict": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 21, 22, 23, 24, 26, 27, 29, 30, 32, 33, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 74, 75, 77, 78, 79, 81, 83, 88, 89, 91, 93, 97, 101, 102, 104, 105], "predict_alpha_and_jac": [17, 18, 22, 23, 24, 81], "predict_and_var": [17, 18, 22, 23, 81], "predict_ful": [17, 18, 22, 23, 24, 81], "predict_interv": [17, 18, 22, 23, 27, 28, 29, 30, 62, 63, 65, 66, 81], "predict_mo": [24, 81], "predict_moment_and_var": [17, 18, 22, 23, 81], "predict_proba": [1, 5, 49, 52, 53, 54, 56, 57, 58, 59, 78, 81, 88, 91, 102], "predict_project": [17, 18, 22, 23, 81], "predict_projection_and_var": [17, 18, 22, 23, 81], "predict_projection_var": [17, 18, 22, 23, 81], "predict_tree_averag": [17, 18, 22, 23, 81], "predict_tree_average_ful": [17, 18, 22, 23, 81], "predict_valu": [56, 57, 58, 59, 81], "predict_var": [17, 18, 22, 23, 81], "prediction_interv": [65, 66], "prediction_stderr": [17, 18, 22, 23, 27, 62, 63, 65, 66, 81], "predictor": [78, 88, 91, 107], "prefer": [17, 18, 22, 23, 55], "prefit": [25, 27, 28, 29, 30, 31, 34, 35, 81], "prefix": [1, 17, 18, 22, 23, 24, 75], "prel_cate_approach": [40, 41, 42, 43, 44, 45], "prel_cv": [40, 41, 42, 43, 44, 45], "prel_model_effect": [40, 41, 42, 43, 44, 45], "prel_opt_reweight": [40, 41, 42, 43, 44, 45], "prel_theta": [40, 41, 42, 43, 44, 45], "preliminari": [40, 41, 42, 43, 44, 45], "prepend": 75, "preprint": [61, 78, 105], "preprocess": [1, 12, 13, 14, 15, 39, 40, 41, 42, 43, 44, 45, 88, 89], "prerequisit": 74, "presenc": 93, "present": [1, 88, 92, 97, 101, 103, 104], "preserv": [62, 63, 67, 75, 98, 103], "press": 105, "preval": 83, "previou": [17, 18, 22, 58, 62, 63, 67, 74, 98], "previous": 104, "price": [88, 97, 103, 104], "primarili": [4, 17, 18, 24, 89, 91, 92], "print": [0, 2, 3, 4, 5, 6, 7, 9, 14, 15, 33, 37, 39, 43, 44, 45, 55, 56, 57, 59, 68, 70, 88, 91, 105], "prior": [53, 62, 67, 97], "privaci": 98, "privat": [81, 88], "probabl": [22, 56, 57, 58, 59, 78, 89, 92, 98, 99], "problem": [4, 5, 12, 15, 17, 18, 24, 56, 57, 58, 59, 64, 72, 73, 81, 88, 89, 90, 93, 103, 105, 106, 107], "proce": 11, "procedur": [92, 94], "proceed": 105, "proceed_when_unidentifi": 11, "process": [5, 10, 12, 55, 83, 86, 88, 90, 91, 99, 102, 103, 107], "processor": [9, 13, 15, 41, 45, 53, 54, 56, 58, 68, 70], "produc": [0, 1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 24, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 59, 83, 101, 103], "product": [17, 18, 22, 23, 46, 75, 86, 88, 89, 98, 104], "profession": 104, "program": [99, 103], "progress": 78, "project": [18, 24, 39, 40, 41, 42, 43, 44, 45, 83, 86, 89, 93, 94, 97, 103], "projector": [17, 18, 22, 23], "promis": 103, "promot": 0, "prompt": 99, "propens": [10, 12, 13, 14, 15, 49, 52, 54, 56, 57, 89, 92], "propensity_model": [49, 52, 54, 91], "propensity_model_fin": 54, "properti": [0, 1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 26, 32, 33, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 62, 65, 66, 67, 88, 89, 91], "proport": [42, 44, 65], "propos": [22, 52, 88, 89, 91], "provabl": 91, "prove": 107, "provid": [1, 2, 3, 4, 5, 7, 8, 10, 11, 12, 13, 14, 17, 18, 21, 22, 23, 24, 36, 37, 38, 39, 40, 41, 42, 43, 44, 56, 57, 58, 59, 62, 63, 65, 67, 68, 70, 71, 72, 73, 74, 75, 78, 83, 84, 88, 89, 91, 92, 97, 98, 100, 101, 103, 104, 107], "proxi": [4, 17, 18, 19, 24], "proxy_impurity_improv": 19, "prune": [13, 41, 56, 57], "pseudo": [9, 15, 17, 18, 22, 23, 36, 45, 49, 52, 58, 62, 63, 67, 68, 70], "psi": 98, "psi_a": 98, "psi_b": 98, "psi_d": 94, "public": [0, 1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55, 81], "publicli": 1, "pure": [2, 3, 4, 13, 17, 18, 22, 24, 41, 56, 57, 58, 59, 88, 89], "puriti": [2, 3, 56, 57, 59], "purpos": [1, 4, 10, 17, 18, 24, 75, 99], "put": [4, 17, 18, 24, 91], "pval": [76, 80], "pvalu": [26, 32, 33, 74, 81], "py": [62, 67, 68, 70], "pyplot": 91, "python": [75, 97, 98, 103, 104], "pywhi": [85, 97], "q": [5, 10, 78, 83, 88, 89, 91], "q_x": 91, "qini": [78, 79, 80], "qini_r": 79, "qualiti": [4, 17, 18, 24, 97], "quantif": [4, 17, 18, 22], "quantil": [62, 63, 65, 66, 77, 78, 79, 100], "quantiti": [0, 1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 22, 23, 24, 26, 32, 33, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55, 61, 83, 91, 92, 98], "quasi": [1, 10, 61, 105], "question": [81, 85, 99, 101, 103, 104, 106], "quick": [84, 103], "quicker": 104, "quit": 89, "r": [4, 10, 61, 62, 63, 67, 68, 70, 77, 78, 88, 91, 94, 105, 107], "r2_score": [1, 62, 63, 67, 68, 70], "radcliff": 78, "radcliffe2007": 78, "rademach": 88, "rai": [1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 40, 41, 42, 43, 44, 45], "rais": [1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 17, 18, 21, 22, 23, 24, 37, 38, 39, 40, 41, 42, 43, 44, 45, 55, 58, 59, 62, 63, 65, 67, 68, 70, 74, 88, 89], "random": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 22, 23, 24, 37, 38, 39, 40, 41, 42, 43, 44, 45, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 67, 68, 70, 72, 73, 74, 78, 81, 83, 86, 87, 88, 89, 93, 96, 99, 100, 101, 102, 103, 105, 106], "random_common_caus": 11, "random_se": 11, "random_st": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 17, 18, 22, 23, 24, 37, 38, 39, 40, 41, 42, 43, 44, 45, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 67, 68, 70, 72, 73, 74, 78, 98], "randomforest": [88, 91], "randomforestclassifi": [5, 8, 12, 89, 100], "randomforestregressor": [5, 8, 12, 50, 88, 89, 100], "randomli": [4, 11, 17, 18, 22, 24, 59, 74, 78, 99], "randomst": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 17, 18, 22, 24, 37, 38, 39, 40, 41, 42, 43, 44, 45, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 67, 68, 70, 72, 73, 74], "rang": [4, 5, 6, 7, 8, 9, 12, 13, 14, 15, 37, 38, 39, 40, 41, 42, 43, 44, 45, 55, 56, 57, 97, 98], "rangl": [14, 15, 83, 88, 91], "rank": [4, 78, 88], "rate": [88, 89, 98], "rather": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 22, 26, 32, 33, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 67, 68, 70, 88, 89, 98, 99, 103], "ratio": [42, 44, 53, 54], "raw": [8, 24, 26, 37, 38, 48], "ray_remote_fun_opt": 1, "ray_remote_func_opt": [1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 40, 41, 42, 43, 44, 45], "rb": 98, "rbf": 88, "re": [4, 8, 17, 18, 22, 23, 24, 38, 56, 57, 58, 59, 64, 88, 89, 91, 98], "reach": [22, 62, 67, 68, 70], "read": [62, 67, 68, 70], "reader": [83, 88, 89], "readi": [97, 101, 103], "realist": [91, 98], "realiz": 89, "reason": [4, 17, 18, 24, 62, 63, 67, 74, 86, 88, 92, 98, 99], "receiv": [56, 57, 58, 86, 89, 92, 93, 99, 103], "recent": [61, 74, 89, 91, 93, 103], "recogn": 53, "recomend": [37, 38, 39, 40, 41, 42, 43, 44, 45], "recommd": [58, 59], "recommend": [15, 37, 38, 39, 40, 41, 42, 43, 44, 45, 53, 54, 56, 57, 58, 59, 74, 75, 78, 81, 93, 101, 106], "record": [88, 89, 90, 93], "recov": [17, 18, 83, 88, 98], "recruit": 103, "reduc": [1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 37, 38, 39, 40, 41, 42, 43, 44, 45, 54, 55, 56, 57, 61, 64, 74, 88, 89, 93, 98, 101], "reduct": [2, 91, 93], "refer": [1, 2, 3, 4, 10, 13, 17, 18, 22, 24, 41, 56, 57, 58, 59, 60, 61, 78, 81, 83, 84, 88, 89, 95, 106], "refit": [1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 37, 38, 39, 40, 41, 42, 43, 44, 45, 55, 60, 71, 74], "refit_fin": [1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 37, 38, 39, 40, 41, 42, 43, 44, 45, 55, 81], "refut": [0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55, 81, 106], "refute_estim": [11, 81], "refuteresult": 11, "regener": [24, 59], "regim": [81, 106], "region": [17, 18, 24, 40, 41, 42, 43, 44, 45, 89], "regr": 22, "regres": [5, 12, 65, 66], "regress": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 17, 18, 22, 24, 37, 38, 39, 40, 41, 42, 43, 44, 45, 50, 51, 53, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 70, 74, 75, 83, 86, 88, 89, 91, 92, 98, 99, 100, 105], "regressioncriterion": 19, "regressionforest": [13, 41, 81, 89, 91, 100], "regressor": [4, 5, 6, 7, 8, 9, 12, 13, 14, 15, 22, 37, 38, 39, 40, 41, 42, 43, 44, 45, 55, 56, 57, 62, 63, 64, 67, 68, 70, 88, 89, 105], "regul": 98, "regular": [1, 9, 15, 45, 53, 54, 62, 63, 64, 67, 68, 70, 75, 85, 86, 88, 89, 91, 99, 102, 105], "reject": [4, 5, 6, 7, 9, 12, 13, 14, 15, 107], "rel": [2, 64, 78, 89, 91], "relat": [88, 89], "relationship": [86, 92, 97, 99], "releas": 74, "relev": [17, 18, 21, 22, 23, 24, 58, 59, 62, 63, 65, 67, 68, 70, 81, 87, 95, 96, 106], "reli": [25, 36], "reliabl": [104, 107], "remain": [1, 4, 71, 97], "remaind": [9, 15, 45, 62, 63, 74], "remot": [1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 40, 41, 42, 43, 44, 45], "remov": [11, 75, 88], "render": [2, 3, 56, 57, 59, 81, 91], "repeat": [55, 75], "repetit": 1, "replac": [4, 11, 13, 17, 18, 22, 24, 41, 56, 58, 91, 100], "replic": [24, 25, 36], "report": [0, 1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 26, 32, 33, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55, 62, 63], "repres": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 37, 38, 39, 40, 41, 42, 43, 44, 45, 55, 56, 57, 59, 60, 65, 75, 104], "represent": [62, 67, 88], "reproduc": [11, 88], "request": [11, 17, 18, 21, 22, 23, 24, 58, 59, 62, 63, 65, 67, 68, 70, 74], "requir": [2, 3, 4, 13, 17, 18, 22, 24, 41, 55, 56, 57, 58, 59, 65, 74, 75, 86, 89, 91, 92, 97, 107], "rerun": [1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 37, 38, 39, 40, 41, 42, 43, 44, 45, 55, 56, 57, 61, 74], "research": [85, 97, 103, 104], "reshap": [1, 10, 75, 81, 91], "reshape_arrays_2dim": [75, 81], "reshape_outcomewise_effect": [75, 81], "reshape_treatmentwise_effect": [75, 81], "reshape_y_t": [75, 81], "residu": [4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 17, 18, 24, 37, 38, 39, 40, 41, 42, 43, 44, 45, 53, 55, 61, 62, 63, 64, 67, 68, 70, 88, 89, 91], "residuals_": [4, 5, 6, 7, 8, 9, 10, 37, 38, 39, 40, 41, 42, 43, 44, 45, 55, 81], "resourc": [88, 89], "respect": [4, 5, 6, 7, 8, 9, 12, 13, 14, 15, 37, 38, 39, 40, 41, 42, 43, 44, 45, 55, 78, 83, 88, 89, 92], "respond": [101, 103], "respons": [5, 8, 61, 83, 86, 92, 97, 99, 101, 103, 104], "rest": [24, 55, 56, 57, 71, 98], "restrict": [68, 91], "result": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 25, 26, 32, 33, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 64, 65, 66, 75, 76, 77, 78, 79, 80, 81, 88, 98, 106, 107], "retain": [17, 18, 21, 22, 23, 24, 58, 59, 62, 63, 65, 67, 68, 70], "retriev": [68, 70], "return": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 21, 22, 23, 24, 26, 32, 33, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 83, 88, 91, 94, 101, 103], "return_n_it": [62, 67, 68, 70], "return_scor": 61, "return_train_scor": 71, "reus": [17, 18, 22, 58, 62, 63, 67, 86], "revenu": 103, "revers": 75, "revert": 63, "review": 97, "reward": [58, 59], "reweight": [40, 41, 42, 43, 44, 45], "rewritten": 98, "rf1": 22, "rf3": 22, "rf4": 22, "rho": [4, 5, 6, 7, 9, 12, 13, 14, 15, 17, 18, 19, 24], "rho_k": 94, "rich": 103, "right": [2, 3, 4, 5, 10, 12, 13, 14, 15, 17, 18, 19, 22, 24, 41, 56, 57, 58, 59, 83, 88, 89, 91, 92, 94, 97, 98], "right_impur": [2, 3, 4, 13, 17, 18, 22, 24, 41, 56, 57, 58, 59], "right_weight": [4, 17, 18, 22, 23, 24], "rigor": [72, 73], "risk": [98, 103], "risk_level": [3, 101], "risk_seek": 3, "rkh": 88, "rlearner": [10, 61, 88], "rlearner_model_final_": [10, 81], "rlmresult": 66, "rmse": 88, "robert": 61, "robin": [39, 105], "robins1994": [89, 105], "robust": [4, 5, 6, 7, 9, 10, 12, 13, 14, 15, 54, 56, 57, 66, 78, 81, 87, 88, 93, 100, 103, 105, 106, 107], "robust_linear_model": 66, "robustli": 74, "robustness_valu": [4, 5, 6, 7, 9, 12, 13, 14, 15, 81, 107], "roc_auc_scor": 1, "roman": [2, 3, 56, 57, 59], "root": [24, 59], "rotat": [2, 3, 56, 57, 59], "rotnitzki": 105, "roughli": [24, 72, 73, 91], "round": [0, 2, 3, 4, 5, 6, 7, 9, 12, 13, 14, 15, 26, 32, 33, 37, 39, 43, 44, 45, 55, 56, 57, 59], "rout": [17, 18, 21, 22, 23, 24, 58, 59, 62, 63, 65, 66, 67, 68, 70, 71], "routin": 97, "row": [1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 17, 18, 22, 23, 24, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 55, 56, 57, 61, 62, 65, 66, 67, 68, 70, 74, 75], "rscorer": [81, 107], "run": [4, 5, 9, 10, 12, 13, 14, 15, 17, 18, 22, 24, 25, 36, 41, 45, 53, 54, 56, 57, 58, 59, 62, 67, 74, 78, 81, 83, 88, 89, 91, 98, 99, 103, 106], "runtim": [88, 89], "rvert": 64, "rvert_1": 15, "s1": 1, "s_1": 91, "s_2": 91, "safe": 10, "saga": 54, "sale": 97, "same": [0, 1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 22, 23, 24, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 68, 70, 71, 75, 83, 88, 91, 93, 98, 103], "sampl": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 22, 23, 24, 26, 32, 33, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 70, 72, 73, 74, 75, 77, 78, 79, 83, 88, 89, 90, 91, 92, 97, 99, 101, 103], "sample_treatment_cost": [3, 101], "sample_typ": 75, "sample_var": [1, 5, 7, 8, 10, 12, 14, 37, 38, 39, 40, 42, 43, 44, 55, 65, 81], "sample_weight": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 17, 18, 21, 22, 23, 24, 37, 38, 39, 40, 41, 42, 43, 44, 45, 49, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 67, 68, 70, 72, 73, 75, 81], "sampleid": 74, "satisfactorili": [88, 89, 90], "satisfi": [75, 88, 89, 93], "save": [1, 2, 3, 56, 57, 59, 75, 88, 89], "scalar": [0, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 33, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55, 74, 75], "scale": [26, 32, 62, 67, 81], "scaler": 32, "scenario": [0, 1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 37, 38, 39, 40, 41, 42, 43, 44, 45, 49, 50, 51, 52, 53, 54, 55, 98, 103], "schedul": 99, "scheme": 75, "schuler": 61, "schuleretal2018": 61, "scienc": 105, "scikit": [5, 8, 12, 22, 56, 57, 71, 81, 88, 89, 91, 100], "scipi": [1, 4, 5, 6, 7, 8, 9, 12, 14, 15, 37, 38, 39, 40, 41, 42, 43, 44, 45, 49, 50, 51, 52, 62, 63, 67, 68, 70, 75], "score": [1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 17, 18, 19, 22, 23, 24, 26, 32, 37, 38, 39, 40, 41, 42, 43, 44, 45, 55, 56, 57, 58, 59, 62, 63, 64, 67, 68, 70, 71, 78, 81, 88, 89, 91, 106], "score_": [1, 10, 12, 14, 15, 81, 88, 89], "score_dict": [4, 5, 6, 7, 8, 9, 10], "score_nuis": [4, 5, 6, 7, 8, 9, 10, 81], "scorer": [61, 81], "seamless": 101, "search": [2, 3, 4, 13, 17, 18, 22, 23, 24, 41, 56, 57, 58, 59, 71, 81, 88, 89], "second": [1, 5, 12, 53, 54, 55, 56, 57, 75, 86, 88, 89, 91, 105], "second_stag": 54, "second_stage_parameter_estimator_gen": [54, 81], "section": [39, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 99], "see": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 21, 22, 23, 24, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 54, 55, 56, 57, 58, 59, 62, 63, 64, 65, 66, 67, 68, 70, 71, 75, 86, 88, 89, 90, 91, 92, 93, 95, 99, 100, 101, 103, 107], "seed": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 22, 24, 37, 38, 39, 40, 41, 42, 43, 44, 45, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 67, 68, 70, 72, 73, 78, 91], "segment": [81, 101, 106], "sekhon": 105, "select": [1, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 17, 18, 22, 24, 37, 38, 39, 40, 41, 42, 43, 44, 45, 49, 55, 56, 57, 59, 61, 62, 63, 67, 68, 70, 74, 81, 86, 88, 89, 92, 97, 99, 106, 107], "selected_alpha_": [62, 63, 81], "selectiveregular": 81, "self": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 21, 22, 23, 24, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 65, 66, 67, 68, 70, 71, 75, 78, 83, 88], "semant": [4, 17, 18, 22], "semenova": 105, "semiparametr": 105, "send": 99, "sens": [81, 83, 88, 102, 106, 107], "sensit": [4, 5, 6, 7, 9, 12, 13, 14, 15, 81, 98, 103, 106], "sensitivity_analysi": 107, "sensitivity_interv": [4, 5, 6, 7, 9, 12, 13, 14, 15, 81], "sensitivity_summari": [4, 5, 6, 7, 9, 12, 13, 14, 15, 81, 107], "separ": [0, 4, 5, 6, 7, 8, 9, 10, 12, 24, 28, 74, 75, 83, 86, 88, 89, 91, 92, 93, 98, 99, 101], "separatemodel": [75, 81], "sequenc": [1, 71, 75, 76, 77, 80], "sequenti": [55, 62, 63, 67, 68, 70, 90], "seri": [1, 75, 105], "serial": [74, 98], "serv": 85, "servic": 103, "set": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 21, 22, 23, 24, 26, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 78, 83, 86, 88, 89, 90, 91, 92, 93, 94, 98, 99, 100, 101, 102, 103, 104], "set_config": [17, 18, 21, 22, 23, 24, 58, 59, 62, 63, 65, 67, 68, 70], "set_fit_request": [17, 18, 21, 22, 23, 24, 58, 59, 62, 63, 65, 67, 68, 70, 81], "set_output": [46, 47, 75, 81], "set_param": [17, 18, 21, 22, 23, 24, 58, 59, 62, 63, 65, 66, 67, 68, 69, 70, 71, 81], "set_partial_fit_request": [63, 81], "set_predict_proba_request": [59, 81], "set_predict_request": [17, 18, 21, 22, 23, 24, 59, 81], "set_printopt": 22, "set_score_request": [62, 63, 67, 68, 70, 81], "setup": [81, 106], "sever": [4, 17, 18, 22, 24, 58, 59, 61, 62, 67, 74, 88, 89, 90, 93, 97, 103, 107], "shah": 61, "shallow": 101, "shap": [0, 1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 37, 38, 39, 40, 41, 42, 43, 44, 45, 49, 50, 51, 52, 53, 54, 55, 81, 106], "shap_out": [0, 1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 37, 38, 39, 40, 41, 42, 43, 44, 45, 49, 50, 51, 52, 53, 54, 55], "shap_valu": [0, 1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 37, 38, 39, 40, 41, 42, 43, 44, 45, 49, 50, 51, 52, 53, 54, 55, 81, 101], "shape": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 22, 23, 24, 26, 32, 33, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 67, 68, 69, 70, 72, 73, 74, 75, 81, 83], "shaplei": 101, "share": [85, 91, 98], "sharma": 105, "shift": [47, 104], "short": 105, "should": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 21, 22, 23, 24, 26, 32, 33, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 67, 68, 70, 74, 75, 78, 81, 83, 87, 95, 96, 98, 99, 102, 106, 107], "show": [1, 78, 91, 93], "shuffl": [1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 22, 37, 38, 39, 40, 41, 42, 43, 44, 45, 56, 57, 61, 72, 73, 74], "side": [3, 4, 13, 17, 18, 22, 24, 41, 56, 57, 58, 59, 79, 80, 98], "siev": [81, 96, 106], "sievetsl": [46, 81, 86, 94], "sigma": 12, "sign": [97, 103], "signal": [68, 70], "signatur": [0, 1, 36, 83], "signific": [4, 5, 6, 7, 9, 12, 13, 14, 15, 91, 98, 107], "significantli": [62, 63, 67, 68, 70, 78], "sim": [83, 92, 98], "similar": [2, 3, 21, 78, 89, 91, 92, 101], "similarli": [83, 88, 89, 91, 103], "simpl": [1, 4, 5, 6, 7, 8, 9, 10, 12, 14, 15, 17, 18, 21, 22, 23, 24, 37, 38, 39, 40, 41, 42, 43, 44, 45, 49, 50, 51, 52, 55, 56, 57, 58, 59, 62, 65, 66, 67, 68, 70, 71, 75, 83, 88, 91, 97, 105], "simpler": [4, 17, 18, 24, 93], "simplet": 75, "simpli": [1, 17, 18, 22, 23, 83, 88, 89, 90, 92, 99, 101], "simplifi": [2, 3, 74, 83], "simultan": [87, 88, 89, 90, 91, 93, 96], "simultant": 12, "sinc": [0, 4, 17, 18, 24, 53, 54, 64, 88, 89, 91, 92], "singl": [4, 5, 6, 7, 8, 9, 12, 13, 14, 15, 21, 29, 37, 38, 39, 40, 41, 42, 43, 44, 45, 49, 51, 52, 55, 56, 57, 62, 74, 75, 78, 86, 88, 89, 91, 98, 101], "singlemodelselector": 10, "singleton": [0, 1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 26, 32, 33, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55, 60, 75], "singletreecateinterpret": [81, 101], "singletreepolicyinterpret": [81, 101], "size": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 14, 15, 17, 18, 22, 24, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 49, 50, 51, 52, 55, 56, 57, 58, 59, 63, 72, 73, 75, 81, 83, 86, 91, 99], "sk": 1, "sketch": 92, "skip": [62, 67, 74], "skip_cat_limit_check": 74, "sklearn": [1, 4, 5, 6, 7, 8, 9, 10, 12, 17, 18, 21, 22, 23, 24, 49, 50, 51, 52, 53, 54, 58, 59, 62, 63, 65, 67, 68, 70, 72, 73, 75, 88, 89, 91, 100, 102], "sklearn_extens": [5, 10, 38, 53, 54, 81, 91, 100], "slearner": [81, 92], "slice": [17, 18, 22, 23, 64], "slight": [39, 40, 41, 43, 45, 91], "slightli": [2, 3, 88, 89, 91], "slow": [86, 89, 99], "slower": [2, 3, 89], "small": [4, 13, 17, 18, 22, 24, 41, 83, 86, 88, 89, 91, 92, 99, 101], "smaller": [0, 1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 22, 24, 37, 38, 39, 40, 41, 42, 43, 44, 45, 49, 50, 51, 52, 53, 54, 55, 62, 63, 67, 68, 70, 88, 89, 99, 101, 102], "smallest": [5, 12, 54, 56], "smooth": [2, 3, 4, 13, 17, 18, 22, 24, 41, 56, 57, 58, 59], "smry": [0, 4, 5, 6, 7, 9, 14, 15, 33, 37, 39, 43, 44, 45, 55], "so": [0, 1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 21, 22, 23, 24, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 62, 64, 65, 66, 67, 68, 70, 71, 75, 88, 89, 91, 92, 98, 99, 101, 103, 107], "soft": 61, "softmax": 61, "softwar": 104, "sole": 91, "solut": [1, 15, 17, 18, 22, 58, 62, 63, 67, 81, 91, 103, 104], "solv": [4, 5, 12, 15, 17, 18, 23, 24, 39, 56, 57, 62, 63, 67, 83, 91, 98], "solver": [1, 54, 62, 67, 68, 70], "some": [0, 1, 4, 5, 17, 18, 21, 22, 23, 24, 53, 58, 59, 62, 63, 65, 67, 68, 70, 83, 86, 88, 89, 90, 91, 93, 97, 98, 99, 103, 105], "someth": [97, 98], "sort": [1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 37, 38, 39, 40, 41, 42, 43, 44, 45, 49, 50, 51, 52, 54, 55, 56, 57, 61, 74], "sortabl": 80, "sourc": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 85, 97, 101, 104], "space": [40, 41, 42, 43, 44, 45, 83, 85, 88, 89, 91, 93], "span": 71, "spark": 98, "spars": [9, 15, 17, 18, 22, 23, 24, 58, 59, 62, 63, 67, 68, 70, 75, 86, 88, 89, 91, 99], "sparse_coef_": [62, 67, 81], "sparse_encod": [68, 70], "sparse_output": [75, 88], "sparsearrai": 75, "sparselineardml": [81, 86, 88, 100], "sparselineardriv": [40, 81, 86, 93], "sparselineardrlearn": [81, 86, 89, 100], "sparsiti": [62, 63, 67, 100], "spawn": [24, 59], "special": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 14, 15, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 49, 50, 51, 52, 55, 56, 57, 59, 83, 86, 101, 102], "special_charact": [2, 3, 56, 57, 59], "specif": [1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 37, 38, 39, 40, 41, 42, 43, 44, 45, 53, 55, 75, 91, 97, 102, 107], "specifi": [0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 37, 38, 39, 40, 41, 42, 43, 44, 45, 53, 55, 56, 57, 61, 62, 67, 68, 70, 74, 75, 78, 86, 88, 91, 94, 99, 107], "specifii": 36, "speed": [10, 62, 63, 67, 68, 70], "spend": 103, "split": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 17, 18, 19, 22, 23, 24, 37, 38, 39, 40, 41, 42, 43, 44, 45, 53, 54, 55, 56, 57, 58, 59, 61, 68, 70, 72, 73, 74, 75, 78, 81, 91, 98, 101], "splitter": [1, 2, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 24, 37, 38, 39, 40, 41, 42, 43, 44, 45, 53, 55, 56, 57, 59, 61, 68, 70, 74, 78], "springer": 105, "sqrt": [2, 3, 4, 13, 17, 18, 22, 24, 41, 56, 57, 58, 59, 62, 67, 68, 70, 98], "squar": [4, 5, 8, 10, 15, 17, 18, 22, 24, 37, 38, 61, 62, 63, 67, 68, 70, 78, 86, 88, 89, 91, 92, 94, 99, 100, 107], "st": 1, "stabil": [88, 89], "stabl": [17, 18, 22, 23, 78, 88, 89], "stack": [75, 81], "stage": [0, 1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 18, 32, 33, 37, 38, 39, 40, 41, 42, 43, 44, 45, 49, 50, 51, 52, 53, 54, 55, 56, 57, 61, 74, 86, 88, 89, 91, 92, 94, 96, 97, 98, 99, 100, 102, 105], "stand": 75, "standalon": 24, "standard": [0, 1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 22, 23, 26, 32, 33, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55, 62, 63, 65, 66, 75, 76, 78, 80, 88, 97, 104, 107], "start": [1, 24, 54, 56, 74, 78, 89, 101], "startup": 103, "state": [9, 15, 45, 90], "static": [54, 62, 65, 67, 68, 70], "statist": [0, 1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 22, 24, 25, 26, 32, 33, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55, 86, 88, 89, 90, 93, 97, 103, 104, 105], "statsmodel": [0, 7, 14, 34, 43, 44, 65, 66, 100], "statsmodelscateestimatordiscretemixin": [0, 14, 81, 89], "statsmodelscateestimatormixin": [0, 7, 43, 44, 81, 88, 93], "statsmodelsinfer": [7, 44, 81, 100], "statsmodelsinferencediscret": [14, 43, 81, 100], "statsmodelslinearregress": [0, 5, 12, 35, 37, 38, 40, 41, 42, 43, 44, 45, 81, 88, 89, 100], "statsmodelsrlm": 81, "statu": 78, "std": [17, 18, 22, 23], "std_point": [33, 81], "stderr": [26, 32, 33, 74, 81], "stderr_mean": [33, 81], "stderr_point": [33, 81], "stefan": [1, 4, 10, 17, 18, 19, 24], "step": [1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 24, 40, 41, 42, 43, 44, 45, 74, 88, 89, 104], "still": [18, 86, 88, 89, 99], "stop": [1, 2, 3, 4, 13, 17, 18, 22, 24, 26, 32, 33, 41, 56, 57, 58, 59], "store": [4, 17, 18, 19, 24, 34, 97, 98], "stori": 105, "str": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 21, 22, 23, 24, 26, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 62, 63, 65, 67, 68, 70, 71, 74, 75, 78, 79, 80, 83], "strata_from_discrete_arrai": [75, 81], "strateg": 103, "strategi": [1, 2, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 24, 37, 38, 39, 40, 41, 42, 43, 44, 45, 55, 56, 57, 59, 61, 68, 70, 74, 91, 104], "stratif": [72, 73, 75], "stratifi": 73, "stratifiedkfold": [1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 37, 38, 39, 40, 41, 42, 43, 44, 45, 56, 57, 61, 73, 74], "strength": 18, "string": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 37, 38, 39, 40, 41, 42, 43, 44, 45, 55, 56, 57, 59, 65, 74, 75, 78, 102], "strip": 75, "strong": [40, 41, 42, 43, 44, 45, 91, 104], "stronger": [4, 17, 18, 24, 89, 97], "strongli": 88, "structur": [1, 4, 10, 13, 17, 18, 22, 24, 41, 56, 57, 59, 74, 81, 83, 86, 87, 95, 96, 97, 99, 106], "studi": [78, 88, 103], "sub": [4, 13, 17, 18, 21, 22, 23, 24, 41, 56, 58, 59, 62, 63, 65, 67, 68, 70, 83, 101], "subclass": [0, 102, 107], "subforest_s": [4, 13, 17, 18, 22, 23, 41], "subgroup": [78, 101], "sublist": [1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 37, 38, 39, 40, 41, 42, 43, 44, 45], "submit": 97, "submodel": 10, "subobject": [17, 18, 21, 22, 23, 24, 58, 59, 62, 65, 66, 67, 68, 70, 71], "subpackag": 11, "subpopul": 83, "subsampl": [4, 13, 17, 18, 22, 41, 53, 54, 56, 58, 75, 81, 89, 91, 106], "subsample_ratio": [53, 54, 91], "subscript": [75, 103], "subsequ": [83, 88, 91], "subset": [1, 4, 11, 17, 18, 22, 64, 83, 86, 88, 89, 91, 98, 99, 102], "subseuqnet": 55, "substanti": 91, "substitut": 88, "succe": [1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 37, 38, 39, 40, 41, 42, 43, 44, 45, 55, 75], "succesfulli": 74, "successfulli": 74, "succinct": 92, "succinctli": 101, "suffer": 89, "suffix": [1, 36], "suggest": 97, "suit": [93, 100, 104, 107], "suitabl": [11, 92], "sulovsk\u00fd": 105, "sum": [2, 3, 4, 13, 17, 18, 22, 24, 41, 56, 57, 58, 59, 62, 63, 67, 68, 70, 75, 78, 91], "sum_": [1, 4, 10, 12, 14, 15, 17, 18, 19, 22, 23, 24, 88, 91, 94], "sum_i": [37, 38, 56, 57, 58, 59, 62, 67, 68, 70], "sum_j": [58, 59, 62, 67, 68, 70], "sum_k": 78, "sum_t": [56, 57], "summar": [65, 76, 77, 78, 79, 80], "summari": [0, 1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 26, 32, 33, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55, 75, 76, 77, 78, 79, 80, 81, 101, 103, 107], "summary_fram": [26, 32, 81], "summary_plot": 101, "summat": 75, "supervis": [72, 73], "suppli": [1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 49, 50, 51, 52, 53, 54, 55], "support": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 24, 27, 28, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 63, 65, 74, 75, 83, 88, 89, 91, 102, 103], "suppos": [83, 88, 89, 90, 91, 93, 99], "suppress": 22, "sure": [55, 103], "surfac": [92, 107], "surpris": 89, "susan": [4, 17, 18, 19, 24], "svc": [88, 89], "svd": 88, "swap": 75, "symmetr": [17, 18, 22, 23], "synthet": [91, 92], "syrgkani": [1, 10, 105], "syrgkanis2019": [93, 105], "s\u00f6ren": 105, "t": [0, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 21, 22, 23, 24, 26, 32, 33, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 70, 75, 78, 81, 83, 87, 88, 89, 90, 91, 93, 94, 98, 100, 101, 103, 106], "t0": [0, 1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 29, 30, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55, 60, 83, 88, 89, 101], "t0_i": [0, 1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 37, 38, 39, 40, 41, 42, 43, 44, 45, 49, 50, 51, 52, 53, 54, 55, 60, 83], "t0_test": 83, "t0\u1d62": [0, 48], "t1": [0, 1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 29, 30, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55, 60, 83, 88, 89], "t1_i": [0, 1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 37, 38, 39, 40, 41, 42, 43, 44, 45, 49, 50, 51, 52, 53, 54, 55, 60, 83], "t1_test": 83, "t1\u1d62": [0, 48], "t_": [90, 94], "t_0": [83, 94], "t_1": [83, 94], "t_composit": 88, "t_dyn": 90, "t_featur": 48, "t_i": [0, 1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 37, 38, 39, 40, 41, 42, 43, 44, 45, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 83, 89, 91, 94], "t_part": 98, "t_re": [1, 4, 5, 6, 7, 8, 9, 10, 37, 38, 39, 40, 41, 42, 43, 44, 45, 55], "t_score": [4, 5, 6, 7, 8, 9, 10], "t_score_by_dim": [4, 5, 6, 7, 8, 9, 10], "t_t": 90, "t_test": 83, "t_val": [88, 89], "t_xw": [37, 38, 39, 40, 41, 42, 43, 44, 45], "t_xwz": [37, 38, 39], "tabl": [0, 4, 5, 6, 7, 9, 14, 15, 33, 37, 39, 43, 44, 45, 55, 75], "tackl": [83, 103], "taddi": 105, "tag": 83, "tailor": [84, 88], "take": [1, 5, 12, 14, 15, 24, 36, 37, 38, 56, 57, 58, 59, 74, 75, 78, 83, 86, 88, 91, 93, 98, 101], "taken": [50, 62, 67, 68, 70, 83], "target": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 60, 62, 63, 64, 67, 68, 69, 70, 72, 73, 74, 75, 78, 83, 88, 89, 91, 92, 99, 102, 103], "target_unit": 11, "task": [5, 12, 62, 67, 68, 70, 74, 88, 89, 93], "tau": [0, 1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55, 60, 78, 83, 92, 94], "tau_": 78, "te_pr": 88, "team": 104, "technic": [89, 91, 103], "techniqu": [22, 49, 56, 57, 84, 88, 89, 90, 92, 100, 103, 104], "tensor": 75, "tensordot": [75, 81], "term": [5, 6, 7, 9, 14, 15, 17, 18, 37, 39, 40, 42, 43, 44, 45, 55, 62, 63, 64, 67, 83, 88, 98], "terminologi": [83, 88], "test": [0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 26, 32, 33, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 61, 62, 63, 67, 68, 70, 72, 73, 74, 76, 77, 78, 79, 80, 81, 83, 88, 89, 90, 93, 104, 106], "test_siz": 22, "text": [0, 2, 3, 4, 5, 6, 7, 9, 14, 15, 33, 37, 39, 43, 44, 45, 55, 56, 57, 59, 75, 92], "th": [1, 12, 17, 18, 22, 23, 58, 65, 66, 71], "than": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 22, 23, 24, 26, 32, 33, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 67, 68, 70, 74, 75, 78, 88, 89, 91, 96, 97, 98, 99, 102, 103], "thei": [1, 4, 17, 18, 22, 23, 24, 56, 57, 58, 59, 62, 67, 74, 75, 83, 88, 89, 91, 92, 98, 99, 103], "them": [1, 4, 14, 17, 18, 22, 24, 59, 74, 75, 83, 86, 88, 89, 91, 99], "themselv": 75, "theorem": [88, 89], "theoret": [87, 88, 89, 91], "theori": [1, 3, 4, 10, 13, 17, 18, 22, 24, 41, 56, 57, 58, 59, 81, 105, 106], "therebi": 89, "therefor": 83, "theta": [0, 1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 22, 23, 24, 37, 38, 39, 40, 41, 42, 43, 44, 45, 49, 50, 51, 52, 53, 54, 55, 60, 61, 62, 63, 83, 88, 91, 98, 101], "theta_": [5, 88], "theta_0": [88, 90], "theta_1": 91, "theta_2": 91, "theta_t": [12, 14, 15, 89, 91], "thi": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 74, 75, 78, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 107], "think": 97, "third": 91, "those": [1, 17, 18, 22, 23, 58, 74, 88, 89, 97], "though": [18, 91, 97], "thought": [4, 17, 18, 24, 83], "thread": [53, 54], "three": [11, 37, 91, 98], "threshold": [2, 3, 56, 57, 59], "through": [9, 11, 15, 17, 18, 22, 23, 24, 36, 45, 58, 59, 62, 63, 78, 83, 84, 92, 93, 96, 103], "thu": [4, 5, 10, 12, 17, 18, 24, 29, 30, 38, 56, 57, 88, 89, 91, 98, 101], "tibshirani": [4, 17, 18, 19, 22, 24, 61, 105], "tild": [5, 10, 38, 40, 41, 43, 45, 88, 91], "time": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 22, 23, 24, 26, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 72, 73, 74, 75, 83, 88, 90, 91, 93, 95, 101, 102, 103], "titl": [2, 3, 56, 57, 59], "tlearner": [81, 92], "tmt": [77, 78, 79, 80], "toc": [78, 79], "toc_r": 79, "tocoo": [75, 81], "todens": [75, 81], "todo": 74, "togeth": [1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 37, 38, 39, 40, 41, 42, 43, 44, 45, 55, 56, 57, 61, 85, 103], "tol": [9, 15, 26, 32, 33, 45, 62, 63, 66, 67, 68, 70], "toler": [3, 4, 9, 13, 15, 17, 18, 22, 24, 41, 45, 56, 57, 58, 59, 62, 63, 66, 67, 68, 70], "too": [4, 17, 18, 22, 23, 24, 86, 88, 89, 90, 103], "tool": [101, 104, 107], "top": [1, 2, 3, 10, 22, 56, 57, 59, 64, 75, 98], "total": [2, 3, 4, 13, 17, 18, 22, 23, 24, 41, 53, 54, 56, 57, 58, 59, 62, 63, 67, 68, 70, 72, 73], "toward": 103, "trace": 88, "trade": [86, 92], "tradit": 104, "train": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 17, 18, 22, 23, 24, 37, 38, 39, 40, 41, 42, 43, 44, 45, 50, 53, 54, 55, 56, 57, 58, 59, 61, 62, 67, 68, 70, 72, 73, 74, 75, 78, 83, 88, 89, 91, 92, 98, 100, 101, 104], "train_test_split": [22, 24, 59], "trained_feature_indices_": [74, 81], "transfer": 91, "transform": [0, 1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 26, 32, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 68, 70, 75, 81, 83, 88], "transformermixin": [5, 46, 47, 75], "translat": [4, 17, 18, 24, 26, 32, 81, 83], "transpos": [75, 81], "transpose_dictionari": [75, 81], "travel": 103, "tre": 61, "treament": 74, "treamtnent": 27, "treat": [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 37, 38, 39, 40, 41, 42, 43, 44, 45, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 65, 74, 75, 79, 80, 81, 83, 88, 89, 90, 91, 92, 93, 99, 101, 103], "treatment": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 22, 23, 24, 26, 28, 29, 31, 32, 33, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 74, 75, 76, 77, 78, 79, 80, 81, 86, 87, 88, 89, 90, 91, 92, 93, 96, 97, 99, 101, 104, 105, 106, 107], "treatment_cost": 74, "treatment_effect": 91, "treatment_featur": [0, 1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 37, 38, 39, 40, 41, 42, 43, 44, 45, 49, 50, 51, 52, 53, 54, 55, 60, 83, 88], "treatment_nam": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 26, 32, 33, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59], "treatment_proba": [56, 57, 58, 59], "treatment_valu": [11, 74], "treatmentexpansionmixin": [0, 1, 16, 49, 50, 51, 52, 81, 88, 90, 91, 92], "tree": [2, 3, 4, 13, 17, 18, 22, 23, 24, 41, 53, 54, 56, 57, 58, 59, 74, 81, 103, 106], "tree_": [24, 59, 81], "tree_id": 56, "tree_model_": [3, 81], "tri": [91, 101], "trial": [72, 73, 103], "trick": 8, "trip": 103, "true": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 21, 22, 23, 24, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 78, 86, 88, 89, 91, 93, 98, 101, 107], "true_coef": [62, 67], "true_fn": [37, 38, 39, 40, 41, 42, 43, 44, 45], "true_heterogeneity_funct": [37, 38, 39, 40, 41, 42, 43, 44, 45], "truth": 64, "try": [4, 9, 15, 45, 62, 63, 66, 71, 72, 73, 97, 101], "tsiati": [89, 105], "tunabl": 4, "tunable_param": 4, "tune": [4, 66, 81, 88, 89], "tupl": [0, 1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 26, 32, 33, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55, 62, 63, 65, 66, 74, 75, 78, 83], "turn": 5, "two": [0, 1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 22, 24, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 60, 74, 75, 79, 80, 83, 86, 88, 89, 91, 92, 94, 96, 98, 102, 103, 105, 107], "txt": 75, "type": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 21, 22, 23, 24, 26, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 86, 89, 98, 100, 101], "typic": [1, 4, 13, 17, 18, 22, 41, 74, 88, 89, 91, 92, 98], "typical_treatment_valu": [74, 81], "tz_xw": [40, 41, 43, 45], "t\u1d62": 48, "u": [1, 29, 30, 62, 63, 67, 68, 70, 83, 85, 94], "ub": [0, 4, 5, 6, 7, 9, 12, 13, 14, 15, 17, 18, 22, 23, 39, 43, 44, 45, 55, 88, 89, 100], "ub_coef": 88, "ub_effect": 88, "ucb1": [79, 80], "ucb2": [79, 80], "un": [4, 75], "unbias": [88, 89, 91, 92], "uncertainti": [2, 3, 4, 17, 18, 22, 88, 89, 100], "uncertainty_level": [2, 3], "uncertainty_only_on_leav": [2, 3], "unchang": [14, 15, 17, 18, 21, 22, 23, 24, 43, 45, 46, 47, 58, 59, 62, 63, 65, 67, 68, 70, 75, 100], "unconfounded": [81, 89, 91, 106], "under": [0, 1, 4, 5, 6, 7, 9, 14, 15, 26, 32, 33, 39, 43, 44, 45, 55, 74, 78, 81, 83, 89, 103, 104, 106], "underli": [24, 31, 36, 59, 63, 75, 90, 92, 97, 100], "understand": [83, 88, 89, 90, 101], "unifi": [104, 105], "unifiedbroad": 104, "uniform": [37, 38, 39, 40, 41, 42, 43, 44, 45, 74, 78, 79, 80, 91], "uniform_averag": [62, 63, 67, 68, 70], "union": [1, 88], "uniqu": [1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 37, 38, 39, 40, 41, 42, 43, 44, 45, 49, 50, 51, 52, 54, 55, 56, 57, 61], "unit": [3, 11, 49, 50, 51, 52, 55, 74, 75, 78, 88, 90], "univers": 75, "unknown": [24, 103], "unless": [0, 1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 24, 37, 38, 39, 40, 41, 42, 43, 44, 45, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 67, 68, 70, 75], "unlik": [65, 75, 89, 98], "unlimit": 2, "unmodifi": 75, "unnecessari": [62, 67, 68, 70], "unobserv": [10, 11, 93, 96, 107], "unpenalized_ind": 64, "unregular": [88, 89], "unrestrict": 92, "unscal": 47, "unsupervis": [46, 47, 75], "until": [2, 3, 4, 9, 13, 15, 17, 18, 22, 24, 41, 45, 56, 57, 58, 59, 62, 63, 67, 68, 70, 75], "untrained_feature_indices_": [74, 81], "unusu": 97, "up": [10, 17, 18, 22, 23, 24, 58, 59, 62, 63, 67, 68, 70, 89, 101, 103], "updat": [9, 15, 17, 18, 21, 22, 23, 24, 26, 32, 45, 58, 59, 62, 63, 65, 66, 67, 68, 70, 71, 75, 107], "uplift": [78, 80, 107], "upliftevaluationresult": [78, 79, 81], "upper": [0, 1, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 22, 23, 26, 32, 33, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55, 62, 63, 65, 66, 83], "upper_bound_on_cat_expans": 74, "url": 105, "us": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 28, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 70, 72, 73, 74, 75, 78, 81, 86, 87, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107], "usag": [81, 87, 95, 96, 106], "use_rai": [1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 40, 41, 42, 43, 44, 45], "user": [0, 1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 21, 22, 23, 24, 37, 38, 39, 40, 41, 42, 43, 44, 45, 49, 50, 51, 52, 53, 54, 55, 58, 59, 62, 63, 65, 66, 67, 68, 70, 71, 81, 86, 88, 89, 90, 91, 92, 93, 94, 97, 99, 102, 103, 104], "usual": 86, "util": [17, 18, 21, 22, 23, 24, 42, 44, 58, 59, 62, 63, 65, 67, 68, 70, 81], "v": [1, 38, 56, 57, 62, 63, 67, 68, 70, 74, 78, 105], "v97": 105, "v_i": 1, "val": [4, 17, 18, 22, 23], "valid": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 17, 18, 22, 24, 37, 38, 39, 40, 41, 42, 43, 44, 45, 53, 55, 56, 57, 58, 59, 61, 62, 63, 67, 68, 70, 72, 73, 74, 75, 81, 86, 87, 88, 89, 91, 92, 93, 97, 99, 102, 103, 106], "validate_len": 75, "valu": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 21, 22, 23, 24, 26, 27, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 74, 75, 76, 77, 78, 79, 80, 83, 86, 88, 89, 91, 101, 102, 103, 107], "valuabl": 92, "value1": 4, "value2": 4, "value_left": [4, 17, 18, 22, 23, 24], "value_right": [4, 17, 18, 22, 23, 24], "valueerror": 1, "van": 105, "vanilla": 104, "var": [1, 4, 17, 18, 19, 22, 23, 24, 26, 32, 78, 81], "var_n": 91, "varepsilon": 94, "vari": [0, 4, 17, 18, 22, 24, 55, 59, 62, 67, 68, 70, 74, 86, 99, 102, 103], "variabl": [0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 23, 24, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 63, 65, 66, 72, 73, 78, 81, 83, 86, 88, 89, 90, 91, 96, 97, 99, 103, 105, 106], "varianc": [1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 17, 18, 22, 23, 24, 26, 32, 37, 38, 39, 40, 41, 42, 43, 44, 45, 54, 55, 56, 57, 61, 65, 74, 89, 91, 92, 98, 99], "variant": [4, 17, 18, 24, 39, 40, 41, 43, 45, 78, 88, 89, 90, 91, 93], "variat": [4, 17, 18, 65, 66, 83, 86, 88, 91, 92, 99, 103], "variou": [0, 1, 4, 5, 6, 7, 9, 14, 15, 22, 33, 37, 39, 43, 44, 45, 55], "vasili": [1, 10, 105], "vec": [5, 83, 88, 94], "vector": [0, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 22, 23, 24, 26, 32, 33, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 61, 62, 63, 65, 66, 67, 75, 78, 83, 88, 89], "verbos": [4, 5, 13, 17, 18, 22, 23, 25, 36, 41, 53, 54, 56, 58, 62, 67, 68, 70, 71, 74], "veri": [1, 4, 10, 17, 18, 24, 88, 89, 91], "versa": [75, 78, 83, 91], "versatil": 1, "version": [1, 6, 9, 10, 17, 18, 21, 22, 23, 24, 40, 41, 42, 43, 44, 45, 46, 47, 58, 59, 61, 62, 63, 65, 67, 68, 70, 75, 88, 91, 100, 102, 107], "vertic": 75, "via": [4, 5, 14, 15, 19, 43, 45, 74, 78, 83, 88, 89, 90, 91, 92, 97, 98, 99, 100, 102, 103], "vice": [75, 78, 83, 91], "victor": 39, "view": [2, 3, 38, 56, 57, 59, 101], "violat": [4, 17, 18, 24], "visual": 101, "vote": [56, 57, 58], "vstack": [75, 81], "w": [0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 22, 23, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 53, 54, 55, 56, 57, 61, 62, 63, 67, 68, 70, 75, 81, 83, 88, 89, 90, 91, 93, 94, 99, 100, 101, 105], "w30302": 105, "w_": [62, 67, 68, 70], "w_dyn": 90, "w_i": [10, 12, 56, 57, 83, 89, 91, 94], "w_t": 90, "w_val": [88, 89], "wa": [0, 1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 22, 23, 24, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 59, 61, 62, 63, 65, 66, 74, 75, 88, 89, 90, 91, 97, 99, 103], "wager": [1, 4, 10, 17, 18, 19, 22, 24, 61, 105], "wager2018": [88, 89, 91, 103, 105], "wai": [1, 46, 72, 73, 75, 88, 89, 97, 101], "walk": [83, 84], "want": [0, 12, 13, 14, 15, 24, 83, 88, 89, 91, 92], "warm": 74, "warm_start": [17, 18, 22, 23, 58, 62, 63, 67, 74], "warn": [23, 74, 75], "wb": 98, "we": [0, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 22, 24, 37, 38, 39, 40, 41, 42, 43, 44, 45, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 71, 74, 75, 78, 83, 84, 85, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 100, 101, 103], "weak": 18, "websit": 103, "week": [86, 99], "weight": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 17, 18, 22, 23, 24, 37, 38, 39, 40, 41, 42, 43, 44, 45, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 70, 72, 73, 75, 78, 88, 89, 91, 92], "weightedkfold": [68, 70, 73, 81], "weightedlasso": [62, 81, 88, 91, 100], "weightedlassocv": [69, 81], "weightedlassocvwrapp": [53, 54, 81], "weightedmodelmixin": [67, 68, 70], "weightedmodelwrapp": [75, 81, 88, 91], "weightedmultitasklassocv": [69, 81], "weightedstratifiedkfold": 81, "weightwrapp": [42, 44], "welcom": 97, "welfar": [58, 59], "well": [0, 4, 17, 18, 21, 22, 23, 24, 58, 59, 62, 65, 66, 67, 68, 70, 71, 83, 86, 88, 89, 91, 92, 97, 99, 100], "were": [1, 5, 7, 8, 10, 12, 14, 37, 38, 39, 40, 42, 43, 44, 55, 65, 74, 75, 78, 83, 88, 90, 93, 95, 97, 99, 101], "what": [24, 53, 54, 58, 59, 62, 67, 74, 81, 83, 87, 95, 96, 98, 103, 104, 106], "whatif": [74, 81], "when": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 22, 24, 26, 32, 33, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 70, 72, 73, 74, 75, 78, 81, 83, 87, 95, 96, 99, 101, 102, 105, 106], "whenev": [62, 63, 74, 101], "where": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 22, 23, 24, 28, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 62, 63, 64, 67, 68, 70, 72, 73, 74, 75, 78, 83, 86, 88, 89, 90, 91, 92, 93, 94, 98, 99, 100, 101, 103], "wherea": 99, "whether": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 22, 23, 24, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 70, 72, 73, 74, 75, 78, 81, 99, 103, 106, 107], "which": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 22, 23, 24, 26, 27, 32, 33, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 65, 66, 71, 74, 75, 78, 83, 85, 86, 88, 89, 91, 92, 93, 97, 98, 99, 101, 102, 103, 107], "while": [17, 18, 22, 23, 58, 64, 74, 88, 89, 91, 97, 98, 103, 107], "whitnei": 39, "who": [103, 104], "whole": [4, 17, 18, 22, 58, 74], "whose": [1, 10, 12, 13, 14, 15, 27, 64, 65, 66, 87, 94], "why": [88, 89, 91, 101, 104], "wise": [2, 3, 75], "within": [4, 17, 18, 24, 59, 74, 78, 91, 101, 104], "without": [4, 13, 17, 18, 22, 24, 41, 56, 58, 75, 89, 98], "wl": 65, "word": [83, 93], "work": [1, 8, 17, 18, 21, 22, 23, 24, 58, 59, 61, 62, 63, 65, 66, 67, 68, 70, 71, 88, 89, 92, 99, 103, 105, 107], "world": 83, "wors": [61, 62, 63, 67, 68, 70], "would": [1, 4, 5, 6, 7, 9, 12, 13, 14, 15, 17, 18, 22, 23, 46, 58, 62, 63, 67, 68, 70, 74, 83, 88, 89, 91, 98, 102, 103, 107], "wouldn": 88, "wrap": [36, 69, 88, 89, 91], "wrapper": [1, 11, 21, 36, 75, 88, 91, 106], "write": [38, 88, 91, 94], "written": 88, "wrote": 97, "wu": 105, "www": 105, "x": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 22, 23, 24, 26, 27, 29, 30, 31, 32, 33, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 72, 73, 74, 75, 77, 78, 79, 80, 81, 83, 86, 87, 88, 89, 90, 91, 93, 94, 98, 99, 100, 101, 103, 105, 106], "x0": 12, "x1": [12, 74, 75], "x12": 75, "x2": [12, 74, 75], "x_0": 90, "x_1": 64, "x_2": 64, "x_dyn": 90, "x_featur": 48, "x_i": [0, 1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 37, 38, 39, 40, 41, 42, 43, 44, 45, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 83, 89, 91, 94], "x_leav": [17, 18, 22, 23, 24, 58, 59], "x_new": [46, 47, 75], "x_oh": 88, "x_part": 98, "x_t": 90, "x_test": [22, 83, 91], "x_train": 22, "x_val": [88, 89], "xinkun": [1, 10], "xlearner": [81, 92], "xnew": 74, "xp": 46, "xt": 75, "xtest": 74, "xtrain": [17, 18, 22, 23, 78], "xval": 78, "xw": [62, 67, 68, 70, 89, 90], "xw_": 90, "xw_t": 90, "xy": [62, 67, 68, 70], "x\u1d62": 48, "y": [0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 22, 23, 24, 26, 32, 33, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 72, 73, 74, 75, 77, 78, 79, 80, 81, 83, 88, 89, 90, 91, 92, 93, 94, 98, 100, 101, 103], "y0": [0, 1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 37, 38, 39, 40, 41, 42, 43, 44, 45, 49, 50, 51, 52, 53, 54, 55, 101], "y1": [0, 1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 37, 38, 39, 40, 41, 42, 43, 44, 45, 49, 50, 51, 52, 53, 54, 55], "y_": [12, 14, 15, 56, 57, 58, 59, 89, 91, 94], "y_dyn": 90, "y_i": [10, 12, 37, 38, 56, 57, 83, 89, 91, 94], "y_lower": [62, 63], "y_new": 74, "y_part": 98, "y_pred": [62, 63, 67, 68, 70], "y_re": [1, 4, 5, 6, 7, 8, 9, 10, 37, 38, 39, 40, 41, 42, 43, 44, 45, 55], "y_score": [4, 5, 6, 7, 8, 9, 10], "y_t": 90, "y_test": 22, "y_train": 22, "y_true": [62, 63, 67, 68, 70], "y_upper": [62, 63], "y_val": [88, 89], "y_xw": [37, 38, 39, 40, 41, 42, 43, 44, 45], "ye": 86, "yield": [1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 37, 38, 39, 40, 41, 42, 43, 44, 45, 55, 56, 57, 61, 68, 70, 74, 89], "york": 105, "you": [0, 1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 17, 18, 21, 22, 23, 24, 26, 32, 33, 37, 38, 39, 40, 41, 42, 43, 44, 45, 55, 58, 59, 62, 63, 65, 67, 68, 70, 81, 84, 85, 86, 87, 95, 96, 97, 98, 99, 100, 101, 106], "your": [88, 89, 90, 91, 97, 98], "yourself": 88, "yre": 61, "ytrain": 78, "yu": 105, "yval": 78, "z": [0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 24, 26, 32, 33, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55, 78, 81, 83, 93, 94, 99, 105], "z_featur": 48, "z_i": [37, 38, 83, 94], "z_propens": [42, 44], "z_re": [39, 40, 41, 42, 43, 44, 45], "z_xw": [39, 40, 41, 43, 45], "zadik": 105, "zero": [3, 4, 12, 13, 14, 15, 17, 18, 22, 23, 24, 41, 46, 55, 56, 57, 58, 59, 83, 88, 91, 107], "zeta": 83, "zeta_t": 90, "zhao": 105, "zstat": [26, 32, 33, 74, 81], "\u03b1": 88, "\u03b1_0": 88, "\u03b1_1": 88, "\u03b1_2": 88, "\u03b3": 83, "\u03b4": 83, "\u03b8": [53, 54, 83, 88], "\u03bc": 83, "\u03c0": 83, "\u03c4": [0, 1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55, 60, 83], "\u03c4_hat": [49, 50, 51, 52], "\u03d5": 88, "\ud835\udd3c": 83, "\ud835\udfd9": [83, 88]}, "titles": ["econml._cate_estimator", "econml._ortho_learner", "econml.cate_interpreter.SingleTreeCateInterpreter", "econml.cate_interpreter.SingleTreePolicyInterpreter", "econml.dml.CausalForestDML", "econml.dml.DML", "econml.dml.KernelDML", "econml.dml.LinearDML", "econml.dml.NonParamDML", "econml.dml.SparseLinearDML", "econml.dml._rlearner", "econml.dowhy.DoWhyWrapper", "econml.dr.DRLearner", "econml.dr.ForestDRLearner", "econml.dr.LinearDRLearner", "econml.dr.SparseLinearDRLearner", "econml.federated_learning.FederatedEstimator", "econml.grf.CausalForest", "econml.grf.CausalIVForest", "econml.grf.LinearMomentGRFCriterion", "econml.grf.LinearMomentGRFCriterionMSE", "econml.grf.MultiOutputGRF", "econml.grf.RegressionForest", "econml.grf._base_grf.BaseGRF", "econml.grf._base_grftree.GRFTree", "econml.inference.BootstrapInference", "econml.inference.EmpiricalInferenceResults", "econml.inference.GenericModelFinalInference", "econml.inference.GenericModelFinalInferenceDiscrete", "econml.inference.GenericSingleTreatmentModelFinalInference", "econml.inference.LinearModelFinalInference", "econml.inference.LinearModelFinalInferenceDiscrete", "econml.inference.NormalInferenceResults", "econml.inference.PopulationSummaryResults", "econml.inference.StatsModelsInference", "econml.inference.StatsModelsInferenceDiscrete", "econml.inference._bootstrap", "econml.iv.dml.DMLIV", "econml.iv.dml.NonParamDMLIV", "econml.iv.dml.OrthoIV", "econml.iv.dr.DRIV", "econml.iv.dr.ForestDRIV", "econml.iv.dr.IntentToTreatDRIV", "econml.iv.dr.LinearDRIV", "econml.iv.dr.LinearIntentToTreatDRIV", "econml.iv.dr.SparseLinearDRIV", "econml.iv.sieve.DPolynomialFeatures", "econml.iv.sieve.HermiteFeatures", "econml.iv.sieve.SieveTSLS", "econml.metalearners.DomainAdaptationLearner", "econml.metalearners.SLearner", "econml.metalearners.TLearner", "econml.metalearners.XLearner", "econml.orf.DMLOrthoForest", "econml.orf.DROrthoForest", "econml.panel.dml.DynamicDML", "econml.policy.DRPolicyForest", "econml.policy.DRPolicyTree", "econml.policy.PolicyForest", "econml.policy.PolicyTree", "econml.score.EnsembleCateEstimator", "econml.score.RScorer", "econml.sklearn_extensions.linear_model.DebiasedLasso", "econml.sklearn_extensions.linear_model.MultiOutputDebiasedLasso", "econml.sklearn_extensions.linear_model.SelectiveRegularization", "econml.sklearn_extensions.linear_model.StatsModelsLinearRegression", "econml.sklearn_extensions.linear_model.StatsModelsRLM", "econml.sklearn_extensions.linear_model.WeightedLasso", "econml.sklearn_extensions.linear_model.WeightedLassoCV", "econml.sklearn_extensions.linear_model.WeightedLassoCVWrapper", "econml.sklearn_extensions.linear_model.WeightedMultiTaskLassoCV", "econml.sklearn_extensions.model_selection.GridSearchCVList", "econml.sklearn_extensions.model_selection.WeightedKFold", "econml.sklearn_extensions.model_selection.WeightedStratifiedKFold", "econml.solutions.causal_analysis.CausalAnalysis", "econml.utilities", "econml.validate.BLPEvaluationResults", "econml.validate.CalibrationEvaluationResults", "econml.validate.DRTester", "econml.validate.EvaluationResults", "econml.validate.UpliftEvaluationResults", "Welcome to econml\u2019s documentation!", "Public Module Reference", "Problem Setup and API Design", "Introduction to Causal Inference", "Community", "Detailed estimator comparison", "Estimation Methods under Unconfoundedness", "Orthogonal/Double Machine Learning", "Doubly Robust Learning", "Dynamic Double Machine Learning", "Forest Based Estimators", "Meta-Learners", "Orthogonal instrumental variables", "Sieve 2SLS Instrumental Variable Estimation", "Estimation Methods for Dynamic Treatment Regimes", "Estimation Methods with Instruments", "Frequently Asked Questions (FAQ)", "Federated Learning in EconML", "Library Flow Chart", "Inference", "Interpretability", "Model Selection", "Machine Learning Based Estimation of Heterogeneous Treatment Effects", "Overview", "References", "EconML User Guide", "Validation"], "titleterms": {"": [81, 92], "2sl": 94, "A": 103, "_base_grf": 23, "_base_grftre": 24, "_bootstrap": 36, "_cate_estim": 0, "_ortho_learn": 1, "_rlearner": 10, "adapt": 92, "advantag": 97, "aka": 91, "all": 97, "an": 97, "analysi": [82, 107], "api": 83, "ar": [88, 89, 90, 91, 92, 93, 97], "ask": 97, "attribut": 103, "averag": 83, "b": 103, "bag": 100, "base": [91, 103], "basegrf": 23, "blpevaluationresult": 76, "bootstrap": 100, "bootstrapinfer": 25, "calibrationevaluationresult": 77, "can": 97, "cate": [82, 83], "cate_interpret": [2, 3], "causal": [82, 84, 97], "causal_analysi": 74, "causalanalysi": 74, "causalforest": [17, 91], "causalforestdml": 4, "causalivforest": 18, "chart": 99, "class": [88, 89, 90, 91, 92, 93], "commun": 85, "comparison": 86, "condit": 83, "confid": 107, "confound": 97, "custom": 103, "data": 82, "debias": 100, "debiasedlasso": 62, "design": 83, "detail": 86, "dml": [4, 5, 6, 7, 8, 9, 10, 37, 38, 39, 55, 82], "dmliv": 37, "dmlorthoforest": 53, "do": 97, "document": 81, "domain": 92, "domainadaptationlearn": 49, "don": 97, "doubl": [82, 88, 90, 91, 92], "doubli": [82, 89, 91, 92], "dowhi": [11, 82, 107], "dowhywrapp": 11, "dpolynomialfeatur": 46, "dr": [12, 13, 14, 15, 40, 41, 42, 43, 44, 45, 82], "driv": 40, "drlearner": 12, "drorthoforest": 54, "drpolicyforest": 56, "drpolicytre": 57, "drtester": [78, 107], "dynam": [82, 90, 95], "dynamicdml": 55, "econml": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 97, 98, 106], "effect": [83, 97, 103], "empiricalinferenceresult": 26, "ensemblecateestim": 60, "estim": [82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 103], "evaluationresult": 79, "exampl": [83, 88, 89, 91, 92, 93, 98, 103], "experi": 97, "extens": 82, "faq": [88, 89, 90, 97], "feder": [82, 98], "federated_learn": 16, "federatedestim": [16, 98], "feedback": 97, "flow": 99, "forest": [82, 91, 100], "forestdriv": 41, "forestdrlearn": 13, "formal": [88, 89, 91, 92], "frequent": 97, "gener": 82, "genericmodelfinalinfer": 27, "genericmodelfinalinferencediscret": 28, "genericsingletreatmentmodelfinalinfer": 29, "get": 97, "give": 97, "good": 97, "grf": [17, 18, 19, 20, 21, 22, 23, 24], "grftree": 24, "gridsearchcvlist": 71, "guid": 106, "have": 97, "hermitefeatur": 47, "heterogen": 103, "hierarchi": [88, 89, 90, 91, 92, 93], "honest": 100, "how": 97, "i": [88, 89, 90, 91, 92, 93, 97], "identifi": 97, "incorpor": 98, "indic": 81, "infer": [25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 82, 84, 100, 107], "instrument": [82, 93, 94, 96, 97], "integr": 82, "intenttotreatdriv": 42, "interpret": [82, 101], "interv": 107, "introduc": 98, "introduct": 84, "invest": 103, "iv": [37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 82], "kerneldml": 6, "know": 97, "lasso": 100, "learn": [82, 88, 89, 90, 91, 92, 98, 103], "learner": [82, 91, 92], "librari": [98, 99], "linear": [82, 83], "linear_model": [62, 63, 64, 65, 66, 67, 68, 69, 70], "lineardml": 7, "lineardriv": 43, "lineardrlearn": 14, "linearintenttotreatdriv": 44, "linearmodelfinalinfer": 30, "linearmodelfinalinferencediscret": 31, "linearmomentgrfcriterion": 19, "linearmomentgrfcriterionms": 20, "littl": 100, "m": 97, "machin": [82, 88, 90, 91, 92, 103], "make": 97, "meta": [82, 92], "metalearn": [49, 50, 51, 52], "method": [82, 87, 95, 96], "methodologi": [88, 89, 91, 92], "model": [82, 102], "model_select": [71, 72, 73], "modul": 82, "motiv": [98, 103], "multi": 103, "multioutputdebiasedlasso": 63, "multioutputgrf": 21, "next": 97, "non": 92, "nonparamdml": 8, "nonparamdmliv": 38, "normalinferenceresult": 32, "observ": 97, "ol": 100, "orf": [53, 54, 82], "orthoforest": 100, "orthogon": [82, 88, 91, 93], "orthoiv": 39, "overview": [88, 89, 91, 92, 98, 104], "packag": 83, "panel": [55, 82], "parametr": 92, "polici": [56, 57, 58, 59, 82, 101], "policyforest": 58, "policytre": 59, "populationsummaryresult": 33, "privat": 82, "problem": 83, "public": 82, "question": 97, "random": [82, 91], "recommend": 103, "refer": [82, 105], "refut": 107, "regim": 95, "regressionforest": 22, "relev": [88, 89, 90, 91, 92, 93], "result": [82, 97], "robust": [82, 89, 91, 92], "rscorer": 61, "run": 97, "scikit": 82, "score": [60, 61, 107], "scorer": 82, "segment": 103, "select": [82, 102], "selectiveregular": 64, "sens": 97, "sensit": 107, "setup": 83, "shap": 101, "should": [88, 89, 90, 91, 92, 93, 97], "siev": [46, 47, 48, 82, 94], "sievetsl": 48, "singletreecateinterpret": 2, "singletreepolicyinterpret": 3, "sklearn_extens": [62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73], "slearner": 50, "solut": [74, 82], "sparselineardml": 9, "sparselineardriv": 45, "sparselineardrlearn": 15, "statsmodelsinfer": 34, "statsmodelsinferencediscret": 35, "statsmodelslinearregress": 65, "statsmodelsrlm": 66, "structur": [88, 89, 90, 91, 92, 93], "subsampl": 100, "t": [92, 97], "tabl": 81, "test": [97, 103, 107], "theori": 98, "tlearner": 51, "todo": [92, 100, 106], "treatment": [83, 95, 103], "tree": 101, "unconfounded": 87, "under": 87, "upliftevaluationresult": 80, "us": [83, 88, 89, 90, 91, 92, 93, 97], "usag": [88, 89, 90, 91, 92, 93, 98], "user": 106, "util": [75, 82], "valid": [76, 77, 78, 79, 80, 82, 107], "variabl": [82, 93, 94], "weightedkfold": 72, "weightedlasso": 67, "weightedlassocv": 68, "weightedlassocvwrapp": 69, "weightedmultitasklassocv": 70, "weightedstratifiedkfold": 73, "welcom": 81, "what": [88, 89, 90, 91, 92, 93, 97], "when": [88, 89, 90, 91, 92, 93, 97], "whether": 97, "x": 92, "xlearner": 52, "you": [88, 89, 90, 91, 92, 93]}})